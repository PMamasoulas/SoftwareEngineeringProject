<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Atom.Core</name>
    </assembly>
    <members>
        <member name="T:Atom.Core.ApplicationConstants">
            <summary>
            Constants associated with the development of the Atom applications
            </summary>
        </member>
        <member name="P:Atom.Core.ApplicationConstants.Data">
            <summary>
            Gets the available applications
            </summary>
        </member>
        <member name="P:Atom.Core.ApplicationConstants.Commercial">
            <summary>
            Gets the available commercial applications
            </summary>
        </member>
        <member name="T:Atom.Core.ApplicationHelpers">
            <summary>
            Helper methods related to <see cref="T:Atom.Core.ApplicationConstants"/>
            </summary>
        </member>
        <member name="F:Atom.Core.ApplicationHelpers.ArgonColor">
            <summary>
            The color that represents the <see cref="P:Atom.Core.ApplicationConstants.Argon"/>
            </summary>
        </member>
        <member name="F:Atom.Core.ApplicationHelpers.WooShopColor">
            <summary>
            The color that represents the <see cref="P:Atom.Core.ApplicationConstants.WooShop"/>
            </summary>
        </member>
        <member name="F:Atom.Core.ApplicationHelpers.omniViewColor">
            <summary>
            The color that represents the <see cref="P:Atom.Core.ApplicationConstants.omniView"/>
            </summary>
        </member>
        <member name="M:Atom.Core.ApplicationHelpers.GetColorHex(System.String)">
            <summary>
            Returns the hex color value that represents the specified <paramref name="applicationName"/>
            </summary>
            <param name="applicationName">
            The name of the application.
            NOTE: The available options are retrieved from <see cref="T:Atom.Core.ApplicationConstants"/>!
            </param>
            <returns></returns>
        </member>
        <member name="T:Atom.Core.ArrayExtensions">
            <summary>
            Extension methods for arrays
            </summary>
        </member>
        <member name="M:Atom.Core.ArrayExtensions.Append``1(``0[],``0[])">
            <summary>
            Append the given objects to the original source array
            </summary>
            <typeparam name="T">The type of array</typeparam>
            <param name="source">The original array of values</param>
            <param name="toAdd">The values to append to the source</param>
            <returns></returns>
        </member>
        <member name="M:Atom.Core.ArrayExtensions.Prepend``1(``0[],``0[])">
            <summary>
            Prepend the given objects to the original source array
            </summary>
            <typeparam name="T">The type of array</typeparam>
            <param name="source">The original array of values</param>
            <param name="toAdd">The values to prepend to the source</param>
            <returns></returns>
        </member>
        <member name="T:Atom.Core.AssemblyHelpers">
            <summary>
            Helper methods for <see cref="T:System.Reflection.Assembly"/>
            </summary>
        </member>
        <member name="F:Atom.Core.AssemblyHelpers.OptionsDirectoryName">
            <summary>
            The name of the options directory
            </summary>
        </member>
        <member name="M:Atom.Core.AssemblyHelpers.GetEntryAssemblyDirectoryPath">
            <summary>
            Gets the directory path of the entry assembly
            </summary>
            <returns></returns>
        </member>
        <member name="M:Atom.Core.AssemblyHelpers.GetOptionsDirectoryPath">
            <summary>
            Gets the directory path of the options directory
            </summary>
            <returns></returns>
        </member>
        <member name="T:Atom.Core.AsyncAwaiter">
            <summary>
            Asynchronously awaits multiple tasks that are grouped based on a key
            </summary>
        </member>
        <member name="F:Atom.Core.AsyncAwaiter.SelfLock">
            <summary>
            A semaphore to lock the semaphore list
            </summary>
        </member>
        <member name="F:Atom.Core.AsyncAwaiter.Semaphores">
            <summary>
            A list of all semaphore locks (one per key)
            </summary>
        </member>
        <member name="M:Atom.Core.AsyncAwaiter.AwaitResultAsync``1(System.String,System.Func{System.Threading.Tasks.Task{``0}},System.Int32)">
            <summary>
            Awaits for any outstanding tasks to complete that are accessing the same key then runs the given task, returning it's value
            </summary>
            <param name="key">The key to await</param>
            <param name="task">The task to perform inside of the semaphore lock</param>
            <param name="maxAccessCount">If this is the first call, sets the maximum number of tasks that can access this task before it waiting</param>
            <returns></returns>
        </member>
        <member name="M:Atom.Core.AsyncAwaiter.AwaitAsync(System.String,System.Func{System.Threading.Tasks.Task},System.Int32)">
            <summary>
            Awaits for any outstanding tasks to complete that are accessing the same key then runs the given task
            </summary>
            <param name="key">The key to await</param>
            <param name="task">The task to perform inside of the semaphore lock</param>
            <param name="maxAccessCount">If this is the first call, sets the maximum number of tasks that can access this task before it waiting</param>
            <returns></returns>
        </member>
        <member name="M:Atom.Core.AsyncAwaiter.AwaitAsync(System.String,System.Linq.Expressions.Expression{System.Func{System.Boolean}},System.Func{System.Threading.Tasks.Task},System.Int32)">
            <summary>
            Awaits for any outstanding tasks to complete that are accessing the same key then runs the given task
            </summary>
            <param name="key">The key to await</param>
            <param name="activeFlag">The boolean property flag defining if the task is already running</param>
            <param name="task">The task to perform inside of the semaphore lock</param>
            <param name="maxAccessCount">If this is the first call, sets the maximum number of tasks that can access this task before it waiting</param>
            <returns></returns>
        </member>
        <member name="M:Atom.Core.AsyncAwaiter.AwaitAsync``1(System.String,System.Linq.Expressions.Expression{System.Func{System.Boolean}},System.Func{System.Threading.Tasks.Task{``0}},System.Int32)">
            <summary>
            Awaits for any outstanding tasks to complete that are accessing the same key then runs the given task
            </summary>
            <param name="key">The key to await</param>
            <param name="activeFlag">The boolean property flag defining if the task is already running</param>
            <param name="task">The task to perform inside of the semaphore lock</param>
            <param name="maxAccessCount">If this is the first call, sets the maximum number of tasks that can access this task before it waiting</param>
            <returns></returns>
        </member>
        <member name="T:Atom.Core.IgnoreAttribute">
            <summary>
            Marks an item as ignorable
            </summary>
        </member>
        <member name="M:Atom.Core.IgnoreAttribute.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="T:Atom.Core.NameAttribute">
            <summary>
            Provides name meta data to an item
            </summary>
        </member>
        <member name="P:Atom.Core.NameAttribute.Name">
            <summary>
            The name
            </summary>
        </member>
        <member name="M:Atom.Core.NameAttribute.#ctor(System.String)">
            <summary>
            Default constructor
            </summary>
            <param name="name">The name</param>
        </member>
        <member name="T:Atom.Core.RecalculationAttribute">
            <summary>
            The attribute that forces the recalculation for the computed properties.
            NOTE: If the property is not computed, then the attribute is ignored.
            </summary>
        </member>
        <member name="M:Atom.Core.RecalculationAttribute.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="T:Atom.Core.RenameAttribute">
            <summary>
            The attribute that contains meta data related to a rename.
            </summary>
        </member>
        <member name="P:Atom.Core.RenameAttribute.OldName">
            <summary>
            The old name
            </summary>
        </member>
        <member name="M:Atom.Core.RenameAttribute.#ctor(System.String)">
            <summary>
            Default constructor
            </summary>
            <param name="oldName">The old name</param>
        </member>
        <member name="T:Atom.Core.CharExtensions">
            <summary>
            Extension methods for chars
            </summary>
        </member>
        <member name="M:Atom.Core.CharExtensions.IsDigit(System.Char)">
            <summary>
            Returns a flag indicating whether the supplied character is a digit.
            </summary>
            <param name="c">The character to check if it is a digit.</param>
            <returns>True if the character is a digit, otherwise false.</returns>
        </member>
        <member name="M:Atom.Core.CharExtensions.IsLower(System.Char)">
            <summary>
            Returns a flag indicating whether the supplied character is a lower case ASCII letter.
            </summary>
            <param name="c">The character to check if it is a lower case ASCII letter.</param>
            <returns>True if the character is a lower case ASCII letter, otherwise false.</returns>
        </member>
        <member name="M:Atom.Core.CharExtensions.IsUpper(System.Char)">
            <summary>
            Returns a flag indicating whether the supplied character is an upper case ASCII letter.
            </summary>
            <param name="c">The character to check if it is an upper case ASCII letter.</param>
            <returns>True if the character is an upper case ASCII letter, otherwise false.</returns>
        </member>
        <member name="M:Atom.Core.CharExtensions.IsLetterOrDigit(System.Char)">
            <summary>
            Returns a flag indicating whether the supplied character is an ASCII letter or digit.
            </summary>
            <param name="c">The character to check if it is an ASCII letter or digit.</param>
            <returns>True if the character is an ASCII letter or digit, otherwise false.</returns>
        </member>
        <member name="T:Atom.Core.ColorsExtensions">
            <summary>
            Extension methods for <see cref="T:System.Drawing.Color"/>
            </summary>
        </member>
        <member name="M:Atom.Core.ColorsExtensions.PerceivedBrightness(System.Drawing.Color)">
            <summary>
            Perceives the brightness of the <paramref name="c"/> using a special formula
            </summary>
            <param name="c">The color to perceive its brightness</param>
            <returns></returns>
        </member>
        <member name="M:Atom.Core.ColorsExtensions.ToHex(System.Drawing.Color,System.Boolean)">
            <summary>
            Converts the given <paramref name="c"/> to its hex value
            </summary>
            <param name="c">The color to convert to hex</param>
            <param name="useHash">If true, then a hash '#' is placed in front of the hex, otherwise it's not</param>
            <returns></returns>
        </member>
        <member name="M:Atom.Core.ColorsExtensions.ToLighterColor(System.Drawing.Color)">
            <summary>
            Lightens the given <paramref name="c"/>
            </summary>
            <param name="c">The given color</param>
            <returns></returns>
        </member>
        <member name="M:Atom.Core.ColorsExtensions.ToDarkerColor(System.Drawing.Color)">
            <summary>
            Darkens the given <paramref name="c"/>
            </summary>
            <param name="c">The given color</param>
            <returns></returns>
        </member>
        <member name="T:Atom.Core.RelayCommand">
            <summary>
            A basic command that runs an action
            </summary>
        </member>
        <member name="F:Atom.Core.RelayCommand.mAction">
            <summary>
            The action to run
            </summary>
        </member>
        <member name="M:Atom.Core.RelayCommand.#ctor(System.Action)">
            <summary>
            Default constructor
            </summary>
            <param name="action">The action the relay command executes</param>
        </member>
        <member name="M:Atom.Core.RelayCommand.CanExecute(System.Object)">
            <summary>
            A <see cref="T:Atom.Core.RelayCommand"/> can always execute
            </summary>
            <param name="parameter"></param>
            <returns></returns>
        </member>
        <member name="M:Atom.Core.RelayCommand.Execute(System.Object)">
            <summary>
            Executes the action
            </summary>
            <param name="parameter">The parameter of this action, in this case it's always null</param>
        </member>
        <member name="E:Atom.Core.RelayCommand.CanExecuteChanged">
            <summary>
            The event thats fired when the <see cref="M:Atom.Core.RelayCommand.CanExecute(System.Object)"/> value has changed
            </summary>
        </member>
        <member name="T:Atom.Core.RelayCommand`1">
            <summary>
            The base for every custom command
            </summary>
            <typeparam name="TArgs">The type of the arguments of the command</typeparam>
        </member>
        <member name="P:Atom.Core.RelayCommand`1.Action">
            <summary>
            The action that the command executes
            </summary>
        </member>
        <member name="M:Atom.Core.RelayCommand`1.#ctor(System.Action{`0})">
            <summary>
            Default constructor
            </summary>
            <param name="action">The action that the command executes</param>
        </member>
        <member name="M:Atom.Core.RelayCommand`1.CanExecute(System.Object)">
            <summary>
            Checks whether the command can get executed
            </summary>
            <param name="parameter">The parameter of the command</param>
            <returns></returns>
        </member>
        <member name="M:Atom.Core.RelayCommand`1.Execute(System.Object)">
            <summary>
            Executes the command using the specified <paramref name="parameter"/>
            </summary>
            <param name="parameter">The parameter of the command</param>
        </member>
        <member name="M:Atom.Core.RelayCommand`1.Execute(`0)">
            <summary>
            Executes the command using the specified <paramref name="parameter"/>
            </summary>
            <param name="parameter">The parameter of the command</param>
        </member>
        <member name="E:Atom.Core.RelayCommand`1.CanExecuteChanged">
            <summary>
            Event that fires every that the can execute state changes
            </summary>
        </member>
        <member name="T:Atom.Core.ComparableComparer`1">
            <summary>
            The default comparer used for comparing two <see cref="T:System.IComparable"/> types.
            NOTE: This comparable is usually used for comparing nullable primitive types!
            </summary>
        </member>
        <member name="M:Atom.Core.ComparableComparer`1.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Atom.Core.ComparableComparer`1.Compare(`0,`0)">
            <summary>
            Defines a method that a type implements to compare two objects.
            </summary>
            <param name="x">The first value</param>
            <param name="y">The second value</param>
            <returns></returns>
        </member>
        <member name="T:Atom.Core.DefaultComparer`1">
            <summary>
            Comparer that extracts a value of every item of type <typeparamref name="T"/> and uses it for comparison after converting it to a <see cref="T:System.String"/>
            </summary>
            <typeparam name="T">The type of the item</typeparam>
        </member>
        <member name="F:Atom.Core.DefaultComparer`1.mKeyExtractor">
            <summary>
            Extractor that extracts the value of the object that is used for the comparison
            </summary>
        </member>
        <member name="M:Atom.Core.DefaultComparer`1.#ctor">
            <summary>
            Default constructor
            NOTE: The default comparer sets the uses the string that represents the object to perform comparisons!
            </summary>
        </member>
        <member name="M:Atom.Core.DefaultComparer`1.#ctor(System.Func{`0,System.Object})">
            <summary>
            Standard constructor
            </summary>
            <param name="keyExtractor">Extractor that extracts the value of the object that is used for the comparison</param>
        </member>
        <member name="M:Atom.Core.DefaultComparer`1.Compare(`0,`0)">
            <summary>
            Defines a method that a type implements to compare two objects.
            </summary>
            <param name="x">The first value</param>
            <param name="y">The second value</param>
            <returns></returns>
        </member>
        <member name="T:Atom.Core.DefaultStringEnumerableComparer">
            <summary>
            The default comparer used for comparing two <see cref="!:IEnumerable&lt;string&gt;"/> values
            </summary>
        </member>
        <member name="M:Atom.Core.DefaultStringEnumerableComparer.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Atom.Core.DefaultStringEnumerableComparer.Compare(System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Defines a method that a type implements to compare two objects.
            </summary>
            <param name="x">The first value</param>
            <param name="y">The second value</param>
            <returns></returns>
        </member>
        <member name="T:Atom.Core.LengthBasedEnumerableComparer">
            <summary>
            A comparer for an <see cref="T:System.Collections.IEnumerable"/> that compares based on the items count of the enumerables
            </summary>
        </member>
        <member name="M:Atom.Core.LengthBasedEnumerableComparer.Compare(System.Collections.IEnumerable,System.Collections.IEnumerable)">
            <summary>
            Defines a method that a type implements to compare two objects.
            </summary>
            <param name="x">The first value</param>
            <param name="y">The second value</param>
            <returns></returns>
        </member>
        <member name="T:Atom.Core.LengthBasedStringComparer">
            <summary>
            Comparer that compares two <see cref="T:System.String"/> values but firstly comparing their sizes and then if needed their contents
            </summary>
        </member>
        <member name="F:Atom.Core.LengthBasedStringComparer.mDescendingSameStringLengthOrdering">
            <summary>
            A flag indicating whether strings with the same length should get ordered in a descending order
            </summary>
        </member>
        <member name="M:Atom.Core.LengthBasedStringComparer.#ctor(System.Boolean)">
            <summary>
            Default constructor
            </summary>
            <param name="descendingSameStringLengthOrdering">A flag indicating whether strings with the same length should get ordered in a descending order</param>
        </member>
        <member name="M:Atom.Core.LengthBasedStringComparer.Compare(System.String,System.String)">
            <summary>
            Defines a method that a type implements to compare two objects.
            </summary>
            <param name="x">The first value</param>
            <param name="y">The second value</param>
            <returns></returns>
        </member>
        <member name="T:Atom.Core.NullableComparableComparer`1">
            <summary>
            The default comparer used for comparing two nullable <see cref="T:System.IComparable"/> structs.
            NOTE: This comparable is usually used for comparing nullable primitive types!
            </summary>
        </member>
        <member name="M:Atom.Core.NullableComparableComparer`1.Compare(System.Nullable{`0},System.Nullable{`0})">
            <summary>
            Defines a method that a type implements to compare two objects.
            </summary>
            <param name="x">The first value</param>
            <param name="y">The second value</param>
            <returns></returns>
        </member>
        <member name="T:Atom.Core.StandardEqualityComparer`1">
            <summary>
            The standard implementation of the <see cref="T:System.Collections.Generic.IEqualityComparer`1"/>
            </summary>
            <typeparam name="T">The type of the items</typeparam>
        </member>
        <member name="F:Atom.Core.StandardEqualityComparer`1.mComparer">
            <summary>
            The comparer
            </summary>
        </member>
        <member name="F:Atom.Core.StandardEqualityComparer`1.mHashCodeGenerator">
            <summary>
            The hash code generator
            </summary>
        </member>
        <member name="M:Atom.Core.StandardEqualityComparer`1.#ctor(System.Func{`0,`0,System.Boolean},System.Func{`0,System.Int32})">
            <summary>
            Default constructor
            </summary>
            <param name="comparer">The comparer</param>
            <param name="hashCodeGenerator">The hash code generator</param>
        </member>
        <member name="M:Atom.Core.StandardEqualityComparer`1.Equals(`0,`0)">
            <summary>
            Determines whether the specified objects are equal.
            </summary>
            <param name="x">The first object</param>
            <param name="y">The second object</param>
            <returns></returns>
        </member>
        <member name="M:Atom.Core.StandardEqualityComparer`1.GetHashCode(`0)">
            <summary>
            Returns a hash code for the specified object.
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="T:Atom.Core.TypeComparer">
            <summary>
            The default <see cref="T:System.Type"/> comparer
            </summary>
        </member>
        <member name="M:Atom.Core.TypeComparer.Compare(System.Type,System.Type)">
            <summary>
            Defines a method that a type implements to compare two objects.
            </summary>
            <param name="x">The first value</param>
            <param name="y">The second value</param>
            <returns></returns>
        </member>
        <member name="T:Atom.Core.UriComparer">
            <summary>
            The default <see cref="T:System.Uri"/> comparer
            </summary>
        </member>
        <member name="M:Atom.Core.UriComparer.Compare(System.Uri,System.Uri)">
            <summary>
            Defines a method that a type implements to compare two objects.
            </summary>
            <param name="x">The first value</param>
            <param name="y">The second value</param>
            <returns></returns>
        </member>
        <member name="T:Atom.Core.Country">
            <summary>
            The name of the countries along with the two digits country codes(Alpha-2 codes)
            </summary>
        </member>
        <member name="T:Atom.Core.CountryDataModel">
            <summary>
            Represents a country
            </summary>
        </member>
        <member name="P:Atom.Core.CountryDataModel.Country">
            <summary>
            The name of the countries along with the two digits country codes(Alpha-2 codes)
            </summary>
        </member>
        <member name="P:Atom.Core.CountryDataModel.Shortcode">
            <summary>
            The shortcode.
            Ex.: GR, US.
            </summary>
        </member>
        <member name="P:Atom.Core.CountryDataModel.Name">
            <summary>
            The name
            </summary>
        </member>
        <member name="P:Atom.Core.CountryDataModel.States">
            <summary>
            The states
            </summary>
        </member>
        <member name="M:Atom.Core.CountryDataModel.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Atom.Core.CountryDataModel.#ctor(Atom.Core.Country,System.Collections.Generic.IEnumerable{Atom.Core.StateDataModel})">
            <summary>
            Standard constructor
            </summary>
            <param name="countryCode">
            The shortcode.
            Ex. GR, US.
            </param>
            <param name="states">The states</param>
        </member>
        <member name="M:Atom.Core.CountryDataModel.ToString">
            <summary>
            Returns a string that represents the current object
            </summary>
            <returns></returns>
        </member>
        <member name="M:Atom.Core.CountryDataModel.Equals(System.Object)">
            <summary>
            Determines whether the specified object is equal to the current object.
            </summary>
            <param name="obj">The object to compare with the current object.</param>
            <returns></returns>
        </member>
        <member name="M:Atom.Core.CountryDataModel.Equals(Atom.Core.CountryDataModel)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <param name="other">An object to compare with this object.</param>
            <returns></returns>
        </member>
        <member name="M:Atom.Core.CountryDataModel.GetHashCode">
            <summary>
            Serves as the default hash function.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Atom.Core.CountryDataModels">
            <summary>
            Implements a set of predefined <see cref="T:Atom.Core.CountryDataModel"/>s
            </summary>
        </member>
        <member name="P:Atom.Core.CountryDataModels.Countries">
            <summary>
            Gets the available countries
            </summary>
        </member>
        <member name="P:Atom.Core.CountryDataModels.States">
            <summary>
            Gets the available states
            </summary>
        </member>
        <member name="T:Atom.Core.InputConstants">
            <summary>
            Constants associated with the user input
            </summary>
        </member>
        <member name="F:Atom.Core.InputConstants.PasswordChar">
            <summary>
            The password char used for masking a password
            </summary>
        </member>
        <member name="F:Atom.Core.InputConstants.PasswordPreviewString">
            <summary>
            The string used for masking a password
            </summary>
        </member>
        <member name="F:Atom.Core.InputConstants.GeneralLimit">
            <summary>
            The limit of chars a general type input has
            </summary>
        </member>
        <member name="F:Atom.Core.InputConstants.PasswordLimit">
            <summary>
            The limit of chars a password has
            </summary>
        </member>
        <member name="F:Atom.Core.InputConstants.PhoneLimit">
            <summary>
            The limit of chars a phone has
            </summary>
        </member>
        <member name="F:Atom.Core.InputConstants.EmailLimit">
            <summary>
            The limit of chars an email has
            </summary>
        </member>
        <member name="F:Atom.Core.InputConstants.IntegerLimit">
            <summary>
            The limit of chars an integer has
            </summary>
        </member>
        <member name="F:Atom.Core.InputConstants.DoubleLimit">
            <summary>
            The limit of chars a double has
            </summary>
        </member>
        <member name="F:Atom.Core.InputConstants.HexColorLimit">
            <summary>
            The limit of a string that presents a hex color
            </summary>
        </member>
        <member name="F:Atom.Core.InputConstants.Phone">
            <summary>
            The phone chars array
            </summary>
        </member>
        <member name="F:Atom.Core.InputConstants.Email">
            <summary>
            The phone chars array
            </summary>
        </member>
        <member name="F:Atom.Core.InputConstants.UnsignedIntegers">
            <summary>
            The unsigned integers chars array
            </summary>
        </member>
        <member name="F:Atom.Core.InputConstants.UnsignedDoubles">
            <summary>
            The unsigned double chars array
            </summary>
        </member>
        <member name="F:Atom.Core.InputConstants.Integers">
            <summary>
            The integers chars array
            </summary>
        </member>
        <member name="F:Atom.Core.InputConstants.Doubles">
            <summary>
            The doubles chars array
            </summary>
        </member>
        <member name="F:Atom.Core.InputConstants.Latin">
            <summary>
            The Latin chars array
            </summary>
        </member>
        <member name="F:Atom.Core.InputConstants.LatinAndNumbers">
            <summary>
            The Latin chars and numbers array
            </summary>
        </member>
        <member name="F:Atom.Core.InputConstants.LatinAndNumbersAndSymbols">
            <summary>
            The Latin characters , the numbers and the symbols array
            </summary>
        </member>
        <member name="F:Atom.Core.InputConstants.HexColorChars">
            <summary>
            The characters for representing a hex color
            </summary>
        </member>
        <member name="T:Atom.Core.InputFormatters">
            <summary>
            Implements a set of predefined input formatters
            </summary>
        </member>
        <member name="F:Atom.Core.InputFormatters.LatinCharactersOnlyFormatter">
            <summary>
            Input normalization for Latin only fields
            </summary>
        </member>
        <member name="M:Atom.Core.InputFormatters.SpecificCharsOnlyFormatter(System.String,System.String,System.Char[])">
            <summary>
            Input normalization using only the specified <paramref name="chars"/>
            </summary>
            <param name="currentValue">The current value</param>
            <param name="newValue">The new value</param>
            <param name="chars">The chars</param>
            <returns></returns>
        </member>
        <member name="P:Atom.Core.InputFormatters.EmailFormatter">
            <summary>
            Input normalization for email values
            </summary>
        </member>
        <member name="P:Atom.Core.InputFormatters.PhoneFormatter">
            <summary>
            Input normalization for phone values
            </summary>
        </member>
        <member name="P:Atom.Core.InputFormatters.CountryCodeFormatter">
            <summary>
            Input normalization for country code values
            </summary>
        </member>
        <member name="P:Atom.Core.InputFormatters.CharFormatter">
            <summary>
            Input normalization for single character values
            </summary>
        </member>
        <member name="P:Atom.Core.InputFormatters.HourValueFormatter">
            <summary>
            Input normalization for hour values
            </summary>
        </member>
        <member name="P:Atom.Core.InputFormatters.MinuteValueFormatter">
            <summary>
            Input normalization for minute values
            </summary>
        </member>
        <member name="P:Atom.Core.InputFormatters.SByteFormatter">
            <summary>
            Input normalization for <see cref="T:System.SByte"/> values
            </summary>
        </member>
        <member name="P:Atom.Core.InputFormatters.ByteFormatter">
            <summary>
            Input normalization for <see cref="T:System.Byte"/> values
            </summary>
        </member>
        <member name="P:Atom.Core.InputFormatters.ShortFormatter">
            <summary>
            Input normalization for <see cref="T:System.Int16"/> values
            </summary>
        </member>
        <member name="P:Atom.Core.InputFormatters.UnsignedShortFormatter">
            <summary>
            Input normalization for <see cref="T:System.UInt16"/> values
            </summary>
        </member>
        <member name="P:Atom.Core.InputFormatters.IntegerFormatter">
            <summary>
            Input normalization for <see cref="T:System.Int32"/> values
            </summary>
        </member>
        <member name="P:Atom.Core.InputFormatters.UnsignedIntegerFormatter">
            <summary>
            Input normalization for <see cref="T:System.UInt32"/> values
            </summary>
        </member>
        <member name="P:Atom.Core.InputFormatters.LongFormatter">
            <summary>
            Input normalization for <see cref="T:System.Int64"/> values
            </summary>
        </member>
        <member name="P:Atom.Core.InputFormatters.UnsignedLongFormatter">
            <summary>
            Input normalization for <see cref="T:System.UInt64"/> values
            </summary>
        </member>
        <member name="P:Atom.Core.InputFormatters.FloatFormatter">
            <summary>
            Input normalization for <see cref="T:System.Single"/> values
            </summary>
        </member>
        <member name="P:Atom.Core.InputFormatters.UnsignedFloatFormatter">
            <summary>
            Input normalization for unsigned <see cref="T:System.Single"/> values
            </summary>
        </member>
        <member name="P:Atom.Core.InputFormatters.DoubleFormatter">
            <summary>
            Input normalization for <see cref="T:System.Double"/> values
            </summary>
        </member>
        <member name="P:Atom.Core.InputFormatters.UnsignedDoubleFormatter">
            <summary>
            Input normalization for unsigned <see cref="T:System.Double"/> values
            </summary>
        </member>
        <member name="P:Atom.Core.InputFormatters.DecimalFormatter">
            <summary>
            Input normalization for <see cref="T:System.Decimal"/> values
            </summary>
        </member>
        <member name="P:Atom.Core.InputFormatters.UnsignedDecimalFormatter">
            <summary>
            Input normalization for unsigned <see cref="T:System.Decimal"/> values
            </summary>
        </member>
        <member name="P:Atom.Core.InputFormatters.HexColorFormatter">
            <summary>
            Input normalization for hex color values
            </summary>
        </member>
        <member name="M:Atom.Core.InputFormatters.FormatBasedOnLength(System.String,System.String,System.Int32)">
            <summary>
            Selects between the <paramref name="currentValue"/> and the <paramref name="newValue"/> based
            on their length using the <paramref name="maxLength"/>
            </summary>
            <param name="currentValue">The current value</param>
            <param name="newValue">The new value</param>
            <param name="maxLength">The max length</param>
            <returns></returns>
        </member>
        <member name="T:Atom.Core.NumericConstants">
            <summary>
            Constants associated with numeric values
            </summary>
        </member>
        <member name="F:Atom.Core.NumericConstants.AnyNumberChars">
            <summary>
            The chars required to present any real number
            </summary>
        </member>
        <member name="F:Atom.Core.NumericConstants.PixelShortcode">
            <summary>
            The pixel short code
            </summary>
        </member>
        <member name="F:Atom.Core.NumericConstants.PointShortcode">
            <summary>
            The point short code
            </summary>
        </member>
        <member name="F:Atom.Core.NumericConstants.MillimeterShortcode">
            <summary>
            The millimeter short code
            </summary>
        </member>
        <member name="F:Atom.Core.NumericConstants.PicaShortcode">
            <summary>
            The pica short code
            </summary>
        </member>
        <member name="F:Atom.Core.NumericConstants.CentimeterShortcode">
            <summary>
            The centimeter short code
            </summary>
        </member>
        <member name="F:Atom.Core.NumericConstants.InchShortcode">
            <summary>
            The inch short code
            </summary>
        </member>
        <member name="F:Atom.Core.NumericConstants.PointToPixel">
            <summary>
            The point to pixel equivalent
            </summary>
        </member>
        <member name="F:Atom.Core.NumericConstants.MillimeterToPixel">
            <summary>
            The millimeter to pixel equivalent
            </summary>
        </member>
        <member name="F:Atom.Core.NumericConstants.PicaToPixel">
            <summary>
            The pica to pixel equivalent
            </summary>
        </member>
        <member name="F:Atom.Core.NumericConstants.CentimeterToPixel">
            <summary>
            The centimeter to pixel equivalent
            </summary>
        </member>
        <member name="F:Atom.Core.NumericConstants.InchToPixel">
            <summary>
            The inch to pixel equivalent
            </summary>
        </member>
        <member name="T:Atom.Core.PhoneConstants">
            <summary>
            Constants associated with phones
            </summary>
        </member>
        <member name="M:Atom.Core.PhoneConstants.GetAvailableData">
            <summary>
            Gets all the available <see cref="T:Atom.Core.PhoneData"/> models
            </summary>
            <returns></returns>
        </member>
        <member name="T:Atom.Core.PhoneData">
            <summary>
            Contains all the necessary data for representing a phone
            </summary>
        </member>
        <member name="P:Atom.Core.PhoneData.CountryCode">
            <summary>
            The code that represents the country
            </summary>
        </member>
        <member name="P:Atom.Core.PhoneData.CountryName">
            <summary>
            The country name in English
            </summary>
        </member>
        <member name="P:Atom.Core.PhoneData.LocalizedCountryName">
            <summary>
            The country name using the Country's language
            </summary>
        </member>
        <member name="M:Atom.Core.PhoneData.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Atom.Core.PhoneData.#ctor(System.String,System.String,System.String)">
            <summary>
            Standard constructor
            </summary>
            <param name="countryCode">The code that represents the country</param>
            <param name="countryName">The country name in English</param>
            <param name="localizedCountryName">The country name using the Country's language</param>
        </member>
        <member name="M:Atom.Core.PhoneData.ToString">
            <summary>
            Returns a string that represents the current object
            </summary>
            <returns></returns>
        </member>
        <member name="T:Atom.Core.StateDataModel">
            <summary>
            Represents a state
            </summary>
        </member>
        <member name="P:Atom.Core.StateDataModel.Shortcode">
            <summary>
            The shortcode
            </summary>
        </member>
        <member name="P:Atom.Core.StateDataModel.Name">
            <summary>
            The name
            </summary>
        </member>
        <member name="M:Atom.Core.StateDataModel.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Atom.Core.StateDataModel.#ctor(System.String,System.String)">
            <summary>
            Standard constructor
            </summary>
            <param name="shortcode">The shortcode</param>
            <param name="name">The name</param>
        </member>
        <member name="M:Atom.Core.StateDataModel.ToString">
            <summary>
            Returns a string that represents the current object
            </summary>
            <returns></returns>
        </member>
        <member name="M:Atom.Core.StateDataModel.Equals(System.Object)">
            <summary>
            Determines whether the specified object is equal to the current object.
            </summary>
            <param name="obj">The object to compare with the current object.</param>
            <returns></returns>
        </member>
        <member name="M:Atom.Core.StateDataModel.Equals(Atom.Core.StateDataModel)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <param name="other">An object to compare with this object.</param>
            <returns></returns>
        </member>
        <member name="M:Atom.Core.StateDataModel.GetHashCode">
            <summary>
            Serves as the default hash function.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Atom.Core.ClassWrapper`1">
            <summary>
            A class wrapper
            </summary>
            <typeparam name="T">The type of the data</typeparam>
        </member>
        <member name="P:Atom.Core.ClassWrapper`1.Data">
            <summary>
            The data
            </summary>
        </member>
        <member name="M:Atom.Core.ClassWrapper`1.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="T:Atom.Core.DataResult`1">
            <summary>
            A data result with a completion indicator
            </summary>
            <typeparam name="TResult">The type of the data</typeparam>
        </member>
        <member name="P:Atom.Core.DataResult`1.Completed">
            <summary>
            A flag indicating whether the operation succeeded or not
            </summary>
        </member>
        <member name="P:Atom.Core.DataResult`1.Data">
            <summary>
            The data
            </summary>
        </member>
        <member name="M:Atom.Core.DataResult`1.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="T:Atom.Core.EnumValueWrapper`1">
            <summary>
            Wraps a value of an <see cref="!:enum"/>
            </summary>
            <typeparam name="TEnumValue">The type of the enum value</typeparam>
        </member>
        <member name="P:Atom.Core.EnumValueWrapper`1.EnumValue">
            <summary>
            The enum value
            </summary>
        </member>
        <member name="P:Atom.Core.EnumValueWrapper`1.EnumValueName">
            <summary>
            The name of the enum value
            </summary>
        </member>
        <member name="M:Atom.Core.EnumValueWrapper`1.#ctor(`0,System.String)">
            <summary>
            Default constructor
            </summary>
            <param name="enumValue">The enum value</param>
            <param name="enumValueName">The name of the enum value</param>
        </member>
        <member name="M:Atom.Core.EnumValueWrapper`1.ToString">
            <summary>
            Returns a string that represents the current object
            </summary>
            <returns></returns>
        </member>
        <member name="M:Atom.Core.EnumValueWrapper`1.Equals(System.Object)">
            <summary>
            Determines whether the specified object is equal to the current object.
            </summary>
            <param name="obj">The object to compare with the current object.</param>
            <returns></returns>
        </member>
        <member name="M:Atom.Core.EnumValueWrapper`1.Equals(Atom.Core.EnumValueWrapper{`0})">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <param name="other">An object to compare with this object.</param>
            <returns></returns>
        </member>
        <member name="M:Atom.Core.EnumValueWrapper`1.GetHashCode">
            <summary>
            Serves as the default hash function.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Atom.Core.ImageEnumValueWrapper`1">
            <summary>
            A <see cref="T:Atom.Core.EnumValueWrapper`1"/> that's able to store a vector that represents
            the enum value
            </summary>
            <typeparam name="TEnumValue">The type of the enum value</typeparam>
        </member>
        <member name="P:Atom.Core.ImageEnumValueWrapper`1.VectorSource">
            <summary>
            The vector source
            </summary>
        </member>
        <member name="M:Atom.Core.ImageEnumValueWrapper`1.#ctor(`0,System.String,Atom.Core.VectorSource)">
            <summary>
            Default constructor
            </summary>
            <param name="enumValue">The enum value</param>
            <param name="enumValueName">The name of the enum value</param>
            <param name="vectorSource">The vector source</param>
        </member>
        <member name="T:Atom.Core.Failable">
            <summary>
            The default implementation of the <see cref="T:Atom.Core.IFailable"/> interface
            </summary>
        </member>
        <member name="P:Atom.Core.Failable.ErrorType">
            <summary>
            The error type
            </summary>
        </member>
        <member name="P:Atom.Core.Failable.ErrorMessage">
            <summary>
            The error message
            </summary>
        </member>
        <member name="P:Atom.Core.Failable.Successful">
            <summary>
            A flag indicating whether the task was successful or not
            </summary>
        </member>
        <member name="M:Atom.Core.Failable.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Atom.Core.Failable.op_Implicit(System.String)~Atom.Core.Failable">
            <summary>
            Creates a <see cref="T:Atom.Core.Failable"/> using the specified string as its error message
            </summary>
            <param name="s">The string</param>
        </member>
        <member name="M:Atom.Core.Failable.op_Implicit(System.Exception)~Atom.Core.Failable">
            <summary>
            Creates a <see cref="T:Atom.Core.Failable"/> using the message of the specified ex and its inner exceptions
            as its error message
            </summary>
            <param name="ex">The exception</param>
        </member>
        <member name="T:Atom.Core.Failable`1">
            <summary>
            The default implementation of the <see cref="T:Atom.Core.IFailable`1"/> interface
            </summary>
            <typeparam name="TResult">The type of the result</typeparam>
        </member>
        <member name="P:Atom.Core.Failable`1.Result">
            <summary>
            The result
            </summary>
        </member>
        <member name="M:Atom.Core.Failable`1.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Atom.Core.Failable`1.#ctor(`0)">
            <summary>
            Standard constructor
            </summary>
            <param name="result">The result</param>
        </member>
        <member name="M:Atom.Core.Failable`1.op_Implicit(System.String)~Atom.Core.Failable{`0}">
            <summary>
            Creates a <see cref="T:Atom.Core.Failable`1"/> using the specified string as its error message
            </summary>
            <param name="s">The string</param>
        </member>
        <member name="M:Atom.Core.Failable`1.op_Implicit(System.Exception)~Atom.Core.Failable{`0}">
            <summary>
            Creates a <see cref="T:Atom.Core.Failable`1"/> using the message of the specified ex and its inner exceptions
            as its error message
            </summary>
            <param name="ex">The exception</param>
        </member>
        <member name="M:Atom.Core.Failable`1.op_Implicit(`0)~Atom.Core.Failable{`0}">
            <summary>
            Creates a <see cref="T:Atom.Core.Failable`1"/> using the specified result as its result
            </summary>
            <param name="result">The result</param>
        </member>
        <member name="T:Atom.Core.FileDataModel">
            <summary>
            Represents a file
            </summary>
        </member>
        <member name="P:Atom.Core.FileDataModel.Name">
            <summary>
            The name of the file
            </summary>
        </member>
        <member name="P:Atom.Core.FileDataModel.Length">
            <summary>
            The size of the file in bytes
            </summary>
        </member>
        <member name="P:Atom.Core.FileDataModel.MetaData">
            <summary>
            The meta data
            </summary>
        </member>
        <member name="M:Atom.Core.FileDataModel.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Atom.Core.FileDataModel.#ctor(System.IO.FileInfo)">
            <summary>
            File info based constructor.
            NOTE: The <see cref="P:System.IO.FileInfo.Name"/> is used as the <see cref="P:Atom.Core.FileDataModel.Name"/>, not the <see cref="P:System.IO.FileSystemInfo.FullName"/>!
            </summary>
            <param name="fileInfo">The file info</param>
        </member>
        <member name="M:Atom.Core.FileDataModel.ToString">
            <summary>
            Returns a string that represents the current object
            </summary>
            <returns></returns>
        </member>
        <member name="T:Atom.Core.FileGroupDataModel">
            <summary>
            Represents a files group
            </summary>
        </member>
        <member name="F:Atom.Core.FileGroupDataModel.mFiles">
            <summary>
            The member of the <see cref="P:Atom.Core.FileGroupDataModel.Files"/> property
            </summary>
        </member>
        <member name="P:Atom.Core.FileGroupDataModel.Name">
            <summary>
            The name of the group
            </summary>
        </member>
        <member name="P:Atom.Core.FileGroupDataModel.Length">
            <summary>
            The size of all the files in bytes
            </summary>
        </member>
        <member name="P:Atom.Core.FileGroupDataModel.Files">
            <summary>
            The files
            </summary>
        </member>
        <member name="P:Atom.Core.FileGroupDataModel.MetaData">
            <summary>
            The meta data
            </summary>
        </member>
        <member name="M:Atom.Core.FileGroupDataModel.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Atom.Core.FileGroupDataModel.ToString">
            <summary>
            Returns a string that represents the current object
            </summary>
            <returns></returns>
        </member>
        <member name="T:Atom.Core.FilesDataModel">
            <summary>
            Represents a group of files
            </summary>
        </member>
        <member name="P:Atom.Core.FilesDataModel.Files">
            <summary>
            The files
            </summary>
        </member>
        <member name="M:Atom.Core.FilesDataModel.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="T:Atom.Core.Formula">
            <summary>
            A formula that contains <see cref="T:Atom.Core.Shortcode"/>s
            </summary>
        </member>
        <member name="F:Atom.Core.Formula.mValue">
            <summary>
            The member of the <see cref="P:Atom.Core.Formula.Value"/> property
            </summary>
        </member>
        <member name="F:Atom.Core.Formula.mCachedProperties">
            <summary>
            The properties that are used by the formula
            </summary>
        </member>
        <member name="F:Atom.Core.Formula.mShortcodes">
            <summary>
            The member of the <see cref="P:Atom.Core.Formula.Shortcodes"/> property
            </summary>
        </member>
        <member name="P:Atom.Core.Formula.Id">
            <summary>
            The id
            </summary>
        </member>
        <member name="P:Atom.Core.Formula.Name">
            <summary>
            The name
            </summary>
        </member>
        <member name="P:Atom.Core.Formula.Category">
            <summary>
            Formula category
            </summary>
        </member>
        <member name="P:Atom.Core.Formula.Value">
            <summary>
            The formula
            </summary>
        </member>
        <member name="P:Atom.Core.Formula.IsActive">
            <summary>
            A flag indicating if the formula is active or not
            </summary>
        </member>
        <member name="P:Atom.Core.Formula.Shortcodes">
            <summary>
            The shortcodes
            </summary>
        </member>
        <member name="M:Atom.Core.Formula.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Atom.Core.Formula.#ctor(System.String,System.String,System.String,System.String,System.Boolean,System.Collections.Generic.IEnumerable{Atom.Core.PropertyShortcode})">
            <summary>
            Standard constructor
            </summary>
            <param name="id">The id</param>
            <param name="name">The formula</param>
            <param name="category">Formula category</param>
            <param name="formula">The name</param>
            <param name="isActive">A flag indicating if the formula is active or not</param>
            <param name="shortcodes">The shortcodes</param>
        </member>
        <member name="M:Atom.Core.Formula.ToString">
            <summary>
            Returns a string that represents the current object
            </summary>
            <returns></returns>
        </member>
        <member name="M:Atom.Core.Formula.GetActualValue(System.Object)">
            <summary>
            Gets the actual value of the <see cref="P:Atom.Core.Formula.Value"/> by replacing all its shortcodes with their actual values
            </summary>
            <param name="instance">The instance that will be used by the <see cref="P:Atom.Core.Formula.Shortcodes"/></param>
            <returns></returns>
        </member>
        <member name="T:Atom.Core.FormulaDataModel`3">
            <summary>
            Represents a <see cref="T:Atom.Core.Formula"/>
            </summary>
            <typeparam name="TPropertyShortcodeDataModel">The type of the related property shortcode data model</typeparam>
            <typeparam name="TPropertyShortcodeValueTranslatorDataModel">The type of the property shortcode translator data model</typeparam>
            <typeparam name="TPropertyShortcodePropertyFilterDataModel">The type of the shortcode property value filter data model</typeparam>
        </member>
        <member name="P:Atom.Core.FormulaDataModel`3.Id">
            <summary>
            The id
            </summary>
        </member>
        <member name="P:Atom.Core.FormulaDataModel`3.Name">
            <summary>
            The name
            </summary>
        </member>
        <member name="P:Atom.Core.FormulaDataModel`3.Category">
            <summary>
            The formula category
            </summary>
        </member>
        <member name="P:Atom.Core.FormulaDataModel`3.Value">
            <summary>
            The formula
            </summary>
        </member>
        <member name="P:Atom.Core.FormulaDataModel`3.IsActive">
            <summary>
            A flag indicating whether it's active or not
            </summary>
        </member>
        <member name="M:Atom.Core.FormulaDataModel`3.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Atom.Core.FormulaDataModel`3.#ctor(System.String,System.String,System.String,System.Boolean)">
            <summary>
            Standard constructors
            </summary>
            <param name="name">The name</param>
            <param name="formula">The formula</param>
            <param name="category">The formula category</param>
            <param name="isActivel">A flag indicating whether it's active or not</param>
        </member>
        <member name="M:Atom.Core.FormulaDataModel`3.#ctor(Atom.Core.Formula)">
            <summary>
            Formula based constructor
            </summary>
            <param name="formula">The formula</param>
        </member>
        <member name="M:Atom.Core.FormulaDataModel`3.ToShortcodeFormula(System.Collections.Generic.IEnumerable{Atom.Core.PropertyShortcode})">
            <summary>
            Creates and returns a <see cref="T:Atom.Core.Formula"/> from the current <see cref="T:Atom.Core.FormulaDataModel`3"/>
            </summary>
            <param name="shortcodes">The shortcodes that the formula uses</param>
            <returns></returns>
        </member>
        <member name="T:Atom.Core.IdentifiableModel">
            <summary>
            A model that can be identified by using its unique <see cref="P:Atom.Core.IdentifiableModel.Id"/>
            </summary>
        </member>
        <member name="P:Atom.Core.IdentifiableModel.Id">
            <summary>
            The unique identifier of the model
            </summary>
        </member>
        <member name="M:Atom.Core.IdentifiableModel.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Atom.Core.IdentifiableModel.#ctor(System.String)">
            <summary>
            Constructor with potential null check for the <paramref name="id"/>
            </summary>
            <param name="id">The unique identifier of the model</param>
        </member>
        <member name="M:Atom.Core.IdentifiableModel.Equals(Atom.Core.IdentifiableModel)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <param name="obj">An object to compare with this object</param>
            <returns></returns>
        </member>
        <member name="T:Atom.Core.MetaDataModel">
            <summary>
            Represents a meta information model
            </summary>
        </member>
        <member name="P:Atom.Core.MetaDataModel.Id">
            <summary>
            The id
            </summary>
        </member>
        <member name="P:Atom.Core.MetaDataModel.Key">
            <summary>
            The key
            </summary>
        </member>
        <member name="P:Atom.Core.MetaDataModel.Value">
            <summary>
            The value
            </summary>
        </member>
        <member name="P:Atom.Core.MetaDataModel.StringValue">
            <summary>
            The string value
            </summary>
        </member>
        <member name="M:Atom.Core.MetaDataModel.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Atom.Core.MetaDataModel.#ctor(System.String,System.String)">
            <summary>
            Standard constructor
            </summary>
            <param name="key">They key</param>
            <param name="value">The value</param>
        </member>
        <member name="M:Atom.Core.MetaDataModel.ToString">
            <summary>
            Returns a string that represents the current object
            </summary>
            <returns></returns>
        </member>
        <member name="T:Atom.Core.OptionSelector">
            <summary>
            Selector that is used for selecting an option
            </summary>
        </member>
        <member name="F:Atom.Core.OptionSelector.mRules">
            <summary>
            The member of the <see cref="P:Atom.Core.OptionSelector.Rules"/> property
            </summary>
        </member>
        <member name="P:Atom.Core.OptionSelector.Instance">
            <summary>
            The instance of the object that contains the information that will be used by the selector and its <see cref="P:Atom.Core.OptionSelector.Rules"/>
            </summary>
        </member>
        <member name="P:Atom.Core.OptionSelector.ParentPath">
            <summary>
            The property path that navigates to a property or a sub property of the <see cref="P:Atom.Core.OptionSelector.Instance"/>
            </summary>
        </member>
        <member name="P:Atom.Core.OptionSelector.Priority">
            <summary>
            The priority
            </summary>
        </member>
        <member name="P:Atom.Core.OptionSelector.Rules">
            <summary>
            The option selector rules that at least one must be satisfied in order for the selector to be valid
            </summary>
        </member>
        <member name="P:Atom.Core.OptionSelector.IsValid">
            <summary>
            A flag indicating that at least one of the <see cref="P:Atom.Core.OptionSelector.Rules"/> of the selector are satisfied
            </summary>
        </member>
        <member name="M:Atom.Core.OptionSelector.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Atom.Core.OptionSelector.#ctor(System.Object,System.String,System.Int32,System.Collections.Generic.IEnumerable{Atom.Core.OptionSelectorRule})">
            <summary>
            Standard constructor
            </summary>
            <param name="instance">The instance of the object that contains the information that will be used by the selector and its <paramref name="rules"/></param>
            <param name="parentPath">The property path that navigates to a property or a sub property of the <paramref name="instance"/></param>
            <param name="priority">The priority</param>
            <param name="rules">The option selector rules that at least one must be satisfied in order for the selector to be valid</param>
        </member>
        <member name="T:Atom.Core.OptionSelectorRule">
            <summary>
            Property to value rule used by the <see cref="T:Atom.Core.OptionSelector"/>
            </summary>
        </member>
        <member name="P:Atom.Core.OptionSelectorRule.Property">
            <summary>
            The property
            </summary>
        </member>
        <member name="P:Atom.Core.OptionSelectorRule.Value">
            <summary>
            The value that the <see cref="P:Atom.Core.OptionSelectorRule.Property"/> must have in order for the rule to be satisfied
            </summary>
        </member>
        <member name="M:Atom.Core.OptionSelectorRule.#ctor(System.Reflection.PropertyInfo,System.String)">
            <summary>
            Default constructor
            </summary>
            <param name="propertyInfo">The property info</param>
            <param name="value">The value that the <see cref="P:Atom.Core.OptionSelectorRule.Property"/> must have in order for the rule to be satisfied</param>
        </member>
        <member name="T:Atom.Core.OptionSelectorDataModel`2">
            <summary>
            Represent a receipt option selector
            </summary>
            <typeparam name="TOptionSelectorDataModel">The type of the option selector data model</typeparam>
            <typeparam name="TOptionSelectorRuleDataModel">The type of the option selector rule data model</typeparam>
        </member>
        <member name="P:Atom.Core.OptionSelectorDataModel`2.Id">
            <summary>
            The id
            </summary>
        </member>
        <member name="P:Atom.Core.OptionSelectorDataModel`2.Name">
            <summary>
            The name of the selector
            </summary>
        </member>
        <member name="P:Atom.Core.OptionSelectorDataModel`2.Description">
            <summary>
            The description of the selector
            </summary>
        </member>
        <member name="P:Atom.Core.OptionSelectorDataModel`2.Color">
            <summary>
            The color of the selector
            </summary>
        </member>
        <member name="P:Atom.Core.OptionSelectorDataModel`2.ParentPath">
            <summary>
            The property parent path
            </summary>
        </member>
        <member name="P:Atom.Core.OptionSelectorDataModel`2.Priority">
            <summary>
            The priority
            </summary>
        </member>
        <member name="P:Atom.Core.OptionSelectorDataModel`2.Rules">
            <summary>
            The rules of this selector
            </summary>
        </member>
        <member name="M:Atom.Core.OptionSelectorDataModel`2.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Atom.Core.OptionSelectorDataModel`2.#ctor(System.String,System.String,System.String,System.String,System.Int32)">
            <summary>
            Standard constructor
            </summary>
            <param name="name">The name of the selector</param>
            <param name="description">The description of the selector</param>
            <param name="color">The color of the selector</param>
            <param name="parentPath">The property parent path</param>
            <param name="priority">The priority</param>
        </member>
        <member name="M:Atom.Core.OptionSelectorDataModel`2.ToOptionSelector(System.Object)">
            <summary>
            Creates a <see cref="T:Atom.Core.OptionSelector"/> from the current <see cref="T:Atom.Core.OptionSelectorDataModel`2"/>
            </summary>
            <param name="instance">The instance of the object that contains the information that will be used by the selector and its <see cref="P:Atom.Core.OptionSelector.Rules"/></param>
            <returns></returns>
        </member>
        <member name="T:Atom.Core.OptionSelectorRuleDataModel`2">
            <summary>
            Represents an option selector rule
            </summary>
            <typeparam name="TOptionSelectorDataModel">The type of the option selector data model</typeparam>
            <typeparam name="TOptionSelectorRuleDataModel">The type of the option selector rule data model</typeparam>
        </member>
        <member name="P:Atom.Core.OptionSelectorRuleDataModel`2.Id">
            <summary>
            The id
            </summary>
        </member>
        <member name="P:Atom.Core.OptionSelectorRuleDataModel`2.OptionSelectorId">
            <summary>
            The id of the option selector
            </summary>
        </member>
        <member name="P:Atom.Core.OptionSelectorRuleDataModel`2.PropertyName">
            <summary>
            The property name
            </summary>
        </member>
        <member name="P:Atom.Core.OptionSelectorRuleDataModel`2.Value">
            <summary>
            The value
            </summary>
        </member>
        <member name="P:Atom.Core.OptionSelectorRuleDataModel`2.Selector">
            <summary>
            The option selector retrieved using the <see cref="P:Atom.Core.OptionSelectorRuleDataModel`2.OptionSelectorId"/>
            </summary>
        </member>
        <member name="M:Atom.Core.OptionSelectorRuleDataModel`2.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Atom.Core.OptionSelectorRuleDataModel`2.#ctor(System.String)">
            <summary>
            Minimal constructor
            </summary>
            <param name="optionSelectorId">The id of the option selector</param>
        </member>
        <member name="M:Atom.Core.OptionSelectorRuleDataModel`2.#ctor(System.String,System.String,System.String)">
            <summary>
            Standard constructor
            </summary>
            <param name="optionSelectorId">The id of the option selector</param>
            <param name="propertyName">The property name</param>
            <param name="value">The value</param>
        </member>
        <member name="M:Atom.Core.OptionSelectorRuleDataModel`2.ToOptionSelectorRule(System.Object,System.String)">
            <summary>
            Creates and returns a <see cref="T:Atom.Core.OptionSelectorRule"/> from the current <see cref="T:Atom.Core.OptionSelectorDataModel`2"/>
            </summary>
            <param name="instance">The instance of the object that contains the information that will be used by the selector and its <see cref="P:Atom.Core.OptionSelector.Rules"/></param>
            <param name="propertyPath">The property path that navigates to a property or a sub property of the <paramref name="instance"/> with the specified <see cref="P:Atom.Core.OptionSelectorRuleDataModel`2.PropertyName"/></param>
            <returns></returns>
        </member>
        <member name="T:Atom.Core.PreviewOptionsDataModel">
            <summary>
            Preview options used by the data presenters
            </summary>
        </member>
        <member name="P:Atom.Core.PreviewOptionsDataModel.Properties">
            <summary>
            The properties
            </summary>
        </member>
        <member name="P:Atom.Core.PreviewOptionsDataModel.Formulas">
            <summary>
            The formulas
            </summary>
        </member>
        <member name="M:Atom.Core.PreviewOptionsDataModel.#ctor(System.Collections.Generic.IEnumerable{System.Reflection.PropertyInfo},System.Collections.Generic.IEnumerable{Atom.Core.Formula})">
            <summary>
            Default constructor
            </summary>
            <param name="properties">The properties</param>
            <param name="formulas">The formulas</param>
        </member>
        <member name="T:Atom.Core.PricingOptionDataModel">
            <summary>
            Represents a pricing option
            </summary>
        </member>
        <member name="P:Atom.Core.PricingOptionDataModel.Name">
            <summary>
            The name
            </summary>
        </member>
        <member name="P:Atom.Core.PricingOptionDataModel.Description">
            <summary>
            The description
            </summary>
        </member>
        <member name="P:Atom.Core.PricingOptionDataModel.PricingOption">
            <summary>
            The pricing option
            </summary>
        </member>
        <member name="P:Atom.Core.PricingOptionDataModel.Amount">
            <summary>
            The amount
            </summary>
        </member>
        <member name="M:Atom.Core.PricingOptionDataModel.ToString">
            <summary>
            Returns a string that represents the current object
            </summary>
            <returns></returns>
        </member>
        <member name="M:Atom.Core.PricingOptionDataModel.UpdateValues(Atom.Core.PricingOptionData)">
            <summary>
            Updates the values of the current <see cref="T:Atom.Core.PricingOptionDataModel"/>
            based on the values of the specified <paramref name="data"/>
            </summary>
            <param name="data">The data</param>
        </member>
        <member name="M:Atom.Core.PricingOptionDataModel.Equals(Atom.Core.PricingOptionDataModel)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <param name="other">An object to compare with this object.</param>
            <returns></returns>
        </member>
        <member name="M:Atom.Core.PricingOptionDataModel.CompareTo(System.Object)">
            <summary>
            Compares the current object to the specified <paramref name="obj"/>
            </summary>
            <param name="obj">The object to be compared to</param>
            <returns></returns>
        </member>
        <member name="M:Atom.Core.PricingOptionDataModel.CompareTo(Atom.Core.PricingOptionDataModel)">
            <summary>
            Compares the current object to the specified <paramref name="other"/>
            </summary>
            <param name="other">The object to be compared to</param>
            <returns></returns>
        </member>
        <member name="T:Atom.Core.PricingOptionData">
            <summary>
            Represents an immutable <see cref="T:Atom.Core.PricingOptionDataModel"/>
            </summary>
        </member>
        <member name="P:Atom.Core.PricingOptionData.Name">
            <summary>
            The name
            </summary>
        </member>
        <member name="P:Atom.Core.PricingOptionData.Description">
            <summary>
            The description
            </summary>
        </member>
        <member name="P:Atom.Core.PricingOptionData.PricingOption">
            <summary>
            The pricing option
            </summary>
        </member>
        <member name="P:Atom.Core.PricingOptionData.Amount">
            <summary>
            The amount
            </summary>
        </member>
        <member name="M:Atom.Core.PricingOptionData.ToDataModel">
            <summary>
            Creates and returns a <see cref="T:Atom.Core.PricingOptionDataModel"/> from the current <see cref="T:Atom.Core.PricingOptionData"/>
            </summary>
            <returns></returns>
        </member>
        <member name="M:Atom.Core.PricingOptionData.FromDataModel(Atom.Core.PricingOptionDataModel)">
            <summary>
            Creates and returns a <see cref="T:Atom.Core.PricingOptionData"/> from the specified <paramref name="model"/>
            </summary>
            <param name="model">The model</param>
            <returns></returns>
        </member>
        <member name="T:Atom.Core.CustomShortcodeOption">
            <summary>
            Maps the a property to the information required for creating a shortcode
            </summary>
        </member>
        <member name="P:Atom.Core.CustomShortcodeOption.Instance">
            <summary>
            The instance of an object that contains the <see cref="P:Atom.Core.BasePropertyMap.Property"/>
            </summary>
        </member>
        <member name="P:Atom.Core.CustomShortcodeOption.Name">
            <summary>
            The name
            </summary>
        </member>
        <member name="P:Atom.Core.CustomShortcodeOption.Category">
            <summary>
            The category
            </summary>
        </member>
        <member name="M:Atom.Core.CustomShortcodeOption.#ctor(System.Reflection.PropertyInfo,System.Object,System.String,System.String)">
            <summary>
            Default constructor
            </summary>
            <param name="propertyInfo">The property info</param>
            <param name="instance">The instance of an object that contains the <see cref="P:Atom.Core.BasePropertyMap.Property"/></param>
            <param name="name">The name</param>
            <param name="category">The category</param>
        </member>
        <member name="T:Atom.Core.EntryPointDataModel`1">
            <summary>
            Represents an entry point
            </summary>
            <typeparam name="TEntryPointPropertyShortcodeDataModel">The type of the entry point property shortcode data models</typeparam>
        </member>
        <member name="P:Atom.Core.EntryPointDataModel`1.Id">
            <summary>
            The id of the receipt point
            </summary>
        </member>
        <member name="P:Atom.Core.EntryPointDataModel`1.Name">
            <summary>
            The name of the receipt point
            </summary>
        </member>
        <member name="P:Atom.Core.EntryPointDataModel`1.Description">
            <summary>
            The description of the receipt point
            </summary>
        </member>
        <member name="P:Atom.Core.EntryPointDataModel`1.Color">
            <summary>
            The color of the receipt point
            </summary>
        </member>
        <member name="P:Atom.Core.EntryPointDataModel`1.IsActive">
            <summary>
            A flag indicating whether the receipt point is active or not
            </summary>
        </member>
        <member name="P:Atom.Core.EntryPointDataModel`1.CustomShortcodes">
            <summary>
            The custom shortcodes of this point
            </summary>
        </member>
        <member name="M:Atom.Core.EntryPointDataModel`1.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Atom.Core.EntryPointDataModel`1.#ctor(System.String,System.String,System.Boolean)">
            <summary>
            Standard constructor
            </summary>
            <param name="name">The name of the receipt point</param>
            <param name="description">The description of the receipt point</param>
            <param name="isActive">A flag indicating whether the receipt point is active or not</param>
        </member>
        <member name="T:Atom.Core.IPropertyShortcodeConvertible">
            <summary>
            Provides abstractions for a model that can be converted to a <see cref="T:Atom.Core.PropertyShortcode"/>
            </summary>
        </member>
        <member name="M:Atom.Core.IPropertyShortcodeConvertible.ToPropertyShortcode(System.Object)">
            <summary>
            Creates and returns a new <see cref="T:Atom.Core.PropertyShortcode"/> from the current model
            </summary>
            <param name="instance">The instance</param>
            <returns></returns>
        </member>
        <member name="M:Atom.Core.IPropertyShortcodeConvertible.ToPropertyShortcode(System.Type)">
            <summary>
            Creates and returns a new <see cref="T:Atom.Core.PropertyShortcode"/> from the current model
            </summary>
            <param name="instanceType">The type of the instance that contains the shortcode information</param>
            <returns></returns>
        </member>
        <member name="M:Atom.Core.IPropertyShortcodeConvertible.ToMinimalPropertyShortcode(System.Reflection.PropertyInfo)">
            <summary>
            Creates and returns a new <see cref="T:Atom.Core.PropertyShortcode"/> from the current model
            </summary>
            <param name="propertyInfo">The property info</param>
            <returns></returns>
        </member>
        <member name="T:Atom.Core.PropertyShortcode">
            <summary>
            A <see cref="T:Atom.Core.Shortcode"/> the presents the value of a property
            </summary>
        </member>
        <member name="F:Atom.Core.PropertyShortcode.PropertyShortcodeName">
            <summary>
            The name of the shortcode that gets the value of the property
            </summary>
        </member>
        <member name="F:Atom.Core.PropertyShortcode.PropertyShortcodeColor">
            <summary>
            The color of the shortcode that gets the value of the property
            </summary>
        </member>
        <member name="F:Atom.Core.PropertyShortcode.RegexFormatNamedGroup">
            <summary>
            The name of the regex group
            </summary>
        </member>
        <member name="M:Atom.Core.PropertyShortcode.FormatShortcodeName(System.String)">
            <summary>
            The name of the shortcode that gets the value of a <see cref="T:System.IFormattable"/> property using a specified <paramref name="format"/>
            </summary>
            <param name="format">The format</param>
            <returns></returns>
        </member>
        <member name="P:Atom.Core.PropertyShortcode.FormatShortcodeColor">
            <summary>
            The color of the shortcode that gets the value of a <see cref="T:System.IFormattable"/> property
            </summary>
        </member>
        <member name="P:Atom.Core.PropertyShortcode.FormatRegexPattern">
            <summary>
            The format regex pattern used for identifying the format shortcode values
            </summary>
        </member>
        <member name="P:Atom.Core.PropertyShortcode.PropertyShortcodeValue">
            <summary>
            Shortcode that retrieves the string representation of the value of the property
            </summary>
        </member>
        <member name="M:Atom.Core.PropertyShortcode.FormatShortcodeValue(System.String)">
            <summary>
            Shortcode that retrieves the string representation of the value of the <see cref="T:System.IFormattable"/> property while using a custom format
            </summary>
            <param name="format">The format</param>
            <returns></returns>
        </member>
        <member name="F:Atom.Core.PropertyShortcode.PropertyShortcodeProperties">
            <summary>
            The properties of the <see cref="T:Atom.Core.PropertyShortcode"/>
            </summary>
        </member>
        <member name="F:Atom.Core.PropertyShortcode.mInstance">
            <summary>
            The member of the <see cref="P:Atom.Core.PropertyShortcode.Instance"/> property
            </summary>
        </member>
        <member name="F:Atom.Core.PropertyShortcode.mCustomShortcodes">
            <summary>
            The member of the <see cref="P:Atom.Core.PropertyShortcode.CustomShortcodes"/> property
            </summary>
        </member>
        <member name="F:Atom.Core.PropertyShortcode.mTranslators">
            <summary>
            The member of the <see cref="P:Atom.Core.PropertyShortcode.Translators"/> property
            </summary>
        </member>
        <member name="F:Atom.Core.PropertyShortcode.mFilters">
            <summary>
            The member of the <see cref="P:Atom.Core.PropertyShortcode.Filters"/> property
            </summary>
        </member>
        <member name="P:Atom.Core.PropertyShortcode.Id">
            <summary>
            The id of the shortcode
            </summary>
        </member>
        <member name="P:Atom.Core.PropertyShortcode.Instance">
            <summary>
            The instance that directly or indirectly contains the <see cref="P:Atom.Core.PropertyShortcode.Property"/>.
            NOTE: If the <see cref="P:Atom.Core.PropertyShortcode.Property"/> isn't directly contained by the <see cref="P:Atom.Core.PropertyShortcode.Instance"/>
                  then its values is retrieved by using the <see cref="P:Atom.Core.Shortcode.Parent"/> to navigate
                  the property tree of the <see cref="P:Atom.Core.PropertyShortcode.Instance"/> till the <see cref="P:Atom.Core.PropertyShortcode.Property"/>!
            </summary>
        </member>
        <member name="P:Atom.Core.PropertyShortcode.IsEnumerable">
            <summary>
            A flag indicating whether the target property is an <see cref="T:System.Collections.Generic.IEnumerable`1"/>
            </summary>
        </member>
        <member name="P:Atom.Core.PropertyShortcode.Property">
            <summary>
            The related property
            </summary>
        </member>
        <member name="P:Atom.Core.PropertyShortcode.NonEnumerablePropertyType">
            <summary>
            The non-enumerable type of the <see cref="P:Atom.Core.PropertyShortcode.Property"/>
            </summary>
        </member>
        <member name="P:Atom.Core.PropertyShortcode.NewLineAfterEveryItem">
            <summary>
            If this is set to true a new line character is set after every item.
            NOTE: This applies only to enumerables!
            </summary>
        </member>
        <member name="P:Atom.Core.PropertyShortcode.Separator">
            <summary>
            Separator that is placed in between values.
            NOTE: This applies only to enumerables!
            </summary>
        </member>
        <member name="P:Atom.Core.PropertyShortcode.Formula">
            <summary>
            A string value that represents the shortcode formula
            </summary>
        </member>
        <member name="P:Atom.Core.PropertyShortcode.FallbackValue">
            <summary>
            The value that is used when the formula returns a null or empty string
            </summary>
        </member>
        <member name="P:Atom.Core.PropertyShortcode.ActualValue">
            <summary>
            The actual value
            </summary>
        </member>
        <member name="P:Atom.Core.PropertyShortcode.CustomShortcodes">
            <summary>
            Custom shortcodes used by the <see cref="P:Atom.Core.PropertyShortcode.Formula"/>.
            NOTE: The shortcodes are filtered every time they are getting set!
            </summary>
        </member>
        <member name="P:Atom.Core.PropertyShortcode.Translators">
            <summary>
            The translators used for altering the result of the formulas
            </summary>
        </member>
        <member name="P:Atom.Core.PropertyShortcode.Filters">
            <summary>
            The translators used for filtering the data in the case of an enumerable shortcode
            </summary>
        </member>
        <member name="P:Atom.Core.PropertyShortcode.FilterCondition">
            <summary>
            The filter condition used when the are filters
            </summary>
        </member>
        <member name="P:Atom.Core.PropertyShortcode.PerformNumericOperations">
            <summary>
            A flag indicating whether the numeric operations should get performed
            even if the <see cref="P:Atom.Core.PropertyShortcode.GroupBySource"/> is not set.
            NOTE: If this is set to <see cref="!:true"/> then the <see cref="P:Atom.Core.PropertyShortcode.GroupBySource"/> is ignored!
            </summary>
        </member>
        <member name="P:Atom.Core.PropertyShortcode.GroupBySource">
            <summary>
            Either the name of a property or the name of a custom shortcode.
            The value of the property or the <see cref="P:Atom.Core.PropertyShortcode.ActualValue"/>
            will be used as an anchor for a grouping operation. During a grouping operation
            numeric operations, defined by the <see cref="P:Atom.Core.PropertyShortcode.GroupByCondition"/> are performed 
            to the properties of the model that we are grouping.
            </summary>
        </member>
        <member name="P:Atom.Core.PropertyShortcode.GroupByCondition">
            <summary>
            Specifies the condition which will be used to re-calculate the numeric values
            when performing the group by operation
            </summary>
        </member>
        <member name="P:Atom.Core.PropertyShortcode.OrderBySource">
            <summary>
            Either the name of a property or the name of a custom shortcode.
            The value of the property of the <see cref="P:Atom.Core.PropertyShortcode.ActualValue"/>
            will be used as an anchor for its related model when performing an order
            operation.
            NOTE: For a property to be selected, the property type must implement the <see cref="T:System.IComparable"/>
            interface. If that's not the case then the property value is treated as a string!
            </summary>
        </member>
        <member name="P:Atom.Core.PropertyShortcode.OrderByCondition">
            <summary>
            The order by condition
            </summary>
        </member>
        <member name="P:Atom.Core.PropertyShortcode.Skip">
            <summary>
            The number of values that should get skipped
            </summary>
        </member>
        <member name="P:Atom.Core.PropertyShortcode.Take">
            <summary>
            The number of values that should get taken
            </summary>
        </member>
        <member name="M:Atom.Core.PropertyShortcode.#ctor(System.String,System.String,System.String,System.Object,System.Reflection.PropertyInfo,System.String,System.Boolean,System.String,System.Boolean,System.String,Atom.Core.PropertyShortcodeGroupByCondition,System.String,System.String,System.Collections.Generic.IEnumerable{Atom.Core.PropertyShortcodeValueTranslator},System.Collections.Generic.IEnumerable{Atom.Core.PropertyShortcodeFilter},Atom.Core.FilterCondition,System.String,Atom.Core.OrderCondition,System.UInt32,System.Nullable{System.UInt32})">
            <summary>
            Default constructor
            </summary>
            <param name="instance">
            The instance that directly or indirectly contains the <see cref="P:Atom.Core.PropertyShortcode.Property"/>.
            NOTE: If the <see cref="P:Atom.Core.PropertyShortcode.Property"/> isn't directly contained by the <see cref="P:Atom.Core.PropertyShortcode.Instance"/>
                  then its values is retrieved by using the <see cref="P:Atom.Core.Shortcode.Parent"/> to navigate
                  the property tree of the <see cref="P:Atom.Core.PropertyShortcode.Instance"/> till the <see cref="P:Atom.Core.PropertyShortcode.Property"/>!
            </param>
            <param name="propertyInfo">The property info</param>
            <param name="category">The shortcode category</param>
            <param name="name">The name of the shortcode</param>
            <param name="color">The color that represents the shortcode</param>
            <param name="fallbackValue">The value that is used when the formula returns a null or empty string</param>
            <param name="formula">The value that is used when the formula returns a null or empty string</param>
            <param name="newLineAfterEveryItem">
            If this is set to true a new line character is set after every item.
            NOTE: This applies only to enumerables!
            </param>
            <param name="separator">
            Separator that is placed in between values.
            NOTE: This applies only to enumerables!
            </param>
            <param name="performNumericOperations">
            A flag indicating whether the numeric operations should get performed
            even if the <see cref="P:Atom.Core.PropertyShortcode.GroupBySource"/> is not set.
            NOTE: If this is set to <see cref="!:true"/> then the <see cref="P:Atom.Core.PropertyShortcode.GroupBySource"/> is ignored!
            </param>
            <param name="groupBySource">
            Either the name of a property or the name of a custom shortcode.
            The value of the property or the <see cref="P:Atom.Core.PropertyShortcode.ActualValue"/>
            will be used as an anchor for a grouping operation. During a grouping operation
            numeric operations, defined by the <see cref="P:Atom.Core.PropertyShortcode.GroupByCondition"/> are performed 
            to the properties of the model that we are grouping.
            </param>
            <param name="groupByCondition">
            Specifies the condition which will be used to re-calculate the numeric values
            when performing the group by operation
            </param>
            <param name="propertyPath">
            The property path that navigates to the property that contains the specified <paramref name="propertyInfo"/>.
            NOTE: This is used for shortcodes of a property of a sub-property and so on, of the <see cref="P:Atom.Core.PropertyShortcode.Instance"/>!
            NOTE: This is set to <see cref="!:null"/> when the <see cref="P:Atom.Core.PropertyShortcode.Property"/> is of the <see cref="P:Atom.Core.PropertyShortcode.Instance"/>!
            Ex: FirstLevelProperty.SecondLevelProperty
            </param>
            <param name="translators">The translators used for altering the result of the formulas</param>
            <param name="filters">The translators used for filtering the data in the case of an enumerable shortcode</param>
            <param name="filterCondition">The filter condition used when the are filters</param>
            <param name="orderBySource">
            Either the name of a property or the name of a custom shortcode.
            The value of the property of the <see cref="P:Atom.Core.PropertyShortcode.ActualValue"/>
            will be used as an anchor for its related model when performing an order
            operation.
            NOTE: For a property to be selected, the property type must implement the <see cref="T:System.IComparable"/>
            interface. If that's not the case then the property value is treated as a string!
            </param>
            <param name="orderByCondition">The order by condition</param>
            <param name="skip">The number of values that should get skipped</param>
            <param name="take">The number of values that should get taken</param>
        </member>
        <member name="M:Atom.Core.PropertyShortcode.#ctor(System.String,System.String,System.String,System.String,System.Object,System.Reflection.PropertyInfo,System.String,System.Boolean,System.String,System.Boolean,System.String,Atom.Core.PropertyShortcodeGroupByCondition,System.String,System.String,System.Collections.Generic.IEnumerable{Atom.Core.PropertyShortcodeValueTranslator},System.Collections.Generic.IEnumerable{Atom.Core.PropertyShortcodeFilter},Atom.Core.FilterCondition,System.String,Atom.Core.OrderCondition,System.UInt32,System.Nullable{System.UInt32})">
            <summary>
            Standard constructor
            </summary>
            <param name="id">The id of the shortcode</param>
            <param name="propertyInfo">The related property</param>
            <param name="category">The shortcode category</param>
            <param name="name">The name of the shortcode</param>
            <param name="color">The color that represents the shortcode</param>
            <param name="fallbackValue">The value that is used when the formula returns a null or empty string</param>
            <param name="formula">The value that is used when the formula returns a null or empty string</param>
            <param name="newLineAfterEveryItem">
            If this is set to true a new line character is set after every item.
            NOTE: This applies only to enumerables!
            </param>
            <param name="separator">
            Separator that is placed in between values.
            NOTE: This applies only to enumerables!
            </param>
            <param name="performNumericOperations">
            A flag indicating whether the numeric operations should get performed
            even if the <see cref="P:Atom.Core.PropertyShortcode.GroupBySource"/> is not set.
            NOTE: If this is set to <see cref="!:true"/> then the <see cref="P:Atom.Core.PropertyShortcode.GroupBySource"/> is ignored!
            </param>
            <param name="groupBySource">
            Either the name of a property or the name of a custom shortcode.
            The value of the property or the <see cref="P:Atom.Core.PropertyShortcode.ActualValue"/>
            will be used as an anchor for a grouping operation. During a grouping operation
            numeric operations, defined by the <see cref="P:Atom.Core.PropertyShortcode.GroupByCondition"/> are performed 
            to the properties of the model that we are grouping.
            </param>
            <param name="groupByCondition">
            Specifies the condition which will be used to re-calculate the numeric values
            when performing the group by operation
            </param>
            <param name="instance">The instance that contains the <see cref="P:Atom.Core.PropertyShortcode.Property"/></param>
            <param name="propertyPath">
            The property path that navigates to the property that contains the specified <paramref name="propertyInfo"/>.
            NOTE: This is used for shortcodes of a property of a sub-property and so on, of the <see cref="P:Atom.Core.PropertyShortcode.Instance"/>!
            NOTE: This is set to <see cref="!:null"/> when the <see cref="P:Atom.Core.PropertyShortcode.Property"/> is of the <see cref="P:Atom.Core.PropertyShortcode.Instance"/>!
            Ex: FirstLevelProperty.SecondLevelProperty
            </param>
            <param name="translators">The translators used for altering the result of the formulas</param>
            <param name="filters">The translators used for filtering the data in the case of an enumerable shortcode</param>
            <param name="filterCondition">The filter condition used when the are filters</param>
            <param name="orderBySource">
            Either the name of a property or the name of a custom shortcode.
            The value of the property of the <see cref="P:Atom.Core.PropertyShortcode.ActualValue"/>
            will be used as an anchor for its related model when performing an order
            operation.
            NOTE: For a property to be selected, the property type must implement the <see cref="T:System.IComparable"/>
            interface. If that's not the case then the property value is treated as a string!
            </param>
            <param name="orderByCondition">The order by condition</param>
            <param name="skip">The number of values that should get skipped</param>
            <param name="take">The number of values that should get taken</param>
        </member>
        <member name="M:Atom.Core.PropertyShortcode.#ctor(System.String,System.String,System.String,System.Object,System.Reflection.PropertyInfo,System.String,System.Collections.Generic.IEnumerable{Atom.Core.PropertyShortcodeValueTranslator},System.Collections.Generic.IEnumerable{Atom.Core.PropertyShortcodeFilter})">
            <summary>
            Simple constructor
            </summary>
            <param name="propertyInfo">The related property</param>
            <param name="category">The shortcode category</param>
            <param name="name">The name of the shortcode</param>
            <param name="color">The color that represents the shortcode</param>
            <param name="instance">The instance that contains the <see cref="P:Atom.Core.PropertyShortcode.Property"/></param>
            <param name="propertyPath">
            The property path that navigates to the property that contains the specified <paramref name="propertyInfo"/>..
            NOTE: This is used for shortcodes of a property of a sub-property and so on, of the <see cref="P:Atom.Core.PropertyShortcode.Instance"/>!
            NOTE: This is set to <see cref="!:null"/> when the <see cref="P:Atom.Core.PropertyShortcode.Property"/> is of the <see cref="P:Atom.Core.PropertyShortcode.Instance"/>!
            Ex: FirstLevelProperty.SecondLevelProperty
            </param>
            <param name="translators">The translators used for altering the result of the formulas</param>
            <param name="filters">The translators used for filtering the data in the case of an enumerable shortcode</param>
        </member>
        <member name="M:Atom.Core.PropertyShortcode.GetNonEnumerableType(System.Type,System.String)">
            <summary>
            Uses the specified <paramref name="propertyPath"/> to navigate through the properties of the specified <paramref name="type"/>
            to reach its non enumerable destination
            </summary>
            <param name="type">The root type</param>
            <param name="propertyPath">The property path</param>
            <returns></returns>
        </member>
        <member name="M:Atom.Core.PropertyShortcode.FirstOrDefaultValue(System.Object,System.Reflection.PropertyInfo,System.String)">
            <summary>
            Gets the value of the sub-<paramref name="propertyInfo"/> of the specified <paramref name="instance"/>
            </summary>
            <param name="instance">The instance that's directly or indirectly the parent of the <paramref name="propertyInfo"/></param>
            <param name="propertyInfo">The property info whose value to get</param>
            <param name="propertyPath">The property path that navigates to the property whose non enumerable type contains the specified <paramref name="propertyInfo"/></param>
            <returns></returns>
        </member>
        <member name="M:Atom.Core.PropertyShortcode.GetProperty(System.Object,System.String,System.String)">
            <summary>
            Gets the type of the property with the specified <paramref name="propertyName"/> of the specified <paramref name="instance"/>
            while using the <paramref name="propertyPath"/> if any
            </summary>
            <param name="instance">The instance that directly or indirectly contains the property with name <paramref name="propertyName"/></param>
            <param name="propertyName">The name of the property</param>
            <param name="propertyPath">The property path that navigates to the property whose non enumerable type contains the property with the specified <paramref name="propertyName"/></param>
            <returns></returns>
        </member>
        <member name="M:Atom.Core.PropertyShortcode.GetProperty(System.Type,System.String,System.String)">
            <summary>
            Gets the property info with the specified <paramref name="propertyName"/> of the specified <paramref name="instanceType"/>
            while using the <paramref name="propertyPath"/> if any.
            NOTE: The property can either be contained directly in the <paramref name="instanceType"/> or in one of its sub properties!
            </summary>
            <param name="instanceType">The type of the instance</param>
            <param name="propertyName">The name of the property</param>
            <param name="propertyPath">The property path that navigates to the property whose non enumerable type contains the property with the specified <paramref name="propertyName"/></param>
            <returns></returns>
        </member>
        <member name="M:Atom.Core.PropertyShortcode.FilterValues(System.Collections.Generic.IEnumerable{Atom.Core.PropertyShortcodeFilter},Atom.Core.FilterCondition,System.Collections.Generic.IEnumerable{Atom.Core.PropertyShortcode},System.Type,System.Collections.IEnumerable)">
            <summary>
            Filters the specified <paramref name="values"/> of type <paramref name="valuesType"/> using the specified <paramref name="filters"/>
            </summary>
            <param name="filters">The filters</param>
            <param name="filterCondition">The filter condition</param>
            <param name="customShortcodes">The custom shortcodes</param>
            <param name="valuesType">The type of the values</param>
            <param name="values">The values</param>
            <returns></returns>
        </member>
        <member name="M:Atom.Core.PropertyShortcode.FilterValue(Atom.Core.PropertyShortcodeFilter,System.Collections.Generic.IEnumerable{Atom.Core.PropertyShortcode},System.Type,System.Object)">
            <summary>
            Filters the specified <paramref name="value"/> using the specified <paramref name="filter"/>
            </summary>
            <param name="filter">The filter</param>
            <param name="customShortcodes">The custom shortcodes</param>
            <param name="valuesType">The type of the values</param>
            <param name="value">The value</param>
            <returns></returns>
        </member>
        <member name="M:Atom.Core.PropertyShortcode.StringCompare(Atom.Core.StringEqualityOperator,System.String,System.String)">
            <summary>
            Performs a string comparison to the specified <paramref name="inputValue"/> and the specified <paramref name="filterValue"/>
            using the specified <paramref name="stringEqualityOperator"/>
            </summary>
            <param name="stringEqualityOperator">The operator</param>
            <param name="inputValue">The input value</param>
            <param name="filterValue">The filter value</param>
            <returns></returns>
        </member>
        <member name="M:Atom.Core.PropertyShortcode.GroupValues(System.String,Atom.Core.PropertyShortcodeGroupByCondition,System.Collections.Generic.IEnumerable{Atom.Core.PropertyShortcode},System.Type,System.Collections.IEnumerable)">
            <summary>
            Groups the <paramref name="values"/> of type <paramref name="valuesType"/> using the specific <paramref name="groupBySource"/>
            and the specified <paramref name="groupByCondition"/>
            </summary>
            <param name="groupBySource">The group by source</param>
            <param name="groupByCondition">The group by condition</param>
            <param name="customShortcodes">The custom shortcodes</param>
            <param name="valuesType">The type of the values</param>
            <param name="values">The values</param>
            <returns></returns>
        </member>
        <member name="M:Atom.Core.PropertyShortcode.PerformGrouping(Atom.Core.PropertyShortcodeGroupByCondition,System.Type,System.Collections.IEnumerable,System.Func{System.Object,System.Object,System.Boolean},System.Reflection.PropertyInfo)">
            <summary>
            Performs a group operation to the specified <paramref name="values"/> using the specified <paramref name="groupByCondition"/>
            </summary>
            <param name="groupByCondition">The group by condition</param>
            <param name="valuesType">The type of the values</param>
            <param name="values">The values</param>
            <param name="compare">
            Compares two <paramref name="values"/> to each other to determine whether they are equal
            in the context of the grouping. In the cases where the grouping is performed using properties
            then the property values are used. In the cases where custom shortcodes are used the actual
            values of the shortcodes are used.
            </param>
            <param name="groupByProperty">
            The group by property if any. The property is set only when the grouping is performed
            using a property and ensures that no numeric operation will be performed using the 
            values of the property of the models
            </param>
            <returns></returns>
        </member>
        <member name="M:Atom.Core.PropertyShortcode.CalculateNumericValuesWithOutGrouping(Atom.Core.PropertyShortcodeGroupByCondition,System.Type,System.Collections.IEnumerable)">
            <summary>
            Performs numeric operations without using a property for grouping
            </summary>
            <param name="groupByCondition">The group by condition</param>
            <param name="valuesType">The type of the values</param>
            <param name="values">The values</param>
            <returns></returns>
        </member>
        <member name="M:Atom.Core.PropertyShortcode.SkipValues(System.UInt32,System.Type,System.Collections.IEnumerable)">
            <summary>
            Skips the specified number of values
            </summary>
            <param name="skip">The number of values to skip</param>
            <param name="valuesType">The type of the values</param>
            <param name="values">The values</param>
            <returns></returns>
        </member>
        <member name="M:Atom.Core.PropertyShortcode.TakeValues(System.UInt32,System.Type,System.Collections.IEnumerable)">
            <summary>
            Takes the specified number of values
            </summary>
            <param name="take">The number of values to take</param>
            <param name="valuesType">The type of the values</param>
            <param name="values">The values</param>
            <returns></returns>
        </member>
        <member name="M:Atom.Core.PropertyShortcode.OrderValues(System.String,Atom.Core.OrderCondition,System.Collections.Generic.IEnumerable{Atom.Core.PropertyShortcode},System.Type,System.Collections.IEnumerable)">
            <summary>
            Orders the specified <paramref name="values"/>
            </summary>
            <param name="orderBySource">The order by source</param>
            <param name="orderByCondition">The order by condition</param>
            <param name="customShortcodes">The custom shortcodes</param>
            <param name="valuesType">The type of the values</param>
            <param name="values">The values</param>
            <returns></returns>
        </member>
        <member name="M:Atom.Core.PropertyShortcode.ReplaceFormulaValues(System.Object,Atom.Core.PropertyShortcode)">
            <summary>
            Uses the <paramref name="propertyValue"/> to update the values of the formula of the specified <paramref name="shortcode"/>
            </summary>
            <param name="propertyValue">The value of the property of the specified <paramref name="shortcode"/></param>
            <param name="shortcode">The shortcode</param>
            <returns></returns>
        </member>
        <member name="M:Atom.Core.PropertyShortcode.ReplaceFormulaValues(System.String,System.Object,System.Type,Atom.Core.PropertyShortcode)">
            <summary>
            Replace all the shortcode and keyword values contained in the specified <paramref name="formula"/>
            </summary>
            <param name="formula">The formula</param>
            <param name="propertyValue">The value of the property of the specified <paramref name="shortcode"/></param>
            <param name="nonEnumerableType">The non-enumerable type of the property of the <paramref name="shortcode"/></param>
            <param name="shortcode">the shortcode</param>
            <returns></returns>
        </member>
        <member name="M:Atom.Core.PropertyShortcode.ApplyValueConversions(System.String,System.Object,System.Type,Atom.Core.PropertyShortcode,Atom.Core.PropertyShortcodeValueTranslator)">
            <summary>
            Applies the value conversions provided by the <paramref name="translator"/>
            </summary>
            <param name="formula">The formula</param>
            <param name="propertyValue">The value of the property of the specified <paramref name="shortcode"/></param>
            <param name="nonEnumerableType">The non-enumerable type of the property of the <paramref name="shortcode"/></param>
            <param name="shortcode">the shortcode that contains the <paramref name="translator"/></param>
            <param name="translator">The translator</param>
            <returns></returns>
        </member>
        <member name="M:Atom.Core.PropertyShortcode.PerformWordReplacements(System.String,Atom.Core.WordReplacementMethod,System.String,System.String,System.String,System.String)">
            <summary>
            Performs a word replacement to the specified <paramref name="formula"/> based on the specified <paramref name="wordReplacementMethod"/>
            </summary>
            <param name="formula">The formula</param>
            <param name="wordReplacementMethod">The method</param>
            <param name="fromWord">The word to replace</param>
            <param name="toWord">The word to replace the <paramref name="fromWord"/> with</param>
            <param name="regex">The regex pattern</param>
            <param name="value">The value to replace</param>
            <returns></returns>
        </member>
        <member name="T:Atom.Core.PropertyShortcodeDataModel`3">
            <summary>
            Represents a <see cref="T:Atom.Core.PropertyShortcode"/>
            </summary>
            <typeparam name="TPropertyShortcodeDataModel">The type of the related property shortcode data model</typeparam>
            <typeparam name="TPropertyShortcodeValueTranslatorDataModel">The type of the property shortcode translator data model</typeparam>
            <typeparam name="TPropertyShortcodePropertyDataModel">The type of the shortcode property value filter data model</typeparam>
        </member>
        <member name="F:Atom.Core.PropertyShortcodeDataModel`3.mDataModelProperties">
            <summary>
            The properties of the type of the <typeparamref name="TPropertyShortcodeDataModel"/>
            </summary>
        </member>
        <member name="P:Atom.Core.PropertyShortcodeDataModel`3.Id">
            <summary>
            The id of the shortcode
            </summary>
        </member>
        <member name="P:Atom.Core.PropertyShortcodeDataModel`3.Name">
            <summary>
            The name of the shortcode
            </summary>
        </member>
        <member name="P:Atom.Core.PropertyShortcodeDataModel`3.Category">
            <summary>
            The shortcode category
            </summary>
        </member>
        <member name="P:Atom.Core.PropertyShortcodeDataModel`3.Color">
            <summary>
            The color that represents the shortcode
            </summary>
        </member>
        <member name="P:Atom.Core.PropertyShortcodeDataModel`3.Parent">
            <summary>
            The parent.
            </summary>
        </member>
        <member name="P:Atom.Core.PropertyShortcodeDataModel`3.PropertyName">
            <summary>
            The name of the related property
            </summary>
        </member>
        <member name="P:Atom.Core.PropertyShortcodeDataModel`3.Formula">
            <summary>
            A string value that represents the shortcode formula
            </summary>
        </member>
        <member name="P:Atom.Core.PropertyShortcodeDataModel`3.NewLineAfterEveryItem">
            <summary>
            If this is set to true a new line character is set after every item.
            NOTE: This applies only to enumerables!
            </summary>
        </member>
        <member name="P:Atom.Core.PropertyShortcodeDataModel`3.Separator">
            <summary>
            Separator that is placed in between values.
            NOTE: This applies only to enumerables!
            </summary>
        </member>
        <member name="P:Atom.Core.PropertyShortcodeDataModel`3.PerformNumericOperations">
            <summary>
            A flag indicating whether the numeric operations should get performed
            even if the <see cref="P:Atom.Core.PropertyShortcodeDataModel`3.GroupBySource"/> is not set.
            NOTE: If this is set to <see cref="!:true"/> then the <see cref="P:Atom.Core.PropertyShortcodeDataModel`3.GroupBySource"/> is ignored!
            </summary>
        </member>
        <member name="P:Atom.Core.PropertyShortcodeDataModel`3.GroupBySource">
            <summary>
            Either the name of a property or the name of a custom shortcode.
            The value of the property or the <see cref="P:Atom.Core.PropertyShortcode.ActualValue"/>
            will be used as an anchor for a grouping operation. During a grouping operation
            numeric operations, defined by the <see cref="P:Atom.Core.PropertyShortcodeDataModel`3.GroupByCondition"/> are performed 
            to the properties of the model that we are grouping.
            </summary>
        </member>
        <member name="P:Atom.Core.PropertyShortcodeDataModel`3.GroupByCondition">
            <summary>
            Specifies the condition which will be used to re-calculate the numeric values
            when performing the group by operation
            </summary>
        </member>
        <member name="P:Atom.Core.PropertyShortcodeDataModel`3.FallbackValue">
            <summary>
            The value that is used when the formula returns a null or empty string
            </summary>
        </member>
        <member name="P:Atom.Core.PropertyShortcodeDataModel`3.FilterCondition">
            <summary>
            The filter condition used when the are filters
            </summary>
        </member>
        <member name="P:Atom.Core.PropertyShortcodeDataModel`3.OrderBySource">
            <summary>
            Either the name of a property or the name of a custom shortcode.
            The value of the property of the <see cref="P:Atom.Core.PropertyShortcode.ActualValue"/>
            will be used as an anchor for its related model when performing an order
            operation.
            NOTE: For a property to be selected, the property type must implement the <see cref="T:System.IComparable"/>
            interface. If that's not the case then the property value is treated as a string!
            </summary>
        </member>
        <member name="P:Atom.Core.PropertyShortcodeDataModel`3.OrderByCondition">
            <summary>
            The order by condition
            </summary>
        </member>
        <member name="P:Atom.Core.PropertyShortcodeDataModel`3.Skip">
            <summary>
            The number of values that should get skipped
            </summary>
        </member>
        <member name="P:Atom.Core.PropertyShortcodeDataModel`3.Take">
            <summary>
            The number of values that should get taken
            </summary>
        </member>
        <member name="P:Atom.Core.PropertyShortcodeDataModel`3.Translators">
            <summary>
            The translators registered for this shortcode
            </summary>
        </member>
        <member name="P:Atom.Core.PropertyShortcodeDataModel`3.Filters">
            <summary>
            The filters registered for this shortcode
            </summary>
        </member>
        <member name="M:Atom.Core.PropertyShortcodeDataModel`3.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Atom.Core.PropertyShortcodeDataModel`3.FromPropertyShortcode(Atom.Core.PropertyShortcode)">
            <summary>
            Creates and returns a <typeparamref name="TPropertyShortcodeDataModel"/> from the specified <paramref name="propertyShortcode"/>
            </summary>
            <param name="propertyShortcode">The property shortcode</param>
            <returns></returns>
        </member>
        <member name="M:Atom.Core.PropertyShortcodeDataModel`3.ToPropertyShortcode(System.Object)">
            <summary>
            Creates and returns a new <see cref="T:Atom.Core.PropertyShortcode"/> from the current <see cref="T:Atom.Core.PropertyShortcodeDataModel`3"/>
            using the specified <paramref name="instance"/> that contains the property with the specified <see cref="P:Atom.Core.PropertyShortcodeDataModel`3.PropertyName"/>.
            NOTE: The <paramref name="instance"/> must be set!
            NOTE: If the <paramref name="instance"/> is not available consider using the <see cref="M:Atom.Core.PropertyShortcodeDataModel`3.ToPropertyShortcode(System.Type)"/> method using
                  the type of the instance!
            </summary>
            <param name="instance">The instance</param>
            <returns></returns>
        </member>
        <member name="M:Atom.Core.PropertyShortcodeDataModel`3.ToPropertyShortcode(System.Type)">
            <summary>
            Creates and returns a new <see cref="T:Atom.Core.PropertyShortcode"/> from the current <see cref="T:Atom.Core.PropertyShortcodeDataModel`3"/>
            using the specified <paramref name="instanceType"/> that contains the property with the specified <see cref="P:Atom.Core.PropertyShortcodeDataModel`3.PropertyName"/>
            </summary>
            <param name="instanceType">The type of the instance that contains the shortcode information</param>
            <returns></returns>
        </member>
        <member name="M:Atom.Core.PropertyShortcodeDataModel`3.ToMinimalPropertyShortcode(System.Reflection.PropertyInfo)">
            <summary>
            Creates and returns a new <see cref="T:Atom.Core.PropertyShortcode"/> from the current <see cref="T:Atom.Core.PropertyShortcodeDataModel`3"/>
            by setting the <see cref="P:Atom.Core.PropertyShortcode.Property"/> to the specified <paramref name="propertyInfo"/> and not setting
            the <see cref="P:Atom.Core.PropertyShortcode.Instance"/>
            </summary>
            <param name="propertyInfo">The property info</param>
            <returns></returns>
        </member>
        <member name="T:Atom.Core.PropertyShortcodeFilter">
            <summary>
            Filter for filtering the values of an enumerable property shortcode
            </summary>
        </member>
        <member name="P:Atom.Core.PropertyShortcodeFilter.Source">
            <summary>
            Either the name of a property or the name of a custom shortcode.
            The value of the property or the <see cref="P:Atom.Core.PropertyShortcode.ActualValue"/>
            will be compared with the <see cref="P:Atom.Core.PropertyShortcodeFilter.Value"/> to determine the validity of the
            model.
            </summary>
        </member>
        <member name="P:Atom.Core.PropertyShortcodeFilter.NumericEqualityOperator">
            <summary>
            The numeric equality operator.
            NOTE: This is only used when the <see cref="P:Atom.Core.PropertyShortcodeFilter.Source"/> represents a standard property shortcode of a numeric property!
            </summary>
        </member>
        <member name="P:Atom.Core.PropertyShortcodeFilter.StringEqualityOperator">
            <summary>
            The string equality operator.
            NOTE: This is only used when the <see cref="P:Atom.Core.PropertyShortcodeFilter.Source"/> doesn't represent a standard property shortcode of a numeric property!
            </summary>
        </member>
        <member name="P:Atom.Core.PropertyShortcodeFilter.Value">
            <summary>
            The value
            </summary>
        </member>
        <member name="M:Atom.Core.PropertyShortcodeFilter.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Atom.Core.PropertyShortcodeFilter.#ctor(System.String,Atom.Core.NumericEqualityOperator,Atom.Core.StringEqualityOperator,System.String)">
            <summary>
            Default constructor
            </summary>
            <param name="source">
            Either the name of a property or the name of a custom shortcode.
            The value of the property or the <see cref="P:Atom.Core.PropertyShortcode.ActualValue"/>
            will be compared with the <see cref="P:Atom.Core.PropertyShortcodeFilter.Value"/> to determine the validity of the
            model.
            </param>
            <param name="numericEqualityOperator">
            The numeric equality operator.
            NOTE: This is only used when the <see cref="P:Atom.Core.PropertyShortcodeFilter.Source"/> represents a standard property shortcode of a numeric property!
            </param>
            <param name="stringEqualityOperator">
            The string equality operator.
            NOTE: This is only used when the <see cref="P:Atom.Core.PropertyShortcodeFilter.Source"/> doesn't represent a standard property shortcode of a numeric property!
            </param>
            <param name="value">The value</param>
        </member>
        <member name="T:Atom.Core.PropertyShortcodeFilterDataModel`3">
            <summary>
            Data model for a <see cref="T:Atom.Core.PropertyShortcodeFilter"/>
            </summary>
            <typeparam name="TPropertyShortcodeDataModel">The type of the related property shortcode data model</typeparam>
            <typeparam name="TPropertyShortcodeValueTranslatorDataModel">The type of the property shortcode translator data model</typeparam>
            <typeparam name="TPropertyShortcodeFilterDataModel">The type of the shortcode property value filter data model</typeparam>
        </member>
        <member name="P:Atom.Core.PropertyShortcodeFilterDataModel`3.Id">
            <summary>
            The id of the filter
            </summary>
        </member>
        <member name="P:Atom.Core.PropertyShortcodeFilterDataModel`3.Source">
            <summary>
            Either the name of a property or the name of a custom shortcode.
            The value of the property or the <see cref="P:Atom.Core.PropertyShortcode.ActualValue"/>
            will be compared with the <see cref="P:Atom.Core.PropertyShortcodeFilterDataModel`3.Value"/> to determine the validity of the
            model.
            </summary>
        </member>
        <member name="P:Atom.Core.PropertyShortcodeFilterDataModel`3.NumericEqualityOperator">
            <summary>
            The numeric equality operator
            </summary>
        </member>
        <member name="P:Atom.Core.PropertyShortcodeFilterDataModel`3.StringEqualityOperator">
            <summary>
            The string equality operator
            </summary>
        </member>
        <member name="P:Atom.Core.PropertyShortcodeFilterDataModel`3.Value">
            <summary>
            The value
            </summary>
        </member>
        <member name="P:Atom.Core.PropertyShortcodeFilterDataModel`3.PropertyShortcodeId">
            <summary>
            The id of the property shortcode that the translator is made for
            </summary>
        </member>
        <member name="P:Atom.Core.PropertyShortcodeFilterDataModel`3.PropertyShortcode">
            <summary>
            The related shortcode data model
            </summary>
        </member>
        <member name="M:Atom.Core.PropertyShortcodeFilterDataModel`3.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Atom.Core.PropertyShortcodeFilterDataModel`3.FromPropertyShortcodeFilter(Atom.Core.PropertyShortcodeFilter)">
            <summary>
            Creates and returns a <typeparamref name="TPropertyShortcodeFilterDataModel"/> from the specified <paramref name="propertyShortcodeFilter"/>
            </summary>
            <param name="propertyShortcodeFilter">The property shortcode filter</param>
            <returns></returns>
        </member>
        <member name="M:Atom.Core.PropertyShortcodeFilterDataModel`3.ToPropertyShortcodeFilter">
            <summary>
            Creates and returns a <see cref="T:Atom.Core.PropertyShortcodeFilter"/> from the current <typeparamref name="TPropertyShortcodeFilterDataModel"/>
            </summary>
            <returns></returns>
        </member>
        <member name="M:Atom.Core.PropertyShortcodeFilterDataModel`3.ToString">
            <summary>
            Returns a string that represents the current object
            </summary>
            <returns></returns>
        </member>
        <member name="P:Atom.Core.PropertyShortcodeFilterMigrationModel.Source">
            <summary>
            Either the name of a property or the name of a custom shortcode.
            The value of the property or the <see cref="P:Atom.Core.PropertyShortcode.ActualValue"/>
            will be compared with the <see cref="P:Atom.Core.PropertyShortcodeFilterMigrationModel.Value"/> to determine the validity of the
            model.
            </summary>
        </member>
        <member name="P:Atom.Core.PropertyShortcodeFilterMigrationModel.NumericEqualityOperator">
            <summary>
            The numeric equality operator
            </summary>
        </member>
        <member name="P:Atom.Core.PropertyShortcodeFilterMigrationModel.StringEqualityOperator">
            <summary>
            The string equality operator
            </summary>
        </member>
        <member name="P:Atom.Core.PropertyShortcodeFilterMigrationModel.Value">
            <summary>
            The value
            </summary>
        </member>
        <member name="M:Atom.Core.PropertyShortcodeFilterMigrationModel.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Atom.Core.PropertyShortcodeFilterMigrationModel.ToString">
            <summary>
            Returns a string that represents the current model
            </summary>
            <returns></returns>
        </member>
        <member name="T:Atom.Core.PropertyShortcodeGroupByCondition">
            <summary>
            Provides enumeration over the group condition options
            </summary>
        </member>
        <member name="F:Atom.Core.PropertyShortcodeGroupByCondition.Sum">
            <summary>
            Sum all the numeric values
            </summary>
        </member>
        <member name="F:Atom.Core.PropertyShortcodeGroupByCondition.Average">
            <summary>
            Gets the average of all the numeric values
            </summary>
        </member>
        <member name="F:Atom.Core.PropertyShortcodeGroupByCondition.Greatest">
            <summary>
            Gets the greatest of all the numeric values
            </summary>
        </member>
        <member name="F:Atom.Core.PropertyShortcodeGroupByCondition.Least">
            <summary>
            Gets the smallest of all the numeric values
            </summary>
        </member>
        <member name="F:Atom.Core.PropertyShortcodeGroupByCondition.AbsoluteSum">
            <summary>
            Sums all the numeric values and then gets the absolute value
            </summary>
        </member>
        <member name="F:Atom.Core.PropertyShortcodeGroupByCondition.SumAbsolutes">
            <summary>
            Gets the absolute value of all the numeric values before performing the sum
            </summary>
        </member>
        <member name="T:Atom.Core.PropertyShortcodeValueTranslator">
            <summary>
            Represents a property shortcode value translator
            </summary>
        </member>
        <member name="F:Atom.Core.PropertyShortcodeValueTranslator.PropertyShortcodeValueTranslatorProperties">
            <summary>
            The properties of the <see cref="T:Atom.Core.PropertyShortcodeValueTranslator"/>
            </summary>
        </member>
        <member name="P:Atom.Core.PropertyShortcodeValueTranslator.ValueConversion">
            <summary>
            A flag indicating whether value conversion is enabled or not
            </summary>
        </member>
        <member name="P:Atom.Core.PropertyShortcodeValueTranslator.FromValue">
            <summary>
            The value to translate from
            </summary>
        </member>
        <member name="P:Atom.Core.PropertyShortcodeValueTranslator.Formula">
            <summary>
            The formula value that the <see cref="P:Atom.Core.PropertyShortcodeValueTranslator.FromValue"/> is translated to
            </summary>
        </member>
        <member name="P:Atom.Core.PropertyShortcodeValueTranslator.WordReplacement">
            <summary>
            A flag indicating whether word replacement is enabled or not
            </summary>
        </member>
        <member name="P:Atom.Core.PropertyShortcodeValueTranslator.WordReplacementOperation">
            <summary>
            The word replacement operation
            </summary>
        </member>
        <member name="P:Atom.Core.PropertyShortcodeValueTranslator.WordReplacementMethod">
            <summary>
            The word replacement method
            </summary>
        </member>
        <member name="P:Atom.Core.PropertyShortcodeValueTranslator.FromWord">
            <summary>
            The word to replace.
            Used when he <see cref="T:Atom.Core.WordReplacementMethod"/> is set to <see cref="F:Atom.Core.WordReplacementMethod.Standard"/>.
            </summary>
        </member>
        <member name="P:Atom.Core.PropertyShortcodeValueTranslator.ToWord">
            <summary>
            The word that the <see cref="P:Atom.Core.PropertyShortcodeValueTranslator.FromWord"/> should be replaced with.
            Used when he <see cref="T:Atom.Core.WordReplacementMethod"/> is set to <see cref="F:Atom.Core.WordReplacementMethod.Standard"/>.
            </summary>
        </member>
        <member name="P:Atom.Core.PropertyShortcodeValueTranslator.Regex">
            <summary>
            The regex.
            Used when he <see cref="T:Atom.Core.WordReplacementMethod"/> is set to <see cref="F:Atom.Core.WordReplacementMethod.Regex"/>.
            </summary>
        </member>
        <member name="P:Atom.Core.PropertyShortcodeValueTranslator.Value">
            <summary>
            The value used combined with the <see cref="P:Atom.Core.PropertyShortcodeValueTranslator.Regex"/> to perform the replacements.
            Used when he <see cref="T:Atom.Core.WordReplacementMethod"/> is set to <see cref="F:Atom.Core.WordReplacementMethod.Regex"/>.
            </summary>
        </member>
        <member name="P:Atom.Core.PropertyShortcodeValueTranslator.Priority">
            <summary>
            The priority index
            </summary>
        </member>
        <member name="M:Atom.Core.PropertyShortcodeValueTranslator.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Atom.Core.PropertyShortcodeValueTranslator.#ctor(System.Boolean,System.String,System.String,System.Boolean,Atom.Core.WordReplacementOperation,Atom.Core.WordReplacementMethod,System.String,System.String,System.String,System.String,System.Int32)">
            <summary>
            Default constructor
            </summary>
            <param name="valueConversion"></param>
            <param name="fromValue">The value to translate from</param>
            <param name="formula">The formula value that the <see cref="P:Atom.Core.PropertyShortcodeValueTranslator.FromValue"/> is translated to</param>
            <param name="wordReplacement">A flag indicating whether word replacement is enabled or not</param>
            <param name="wordReplacementOperation">The word replacement operation</param>
            <param name="wordReplacementMethod">The word replacement method</param>
            <param name="fromWord">The word to replace</param>
            <param name="toWord">The word that the <see cref="P:Atom.Core.PropertyShortcodeValueTranslator.FromWord"/> should be replaced with</param>
            <param name="regex"></param>
            <param name="value"></param>
            <param name="priority">The priority index</param>
        </member>
        <member name="T:Atom.Core.PropertyShortcodeValueTranslatorDataModel`3">
            <summary>
            Data model for a <see cref="T:Atom.Core.PropertyShortcodeValueTranslator"/>
            </summary>
            <typeparam name="TPropertyShortcodeDataModel">The type of the related property shortcode data model</typeparam>
            <typeparam name="TPropertyShortcodeValueTranslatorDataModel">The type of the property shortcode translator data model</typeparam>
            <typeparam name="TPropertyShortcodeFilterDataModel">The type of the shortcode property value filter data model</typeparam>
        </member>
        <member name="F:Atom.Core.PropertyShortcodeValueTranslatorDataModel`3.mDataModelProperties">
            <summary>
            The properties of the type of the <typeparamref name="TPropertyShortcodeValueTranslatorDataModel"/>
            </summary>
        </member>
        <member name="P:Atom.Core.PropertyShortcodeValueTranslatorDataModel`3.Id">
            <summary>
            The id of the translator
            </summary>
        </member>
        <member name="P:Atom.Core.PropertyShortcodeValueTranslatorDataModel`3.ValueConversion">
            <summary>
            A flag indicating whether value conversion is enabled or not
            </summary>
        </member>
        <member name="P:Atom.Core.PropertyShortcodeValueTranslatorDataModel`3.FromValue">
            <summary>
            The value to translate from
            </summary>
        </member>
        <member name="P:Atom.Core.PropertyShortcodeValueTranslatorDataModel`3.Formula">
            <summary>
            The formula value that the <see cref="P:Atom.Core.PropertyShortcodeValueTranslatorDataModel`3.FromValue"/> is translated to
            </summary>
        </member>
        <member name="P:Atom.Core.PropertyShortcodeValueTranslatorDataModel`3.WordReplacement">
            <summary>
            A flag indicating whether word replacement is enabled or not
            </summary>
        </member>
        <member name="P:Atom.Core.PropertyShortcodeValueTranslatorDataModel`3.WordReplacementOperation">
            <summary>
            The word replacement operation
            </summary>
        </member>
        <member name="P:Atom.Core.PropertyShortcodeValueTranslatorDataModel`3.WordReplacementMethod">
            <summary>
            The word replacement method
            </summary>
        </member>
        <member name="P:Atom.Core.PropertyShortcodeValueTranslatorDataModel`3.FromWord">
            <summary>
            The word to replace.
            Used when he <see cref="T:Atom.Core.WordReplacementMethod"/> is set to <see cref="F:Atom.Core.WordReplacementMethod.Standard"/>.
            </summary>
        </member>
        <member name="P:Atom.Core.PropertyShortcodeValueTranslatorDataModel`3.ToWord">
            <summary>
            The word that the <see cref="P:Atom.Core.PropertyShortcodeValueTranslator.FromWord"/> should be replaced with.
            Used when he <see cref="T:Atom.Core.WordReplacementMethod"/> is set to <see cref="F:Atom.Core.WordReplacementMethod.Standard"/>.
            </summary>
        </member>
        <member name="P:Atom.Core.PropertyShortcodeValueTranslatorDataModel`3.Regex">
            <summary>
            The regex.
            Used when he <see cref="T:Atom.Core.WordReplacementMethod"/> is set to <see cref="F:Atom.Core.WordReplacementMethod.Regex"/>.
            </summary>
        </member>
        <member name="P:Atom.Core.PropertyShortcodeValueTranslatorDataModel`3.Value">
            <summary>
            The value used combined with the <see cref="P:Atom.Core.PropertyShortcodeValueTranslatorDataModel`3.Regex"/> to perform the replacements.
            Used when he <see cref="T:Atom.Core.WordReplacementMethod"/> is set to <see cref="F:Atom.Core.WordReplacementMethod.Regex"/>.
            </summary>
        </member>
        <member name="P:Atom.Core.PropertyShortcodeValueTranslatorDataModel`3.Priority">
            <summary>
            The priority index
            </summary>
        </member>
        <member name="P:Atom.Core.PropertyShortcodeValueTranslatorDataModel`3.PropertyShortcodeId">
            <summary>
            The id of the property shortcode
            </summary>
        </member>
        <member name="P:Atom.Core.PropertyShortcodeValueTranslatorDataModel`3.PropertyShortcode">
            <summary>
            The related shortcode data model
            </summary>
        </member>
        <member name="M:Atom.Core.PropertyShortcodeValueTranslatorDataModel`3.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Atom.Core.PropertyShortcodeValueTranslatorDataModel`3.FromPropertyShortcodeValueTranslator(Atom.Core.PropertyShortcodeValueTranslator)">
            <summary>
            Creates and returns a <typeparamref name="TPropertyShortcodeValueTranslatorDataModel"/> using the specified <paramref name="propertyShortcodeValueTranslator"/>
            </summary>
            <param name="propertyShortcodeValueTranslator">The property shortcode value translator</param>
            <returns></returns>
        </member>
        <member name="M:Atom.Core.PropertyShortcodeValueTranslatorDataModel`3.ToPropertyShortcodeValueTranslator">
            <summary>
            Creates and returns a <see cref="T:Atom.Core.PropertyShortcodeValueTranslator"/> from the current <typeparamref name="TPropertyShortcodeValueTranslatorDataModel"/>
            </summary>
            <returns></returns>
        </member>
        <member name="T:Atom.Core.Shortcode">
            <summary>
            Represents a shortcode
            </summary>
        </member>
        <member name="P:Atom.Core.Shortcode.Name">
            <summary>
            The name of the shortcode
            </summary>
        </member>
        <member name="P:Atom.Core.Shortcode.Parent">
            <summary>
            The parent
            </summary>
        </member>
        <member name="P:Atom.Core.Shortcode.Category">
            <summary>
            The shortcode category
            </summary>
        </member>
        <member name="P:Atom.Core.Shortcode.Value">
            <summary>
            The actual shortcode value.
            Ex: {{value}}
            </summary>
        </member>
        <member name="P:Atom.Core.Shortcode.Color">
            <summary>
            The color that represents the shortcode
            </summary>
        </member>
        <member name="P:Atom.Core.Shortcode.ActualValue">
            <summary>
            The actual value
            </summary>
        </member>
        <member name="M:Atom.Core.Shortcode.#ctor(System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Default constructor
            </summary>
            <param name="name">The name of the shortcode</param>
            <param name="parent">The parent</param>
            <param name="category">The shortcode category</param>
            <param name="color">The color that represents the shortcode</param>
            <param name="actualValue">The actual value</param>
        </member>
        <member name="M:Atom.Core.Shortcode.#ctor(System.String,System.String,System.String,System.String)">
            <summary>
            Internal constructor
            </summary>
            <param name="name">The name of the shortcode</param>
            <param name="parent">The parent</param>
            <param name="category">The shortcode category</param>
            <param name="color">The color that represents the shortcode</param>
        </member>
        <member name="M:Atom.Core.Shortcode.ToString">
            <summary>
            Creates and returns a string that represents the current object
            </summary>
            <returns></returns>
        </member>
        <member name="M:Atom.Core.Shortcode.GenerateShortcodeValue(System.String)">
            <summary>
            Generates the shortcode value from the specified <paramref name="value"/>
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Atom.Core.Shortcode.ContainsShortcodes(System.String,System.Collections.Generic.IEnumerable{Atom.Core.Shortcode})">
            <summary>
            Checks whether the specified <paramref name="text"/> contains any of the specified <paramref name="shortcodes"/>
            </summary>
            <param name="text">The text</param>
            <param name="shortcodes">The shortcodes</param>
            <returns></returns>
        </member>
        <member name="M:Atom.Core.Shortcode.ReplaceShortcodes(System.String,System.Collections.Generic.IEnumerable{Atom.Core.Shortcode})">
            <summary>
            Replaces all the <paramref name="shortcodes"/> contained in the specified <paramref name="text"/>
            with the actual value of the <paramref name="shortcodes"/>
            </summary>
            <param name="text">The text</param>
            <param name="shortcodes">The shortcodes</param>
            <returns></returns>
        </member>
        <member name="T:Atom.Core.ShortcodeCreationEventArgs">
            <summary>
            Event args for creating a shortcode
            </summary>
        </member>
        <member name="P:Atom.Core.ShortcodeCreationEventArgs.Instance">
            <summary>
            The instance of the object that contains the specified <see cref="P:Atom.Core.ShortcodeCreationEventArgs.Property"/>
            </summary>
        </member>
        <member name="P:Atom.Core.ShortcodeCreationEventArgs.Property">
            <summary>
            The property of the <see cref="P:Atom.Core.ShortcodeCreationEventArgs.Instance"/> that this shortcode is created for
            </summary>
        </member>
        <member name="P:Atom.Core.ShortcodeCreationEventArgs.ParentPath">
            <summary>
            The parent path.
            NOTE: This is used for shortcodes of a property of a sub-property and so on, of the <see cref="P:Atom.Core.ShortcodeCreationEventArgs.Instance"/>!
            NOTE: This is set to <see cref="!:null"/> when the <see cref="P:Atom.Core.ShortcodeCreationEventArgs.Property"/> is of the <see cref="P:Atom.Core.ShortcodeCreationEventArgs.Instance"/>!
            Ex: FirstLevelProperty.SecondLevelProperty
            </summary>
        </member>
        <member name="P:Atom.Core.ShortcodeCreationEventArgs.ShortcodeName">
            <summary>
            The name of the shortcode
            </summary>
        </member>
        <member name="P:Atom.Core.ShortcodeCreationEventArgs.Color">
            <summary>
            The color of the shortcode
            </summary>
        </member>
        <member name="P:Atom.Core.ShortcodeCreationEventArgs.NewLineAfterEveryItem">
            <summary>
            If this is set to true a new line character is set after every item.
            NOTE: This applies only to enumerables!
            </summary>
        </member>
        <member name="P:Atom.Core.ShortcodeCreationEventArgs.Separator">
            <summary>
            Separator that is placed in between values.
            NOTE: This applies only to enumerables!
            </summary>
        </member>
        <member name="P:Atom.Core.ShortcodeCreationEventArgs.PerformNumericOperations">
            <summary>
            A flag indicating whether the numeric operations should get performed
            even if the <see cref="P:Atom.Core.ShortcodeCreationEventArgs.GroupBySource"/> is not set.
            NOTE: If this is set to <see cref="!:true"/> then the <see cref="P:Atom.Core.ShortcodeCreationEventArgs.GroupBySource"/> is ignored!
            </summary>
        </member>
        <member name="P:Atom.Core.ShortcodeCreationEventArgs.GroupBySource">
            <summary>
            Either the name of a property or the name of a custom shortcode.
            The value of the property or the <see cref="P:Atom.Core.PropertyShortcode.ActualValue"/>
            will be used as an anchor for a grouping operation. During a grouping operation
            numeric operations, defined by the <see cref="P:Atom.Core.ShortcodeCreationEventArgs.GroupByCondition"/> are performed 
            to the properties of the model that we are grouping.
            </summary>
        </member>
        <member name="P:Atom.Core.ShortcodeCreationEventArgs.GroupByCondition">
            <summary>
            Specifies the condition which will be used to re-calculate the numeric values
            when performing the group by operation
            </summary>
        </member>
        <member name="P:Atom.Core.ShortcodeCreationEventArgs.Formula">
            <summary>
            A string value that represents the shortcode formula
            </summary>
        </member>
        <member name="P:Atom.Core.ShortcodeCreationEventArgs.FallbackValue">
            <summary>
            The value that is used when the formula returns a null or empty string
            </summary>
        </member>
        <member name="P:Atom.Core.ShortcodeCreationEventArgs.Category">
            <summary>
            The shortcode category
            </summary>
        </member>
        <member name="P:Atom.Core.ShortcodeCreationEventArgs.Translators">
            <summary>
            The translators
            </summary>
        </member>
        <member name="P:Atom.Core.ShortcodeCreationEventArgs.Filters">
            <summary>
            The filters
            </summary>
        </member>
        <member name="P:Atom.Core.ShortcodeCreationEventArgs.FilterCondition">
            <summary>
            The filter condition used when the are filters
            </summary>
        </member>
        <member name="P:Atom.Core.ShortcodeCreationEventArgs.OrderBySource">
            <summary>
            Either the name of a property or the name of a custom shortcode.
            The value of the property of the <see cref="P:Atom.Core.PropertyShortcode.ActualValue"/>
            will be used as an anchor for its related model when performing an order
            operation.
            NOTE: For a property to be selected, the property type must implement the <see cref="T:System.IComparable"/>
            interface. If that's not the case then the property value is treated as a string!
            </summary>
        </member>
        <member name="P:Atom.Core.ShortcodeCreationEventArgs.OrderByCondition">
            <summary>
            The order by condition
            </summary>
        </member>
        <member name="P:Atom.Core.ShortcodeCreationEventArgs.Skip">
            <summary>
            The number of values that should get skipped
            </summary>
        </member>
        <member name="P:Atom.Core.ShortcodeCreationEventArgs.Take">
            <summary>
            The number of values that should get taken
            </summary>
        </member>
        <member name="M:Atom.Core.ShortcodeCreationEventArgs.#ctor(System.String,System.String,System.String,System.Object,System.Reflection.PropertyInfo,System.String,System.Boolean,System.String,System.Boolean,System.String,Atom.Core.PropertyShortcodeGroupByCondition,System.String,System.String,System.Collections.Generic.IEnumerable{Atom.Core.PropertyShortcodeValueTranslator},System.Collections.Generic.IEnumerable{Atom.Core.PropertyShortcodeFilter},Atom.Core.FilterCondition,System.String,Atom.Core.OrderCondition,System.UInt32,System.Nullable{System.UInt32})">
            <summary>
            Default constructor
            </summary>
            <param name="instance">The instance of the object that contains the specified <see cref="P:Atom.Core.ShortcodeCreationEventArgs.Property"/></param>
            <param name="propertyInfo">The property of the <see cref="P:Atom.Core.ShortcodeCreationEventArgs.Instance"/> that this shortcode is created for</param>
            <param name="shortcodeName">The name of the shortcode</param>
            <param name="color">The color of the shortcode</param>
            <param name="formula">A string value that represents the shortcode formula</param>
            <param name="newLineAfterEveryItem">
            If this is set to true a new line character is set after every item.
            NOTE: This applies only to enumerables!
            </param>
            <param name="separator">
            Separator that is placed in between values.
            NOTE: This applies only to enumerables!
            </param>
            <param name="performNumericOperations">
            A flag indicating whether the numeric operations should get performed
            even if the <see cref="P:Atom.Core.ShortcodeCreationEventArgs.GroupBySource"/> is not set.
            NOTE: If this is set to <see cref="!:true"/> then the <see cref="P:Atom.Core.ShortcodeCreationEventArgs.GroupBySource"/> is ignored!
            </param>
            <param name="groupBySource">
            Either the name of a property or the name of a custom shortcode.
            The value of the property or the <see cref="P:Atom.Core.PropertyShortcode.ActualValue"/>
            will be used as an anchor for a grouping operation. During a grouping operation
            numeric operations, defined by the <see cref="P:Atom.Core.ShortcodeCreationEventArgs.GroupByCondition"/> are performed 
            to the properties of the model that we are grouping.
            </param>
            <param name="groupByCondition">
            Specifies the condition which will be used to re-calculate the numeric values
            when performing the group by operation
            </param>
            <param name="fallbackValue">The value that is used when the formula returns a null or empty string</param>
            <param name="category">The shortcode category</param>
            <param name="parentPath">
            The parent path.
            NOTE: This is used for shortcodes of a property of a sub-property and so on, of the <see cref="P:Atom.Core.ShortcodeCreationEventArgs.Instance"/>!
            NOTE: This is set to <see cref="!:null"/> when the <see cref="P:Atom.Core.ShortcodeCreationEventArgs.Property"/> is of the <see cref="P:Atom.Core.ShortcodeCreationEventArgs.Instance"/>!
            Ex: FirstLevelProperty.SecondLevelProperty
            </param>
            <param name="translators">The translators</param>
            <param name="filters">The filters</param>
            <param name="filterCondition">The filter condition used when the are filters</param>
            <param name="orderBySource">
            Either the name of a property or the name of a custom shortcode.
            The value of the property of the <see cref="P:Atom.Core.PropertyShortcode.ActualValue"/>
            will be used as an anchor for its related model when performing an order
            operation.
            NOTE: For a property to be selected, the property type must implement the <see cref="T:System.IComparable"/>
            interface. If that's not the case then the property value is treated as a string!
            </param>
            <param name="orderByCondition">The order by condition</param>
            <param name="skip">The number of values that should get skipped</param>
            <param name="take">The number of values that should get taken</param>
        </member>
        <member name="M:Atom.Core.ShortcodeCreationEventArgs.ToPropertyShortcode">
            <summary>
            Creates and returns a <see cref="T:Atom.Core.PropertyShortcode"/> from the current <see cref="T:Atom.Core.ShortcodeCreationEventArgs"/>
            </summary>
            <returns></returns>
        </member>
        <member name="T:Atom.Core.ShortcodeCreationEventHandler">
            <summary>
            Represents the method that will handle events raised when creating a new shortcode
            </summary>
            <param name="sender">The object that created the shortcode</param>
            <param name="e">The arguments of the shortcode creation</param>
        </member>
        <member name="T:Atom.Core.WordReplacementMethod">
            <summary>
            Provides enumeration over the word replacement methods
            </summary>
        </member>
        <member name="T:Atom.Core.WordReplacementOperation">
            <summary>
            Provides enumeration over the states where the word replacement operation should take place
            </summary>
        </member>
        <member name="T:Atom.Core.SourceOriginDataModel">
            <summary>
            Contains information about a source code call
            </summary>
        </member>
        <member name="P:Atom.Core.SourceOriginDataModel.Origin">
            <summary>
            The callers member/function name.
            NOTE: This is usually retrieved by using the <see cref="T:System.Runtime.CompilerServices.CallerMemberNameAttribute"/>
            </summary>
        </member>
        <member name="P:Atom.Core.SourceOriginDataModel.FilePath">
            <summary>
            The source code file path
            NOTE: This is usually retrieved by using the <see cref="T:System.Runtime.CompilerServices.CallerFilePathAttribute"/>
            </summary>
        </member>
        <member name="P:Atom.Core.SourceOriginDataModel.LineNumber">
            <summary>
            The line number in the code file of the caller
            NOTE: This is usually retrieved by using the <see cref="T:System.Runtime.CompilerServices.CallerLineNumberAttribute"/>
            </summary>
        </member>
        <member name="M:Atom.Core.SourceOriginDataModel.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Atom.Core.SourceOriginDataModel.#ctor(System.String,System.String,System.Int32)">
            <summary>
            Standard constructor
            </summary>
            <param name="origin">
            The callers member/function name.
            NOTE: This is usually retrieved by using the <see cref="T:System.Runtime.CompilerServices.CallerMemberNameAttribute"/>
            </param>
            <param name="filePath">
            The source code file path
            NOTE: This is usually retrieved by using the <see cref="T:System.Runtime.CompilerServices.CallerFilePathAttribute"/>
            </param>
            <param name="lineNumber">
            The line number in the code file of the caller
            NOTE: This is usually retrieved by using the <see cref="T:System.Runtime.CompilerServices.CallerLineNumberAttribute"/>
            </param>
        </member>
        <member name="T:Atom.Core.Time">
            <summary>
            Time values that represents a time using the 24 hour time format
            </summary>
        </member>
        <member name="F:Atom.Core.Time.mHour">
            <summary>
            The member of the <see cref="P:Atom.Core.Time.Hour"/> property
            </summary>
        </member>
        <member name="F:Atom.Core.Time.mMinute">
            <summary>
            The member of the <see cref="P:Atom.Core.Time.Minute"/> property
            </summary>
        </member>
        <member name="F:Atom.Core.Time.mSecond">
            <summary>
            The member of the <see cref="P:Atom.Core.Time.Second"/> property
            </summary>
        </member>
        <member name="P:Atom.Core.Time.Now">
            <summary>
            Gets the current time
            </summary>
        </member>
        <member name="P:Atom.Core.Time.Hour">
            <summary>
            The hour value.
            Min value = 0.
            Max value = 23.
            </summary>
        </member>
        <member name="P:Atom.Core.Time.Minute">
            <summary>
            The minute value.
            Min value = 0.
            Max value = 59.
            </summary>
        </member>
        <member name="P:Atom.Core.Time.Second">
            <summary>
            The second value.
            Min value = 0.
            Max value = 59.
            </summary>
        </member>
        <member name="M:Atom.Core.Time.#ctor(System.Int32,System.Int32,System.Int32)">
            <summary>
            Default constructor
            </summary>
            <param name="hour">
            The hour value.
            Min value = 0.
            Max value = 23.
            </param>
            <param name="minute">
            The minute value.
            Min value = 0.
            Max value = 59.
            </param>
            <param name="second">
            The second value.
            Min value = 0.
            Max value = 59.
            </param>
        </member>
        <member name="M:Atom.Core.Time.#ctor(System.DateTime)">
            <summary>
            Date time based constructor
            </summary>
            <param name="dateTime">The date time</param>
        </member>
        <member name="M:Atom.Core.Time.ToTicks">
            <summary>
            Returns the number of ticks that represents the current values
            </summary>
            <returns></returns>
        </member>
        <member name="M:Atom.Core.Time.ToString">
            <summary>
            Returns a string of the selected time
            </summary>
            <returns></returns>
        </member>
        <member name="M:Atom.Core.Time.Equals(Atom.Core.Time)">
            <summary>
             Defines a generalized method that a value type or class implements to create
             a type-specific method for determining equality of instances.
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:Atom.Core.Time.GetHashCode">
            <summary>
            Serves as the default hash function
            </summary>
            <returns></returns>
        </member>
        <member name="M:Atom.Core.Time.Equals(System.Object)">
            <summary>
            Indicates whether this instance and a specified object are equal
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Atom.Core.Time.HourMinuteString(System.Boolean)">
            <summary>
            Gets a string that represents the <see cref="P:Atom.Core.Time.Hour"/> and the <see cref="P:Atom.Core.Time.Minute"/> value of the time
            </summary>
             <param name="useTwoChars">A flag indicating whether two characters should be used at the presentation of the hour and the minute value ex: 01, 02, 03...</param>
            <returns></returns>
        </member>
        <member name="M:Atom.Core.Time.HourString(System.Boolean)">
            <summary>
            Returns the hour value in the form of a string.
            </summary>
            <param name="useTwoChars">A flag indicating whether two characters should be used at the presentation of the value ex: 01, 02, 03...</param>
            <returns></returns>
        </member>
        <member name="M:Atom.Core.Time.MinuteString(System.Boolean)">
            <summary>
            Returns the minute value in the form of a string.
            </summary>
            <param name="useTwoChars">A flag indicating whether two characters should be used at the presentation of the value ex: 01, 02, 03...</param>
            <returns></returns>
        </member>
        <member name="M:Atom.Core.Time.SecondString(System.Boolean)">
            <summary>
            Returns the second value in the form of a string.
            </summary>
            <param name="useTwoChars">A flag indicating whether two characters should be used at the presentation of the value ex: 01, 02, 03...</param>
            <returns></returns>
        </member>
        <member name="M:Atom.Core.Time.ToDateTime(System.DateTime)">
            <summary>
            Creates and returns a <see cref="T:System.DateTime"/> using the specified <paramref name="datePart"/>
            and the current values of the time
            </summary>
            <param name="datePart">The date part</param>
            <returns></returns>
        </member>
        <member name="M:Atom.Core.Time.op_Subtraction(Atom.Core.Time,Atom.Core.Time)">
            <summary>
            Operator for subtracting two <see cref="T:Atom.Core.Time"/> structs
            </summary>
            <param name="value1">The first struct</param>
            <param name="value2">The second struct</param>
            <returns></returns>
        </member>
        <member name="M:Atom.Core.Time.op_Addition(Atom.Core.Time,Atom.Core.Time)">
            <summary>
            Operator for adding two <see cref="T:Atom.Core.Time"/> structs
            </summary>
            <param name="value1">The first struct</param>
            <param name="value2">The second struct</param>
            <returns></returns>
        </member>
        <member name="M:Atom.Core.Time.op_LessThan(Atom.Core.Time,Atom.Core.Time)">
            <summary>
            Determine whether the first <see cref="T:Atom.Core.Time"/> struct presents an earlier time
            </summary>
            <param name="value1">The first struct</param>
            <param name="value2">The second struct</param>
            <returns></returns>
        </member>
        <member name="M:Atom.Core.Time.op_GreaterThan(Atom.Core.Time,Atom.Core.Time)">
            <summary>
            Determine whether the first <see cref="T:Atom.Core.Time"/> struct presents a later time
            </summary>
            <param name="value1">The first struct</param>
            <param name="value2">The second struct</param>
            <returns></returns>
        </member>
        <member name="M:Atom.Core.Time.op_LessThanOrEqual(Atom.Core.Time,Atom.Core.Time)">
            <summary>
            Determine whether the first <see cref="T:Atom.Core.Time"/> struct presents an earlier time or the same
            </summary>
            <param name="value1">The first struct</param>
            <param name="value2">The second struct</param>
            <returns></returns>
        </member>
        <member name="M:Atom.Core.Time.op_GreaterThanOrEqual(Atom.Core.Time,Atom.Core.Time)">
            <summary>
            Determine whether the first <see cref="T:Atom.Core.Time"/> struct presents a later time or the same
            </summary>
            <param name="value1">The first struct</param>
            <param name="value2">The second struct</param>
            <returns></returns>
        </member>
        <member name="M:Atom.Core.Time.op_Equality(Atom.Core.Time,Atom.Core.Time)">
            <summary>
            Determines whether the two specified instances of <see cref="T:Atom.Core.Time"/> are equal
            </summary>
            <param name="value1">The first struct</param>
            <param name="value2">The second struct</param>
            <returns></returns>
        </member>
        <member name="M:Atom.Core.Time.op_Inequality(Atom.Core.Time,Atom.Core.Time)">
            <summary>
            Determines whether the two specified instances of <see cref="T:Atom.Core.Time"/> are not equal
            </summary>
            <param name="value1">The first struct</param>
            <param name="value2">The second struct</param>
            <returns></returns>
        </member>
        <member name="T:Atom.Core.VectorSource">
            <summary>
            Represents the source of a vector drawable
            </summary>
        </member>
        <member name="P:Atom.Core.VectorSource.PathData">
            <summary>
            The path data of the icon
            </summary>
        </member>
        <member name="P:Atom.Core.VectorSource.UriSource">
            <summary>
            The Uri source
            </summary>
        </member>
        <member name="M:Atom.Core.VectorSource.#ctor">
            <summary>
            Internal constructor
            </summary>
        </member>
        <member name="M:Atom.Core.VectorSource.FromPathData(System.String)">
            <summary>
            Creates and returns a <see cref="T:Atom.Core.VectorSource"/> from the specified <paramref name="pathData"/>
            </summary>
            <param name="pathData">The path data</param>
            <returns></returns>
        </member>
        <member name="M:Atom.Core.VectorSource.FromUriSource(System.Uri)">
            <summary>
            Creates and returns a <see cref="T:Atom.Core.VectorSource"/> from the specified <paramref name="uriSource"/>
            </summary>
            <param name="uriSource">The Uri source</param>
            <returns></returns>
        </member>
        <member name="M:Atom.Core.VectorSource.ToString">
            <summary>
            Returns a string that represents the current object
            </summary>
            <returns></returns>
        </member>
        <member name="M:Atom.Core.VectorSource.Equals(System.Object)">
            <summary>
            Determines whether the specified object is equal to the current object.
            </summary>
            <param name="obj">The object to compare with the current object.</param>
            <returns></returns>
        </member>
        <member name="M:Atom.Core.VectorSource.Equals(Atom.Core.VectorSource)">
            <summary>
            Indicates whether the current object is equal to another object of the same type
            </summary>
            <param name="other">An object to compare with this object.</param>
            <returns></returns>
        </member>
        <member name="M:Atom.Core.VectorSource.GetHashCode">
            <summary>
            Serves as the default hash function.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Atom.Core.CoreDataModelExtensions">
            <summary>
            Extension methods related to data models
            </summary>
        </member>
        <member name="F:Atom.Core.CoreDataModelExtensions.SexMaleColor">
            <summary>
            The color that represents the <see cref="F:Atom.Core.Sex.Male"/>
            </summary>
        </member>
        <member name="F:Atom.Core.CoreDataModelExtensions.SexFemaleColor">
            <summary>
            The color that represents the <see cref="F:Atom.Core.Sex.Female"/>
            </summary>
        </member>
        <member name="M:Atom.Core.CoreDataModelExtensions.ToLocalizedString(Atom.Core.Sex)">
            <summary>
            Returns a localized string that represents the specified <paramref name="sex"/>
            </summary>
            <param name="sex">The sex</param>
            <returns></returns>
        </member>
        <member name="M:Atom.Core.CoreDataModelExtensions.ToColorHex(Atom.Core.Sex)">
            <summary>
            Returns the color hex value that represents the specified <paramref name="sex"/>
            </summary>
            <param name="sex">The sex</param>
            <returns></returns>
        </member>
        <member name="M:Atom.Core.CoreDataModelExtensions.ToVectorSource(Atom.Core.Sex)">
            <summary>
            Returns the <see cref="T:Atom.Core.VectorSource"/> that represents the specified <paramref name="sex"/>
            </summary>
            <param name="sex">The sex</param>
            <returns></returns>
        </member>
        <member name="M:Atom.Core.CoreDataModelExtensions.ToLocalizedString(Atom.Core.PricingOption)">
            <summary>
            Returns a localized string that represents the specified <paramref name="option"/>
            </summary>
            <param name="option">The option</param>
            <returns></returns>
        </member>
        <member name="M:Atom.Core.CoreDataModelExtensions.ToColorHex(Atom.Core.PricingOption)">
            <summary>
            Returns the color hex value that represents the specified <paramref name="option"/>
            </summary>
            <param name="option">The option</param>
            <returns></returns>
        </member>
        <member name="M:Atom.Core.CoreDataModelExtensions.ToLocalizedString(Atom.Core.QueueStatus)">
            <summary>
            Returns a localized string that represents the specified <paramref name="status"/>
            </summary>
            <param name="status">The status</param>
            <returns></returns>
        </member>
        <member name="M:Atom.Core.CoreDataModelExtensions.ToColorHex(Atom.Core.QueueStatus)">
            <summary>
            Returns the color hex value that represents the specified <paramref name="status"/>
            </summary>
            <param name="status">The status</param>
            <returns></returns>
        </member>
        <member name="M:Atom.Core.CoreDataModelExtensions.ToLocalizedString(Atom.Core.Month)">
            <summary>
            Returns a localized string that represents the specified <paramref name="month"/>
            </summary>
            <param name="month">The month</param>
            <returns></returns>
        </member>
        <member name="M:Atom.Core.CoreDataModelExtensions.ToColorHex(Atom.Core.Month)">
            <summary>
            Returns the color hex value that represents the specified <paramref name="month"/>
            </summary>
            <param name="month">The month</param>
            <returns></returns>
        </member>
        <member name="M:Atom.Core.CoreDataModelExtensions.ToLocalizedString(System.DayOfWeek)">
            <summary>
            Returns a localized string that represents the specified <paramref name="dayOfWeek"/>
            </summary>
            <param name="dayOfWeek">The day of week</param>
            <returns></returns>
        </member>
        <member name="M:Atom.Core.CoreDataModelExtensions.ToColorHex(System.DayOfWeek)">
            <summary>
            Returns the color hex value that represents the specified <paramref name="dayOfWeek"/>
            </summary>
            <param name="dayOfWeek">The day of week</param>
            <returns></returns>
        </member>
        <member name="M:Atom.Core.CoreDataModelExtensions.ToLocalizedShortDayOfWeekString(System.DayOfWeek)">
            <summary>
            Returns a short localized <see cref="T:System.String"/> that represents the specified <paramref name="dayOfWeek"/>
            </summary>
            <param name="dayOfWeek">The day of week</param>
            <returns></returns>
        </member>
        <member name="M:Atom.Core.CoreDataModelExtensions.ToShortDayOfWeekString(System.DayOfWeek)">
            <summary>
            Returns a short localized <see cref="T:System.String"/> that represents the specified <paramref name="dayOfWeek"/>.
            Ex.: Monday -> Mon
                 Tuesday -> Tue
            </summary>
            <param name="dayOfWeek">The day of week</param>
            <returns></returns>
        </member>
        <member name="F:Atom.Core.CoreDataModelExtensions.TimePeriodSecondColor">
            <summary>
            The color that represents the <see cref="F:Atom.Core.TimePeriod.Second"/>
            </summary>
        </member>
        <member name="F:Atom.Core.CoreDataModelExtensions.TimePeriodMinuteColor">
            <summary>
            The color that represents the <see cref="F:Atom.Core.TimePeriod.Minute"/>
            </summary>
        </member>
        <member name="F:Atom.Core.CoreDataModelExtensions.TimePeriodHourColor">
            <summary>
            The color that represents the <see cref="F:Atom.Core.TimePeriod.Hour"/>
            </summary>
        </member>
        <member name="F:Atom.Core.CoreDataModelExtensions.TimePeriodDayColor">
            <summary>
            The color that represents the <see cref="F:Atom.Core.TimePeriod.Day"/>
            </summary>
        </member>
        <member name="F:Atom.Core.CoreDataModelExtensions.TimePeriodWeekColor">
            <summary>
            The color that represents the <see cref="F:Atom.Core.TimePeriod.Week"/>
            </summary>
        </member>
        <member name="F:Atom.Core.CoreDataModelExtensions.TimePeriodMonthColor">
            <summary>
            The color that represents the <see cref="F:Atom.Core.TimePeriod.Month"/>
            </summary>
        </member>
        <member name="F:Atom.Core.CoreDataModelExtensions.TimePeriodYearColor">
            <summary>
            The color that represents the <see cref="F:Atom.Core.TimePeriod.Year"/>
            </summary>
        </member>
        <member name="M:Atom.Core.CoreDataModelExtensions.ToLocalizedString(Atom.Core.TimePeriod)">
            <summary>
            Returns a localized string that represents the specified <paramref name="period"/>
            </summary>
        </member>
        <member name="M:Atom.Core.CoreDataModelExtensions.ToColorHex(Atom.Core.TimePeriod)">
            <summary>
            Returns the hex color value that represents the specified <paramref name="period"/>
            </summary>
        </member>
        <member name="F:Atom.Core.CoreDataModelExtensions.NumericEqualityOperatorEqualsToColor">
            <summary>
            The color that represents the <see cref="F:Atom.Core.NumericEqualityOperator.EqualsTo"/>
            </summary>
        </member>
        <member name="F:Atom.Core.CoreDataModelExtensions.NumericEqualityOperatorNotEqualsToColor">
            <summary>
            The color that represents the <see cref="F:Atom.Core.NumericEqualityOperator.NotEqualsTo"/>
            </summary>
        </member>
        <member name="F:Atom.Core.CoreDataModelExtensions.NumericEqualityOperatorLessThanColor">
            <summary>
            The color that represents the <see cref="F:Atom.Core.NumericEqualityOperator.LessThan"/>
            </summary>
        </member>
        <member name="F:Atom.Core.CoreDataModelExtensions.NumericEqualityOperatorGreaterThanColor">
            <summary>
            The color that represents the <see cref="F:Atom.Core.NumericEqualityOperator.GreaterThan"/>
            </summary>
        </member>
        <member name="F:Atom.Core.CoreDataModelExtensions.NumericEqualityOperatorLessOrEqualThanColor">
            <summary>
            The color that represents the <see cref="F:Atom.Core.NumericEqualityOperator.LessOrEqualThan"/>
            </summary>
        </member>
        <member name="F:Atom.Core.CoreDataModelExtensions.NumericEqualityOperatorGreaterOrEqualThanColor">
            <summary>
            The color that represents the <see cref="F:Atom.Core.NumericEqualityOperator.GreaterOrEqualThan"/>
            </summary>
        </member>
        <member name="M:Atom.Core.CoreDataModelExtensions.ToLocalizedString(Atom.Core.NumericEqualityOperator)">
            <summary>
            Returns a localized string that represents the specified <paramref name="equalityOperator"/>
            </summary>
        </member>
        <member name="M:Atom.Core.CoreDataModelExtensions.ToColorHex(Atom.Core.NumericEqualityOperator)">
            <summary>
            Returns the hex color value that represents the specified <paramref name="equalityOperator"/>
            </summary>
        </member>
        <member name="F:Atom.Core.CoreDataModelExtensions.StringEqualityOperatorContainsColor">
            <summary>
            The color that represents the <see cref="F:Atom.Core.StringEqualityOperator.Contains"/>
            </summary>
        </member>
        <member name="F:Atom.Core.CoreDataModelExtensions.StringEqualityOperatorEqualsColor">
            <summary>
            The color that represents the <see cref="F:Atom.Core.StringEqualityOperator.Equals"/>
            </summary>
        </member>
        <member name="F:Atom.Core.CoreDataModelExtensions.StringEqualityOperatorStartsWithColor">
            <summary>
            The color that represents the <see cref="F:Atom.Core.StringEqualityOperator.StartsWith"/>
            </summary>
        </member>
        <member name="F:Atom.Core.CoreDataModelExtensions.StringEqualityOperatorEndsWithColor">
            <summary>
            The color that represents the <see cref="F:Atom.Core.StringEqualityOperator.EndsWith"/>
            </summary>
        </member>
        <member name="F:Atom.Core.CoreDataModelExtensions.StringEqualityOperatorRegexColor">
            <summary>
            The color that represents the <see cref="F:Atom.Core.StringEqualityOperator.Regex"/>
            </summary>
        </member>
        <member name="M:Atom.Core.CoreDataModelExtensions.ToLocalizedString(Atom.Core.StringEqualityOperator)">
            <summary>
            Returns a localized string that represents the specified <paramref name="stringEqualityOperator"/>
            </summary>
        </member>
        <member name="M:Atom.Core.CoreDataModelExtensions.ToColorHex(Atom.Core.StringEqualityOperator)">
            <summary>
            Returns the hex color value that represents the specified <paramref name="bulkOperationTextFilterCondition"/>
            </summary>
        </member>
        <member name="F:Atom.Core.CoreDataModelExtensions.EventStateScheduledColor">
            <summary>
            The color that represents the <see cref="F:Atom.Core.EventState.Scheduled"/>
            </summary>
        </member>
        <member name="F:Atom.Core.CoreDataModelExtensions.EventStateInProgressColor">
            <summary>
            The color that represents the <see cref="F:Atom.Core.EventState.InProgress"/>
            </summary>
        </member>
        <member name="F:Atom.Core.CoreDataModelExtensions.EventStateCompletedColor">
            <summary>
            The color that represents the <see cref="F:Atom.Core.EventState.Completed"/>
            </summary>
        </member>
        <member name="F:Atom.Core.CoreDataModelExtensions.EventStateNotStartedColor">
            <summary>
            The color that represents the <see cref="F:Atom.Core.EventState.NotStarted"/>
            </summary>
        </member>
        <member name="F:Atom.Core.CoreDataModelExtensions.EventStateCanceledColor">
            <summary>
            The color that represents the <see cref="F:Atom.Core.EventState.Cancelled"/>
            </summary>
        </member>
        <member name="M:Atom.Core.CoreDataModelExtensions.ToLocalizedString(Atom.Core.EventState)">
            <summary>
            Returns a localized string that represents the specified <paramref name="eventState"/>
            </summary>
        </member>
        <member name="M:Atom.Core.CoreDataModelExtensions.ToColorHex(Atom.Core.EventState)">
            <summary>
            Returns the hex color value that represents the specified <paramref name="eventState"/>
            </summary>
        </member>
        <member name="F:Atom.Core.CoreDataModelExtensions.PropertyShortcodeGroupByConditionSumColor">
            <summary>
            The color that represents the <see cref="F:Atom.Core.PropertyShortcodeGroupByCondition.Sum"/>
            </summary>
        </member>
        <member name="F:Atom.Core.CoreDataModelExtensions.PropertyShortcodeGroupByConditionAverageColor">
            <summary>
            The color that represents the <see cref="F:Atom.Core.PropertyShortcodeGroupByCondition.Average"/>
            </summary>
        </member>
        <member name="F:Atom.Core.CoreDataModelExtensions.PropertyShortcodeGroupByConditionGreatestColor">
            <summary>
            The color that represents the <see cref="F:Atom.Core.PropertyShortcodeGroupByCondition.Greatest"/>
            </summary>
        </member>
        <member name="F:Atom.Core.CoreDataModelExtensions.PropertyShortcodeGroupByConditionLeastColor">
            <summary>
            The color that represents the <see cref="F:Atom.Core.PropertyShortcodeGroupByCondition.Least"/>
            </summary>
        </member>
        <member name="F:Atom.Core.CoreDataModelExtensions.PropertyShortcodeGroupByConditionAbsoluteSumColor">
            <summary>
            The color that represents the <see cref="F:Atom.Core.PropertyShortcodeGroupByCondition.AbsoluteSum"/>
            </summary>
        </member>
        <member name="F:Atom.Core.CoreDataModelExtensions.PropertyShortcodeGroupByConditionSumAbsolutesColor">
            <summary>
            The color that represents the <see cref="F:Atom.Core.PropertyShortcodeGroupByCondition.SumAbsolutes"/>
            </summary>
        </member>
        <member name="M:Atom.Core.CoreDataModelExtensions.ToLocalizedString(Atom.Core.PropertyShortcodeGroupByCondition)">
            <summary>
            Returns a localized string that represents the specified <paramref name="propertyShortcodeGroupByCondition"/>
            </summary>
        </member>
        <member name="M:Atom.Core.CoreDataModelExtensions.ToColorHex(Atom.Core.PropertyShortcodeGroupByCondition)">
            <summary>
            Returns the hex color value that represents the specified <paramref name="propertyShortcodeGroupByCondition"/>
            </summary>
        </member>
        <member name="F:Atom.Core.CoreDataModelExtensions.OrderConditionAscendingColor">
            <summary>
            The color that represents the <see cref="F:Atom.Core.OrderCondition.Ascending"/>
            </summary>
        </member>
        <member name="F:Atom.Core.CoreDataModelExtensions.OrderConditionDescendingColor">
            <summary>
            The color that represents the <see cref="F:Atom.Core.OrderCondition.Descending"/>
            </summary>
        </member>
        <member name="M:Atom.Core.CoreDataModelExtensions.ToLocalizedString(Atom.Core.OrderCondition)">
            <summary>
            Returns a localized string that represents the specified <paramref name="orderCondition"/>
            </summary>
        </member>
        <member name="M:Atom.Core.CoreDataModelExtensions.ToColorHex(Atom.Core.OrderCondition)">
            <summary>
            Returns the hex color value that represents the specified <paramref name="orderCondition"/>
            </summary>
        </member>
        <member name="F:Atom.Core.CoreDataModelExtensions.FilterConditionORColor">
            <summary>
            The color that represents the <see cref="F:Atom.Core.FilterCondition.OR"/>
            </summary>
        </member>
        <member name="F:Atom.Core.CoreDataModelExtensions.FilterConditionANDColor">
            <summary>
            The color that represents the <see cref="F:Atom.Core.FilterCondition.AND"/>
            </summary>
        </member>
        <member name="M:Atom.Core.CoreDataModelExtensions.ToLocalizedString(Atom.Core.FilterCondition)">
            <summary>
            Returns a localized string that represents the specified <paramref name="filterCondition"/>
            </summary>
        </member>
        <member name="M:Atom.Core.CoreDataModelExtensions.ToColorHex(Atom.Core.FilterCondition)">
            <summary>
            Returns the hex color value that represents the specified <paramref name="filterCondition"/>
            </summary>
        </member>
        <member name="F:Atom.Core.CoreDataModelExtensions.VersionTypeReleaseColor">
            <summary>
            The color that represents the <see cref="F:Atom.Core.VersionType.Release"/>
            </summary>
        </member>
        <member name="F:Atom.Core.CoreDataModelExtensions.VersionTypeAlphaColor">
            <summary>
            The color that represents the <see cref="F:Atom.Core.VersionType.Alpha"/>
            </summary>
        </member>
        <member name="F:Atom.Core.CoreDataModelExtensions.VersionTypeBetaColor">
            <summary>
            The color that represents the <see cref="F:Atom.Core.VersionType.Beta"/>
            </summary>
        </member>
        <member name="F:Atom.Core.CoreDataModelExtensions.VersionTypePreviewColor">
            <summary>
            The color that represents the <see cref="F:Atom.Core.VersionType.Preview"/>
            </summary>
        </member>
        <member name="M:Atom.Core.CoreDataModelExtensions.ToLocalizedString(Atom.Core.VersionType)">
            <summary>
            Returns a localized string that represents the specified <paramref name="versionType"/>
            </summary>
        </member>
        <member name="M:Atom.Core.CoreDataModelExtensions.ToColorHex(Atom.Core.VersionType)">
            <summary>
            Returns the hex color value that represents the specified <paramref name="versionType"/>
            </summary>
        </member>
        <member name="M:Atom.Core.CoreDataModelExtensions.ToShortcode(Atom.Core.Country)">
            <summary>
            Returns the shortcode that represents the specified <paramref name="value"/>
            </summary>
            <param name="value">The enum value</param>
            <returns></returns>
        </member>
        <member name="M:Atom.Core.CoreDataModelExtensions.ToCountryCode(System.String)">
            <summary>
            Returns the <see cref="T:Atom.Core.Country"/> that is associated with <paramref name="value"/> 
            </summary>
            <param name="value">The country code</param>
            <returns></returns>
        </member>
        <member name="F:Atom.Core.CoreDataModelExtensions.WordReplacementMethodStandardColor">
            <summary>
            The color that represents the <see cref="F:Atom.Core.WordReplacementMethod.Standard"/>
            </summary>
        </member>
        <member name="F:Atom.Core.CoreDataModelExtensions.WordReplacementMethodRegexColor">
            <summary>
            The color that represents the <see cref="F:Atom.Core.WordReplacementMethod.Regex"/>
            </summary>
        </member>
        <member name="M:Atom.Core.CoreDataModelExtensions.ToLocalizedString(Atom.Core.WordReplacementMethod)">
            <summary>
            Returns a localized string that represents the specified <paramref name="wordReplacementMethod"/>
            </summary>
        </member>
        <member name="M:Atom.Core.CoreDataModelExtensions.ToColorHex(Atom.Core.WordReplacementMethod)">
            <summary>
            Returns the hex color value that represents the specified <paramref name="wordReplacementMethod"/>
            </summary>
        </member>
        <member name="F:Atom.Core.CoreDataModelExtensions.WordReplacementOperationBeforAndAfterValueConversionColor">
            <summary>
            The color that represents the <see cref="F:Atom.Core.WordReplacementOperation.BeforAndAfterValueConversion"/>
            </summary>
        </member>
        <member name="F:Atom.Core.CoreDataModelExtensions.WordReplacementOperationBeforeValueConversionColor">
            <summary>
            The color that represents the <see cref="F:Atom.Core.WordReplacementOperation.BeforeValueConversion"/>
            </summary>
        </member>
        <member name="F:Atom.Core.CoreDataModelExtensions.WordReplacementOperationAfterValueConversionColor">
            <summary>
            The color that represents the <see cref="F:Atom.Core.WordReplacementOperation.AfterValueConversion"/>
            </summary>
        </member>
        <member name="M:Atom.Core.CoreDataModelExtensions.ToLocalizedString(Atom.Core.WordReplacementOperation)">
            <summary>
            Returns a localized string that represents the specified <paramref name="wordReplacementOperation"/>
            </summary>
        </member>
        <member name="M:Atom.Core.CoreDataModelExtensions.ToColorHex(Atom.Core.WordReplacementOperation)">
            <summary>
            Returns the hex color value that represents the specified <paramref name="wordReplacementOperation"/>
            </summary>
        </member>
        <member name="T:Atom.Core.CoreDataModelHelpers">
            <summary>
            Helper methods related to the core data models
            </summary>
        </member>
        <member name="P:Atom.Core.CoreDataModelHelpers.PricingOptionDataModelMapper">
            <summary>
            Maps the properties of the <see cref="T:Atom.Core.PricingOptionDataModel"/> to custom values
            </summary>
        </member>
        <member name="P:Atom.Core.CoreDataModelHelpers.PricingOptionDataModelTranslator">
            <summary>
            Gets the <see cref="T:Atom.Core.Translator`1"/> required for translating the 
            values of a <see cref="T:Atom.Core.PricingOptionDataModel"/>
            </summary>
        </member>
        <member name="P:Atom.Core.CoreDataModelHelpers.MetaDataModelMapper">
            <summary>
            Maps the properties of the <see cref="T:Atom.Core.MetaDataModel"/> to custom values
            </summary>
        </member>
        <member name="P:Atom.Core.CoreDataModelHelpers.FileDataModelMapper">
            <summary>
            Maps the properties of the <see cref="T:Atom.Core.FileDataModel"/> to custom values
            </summary>
        </member>
        <member name="P:Atom.Core.CoreDataModelHelpers.FileDataModelTranslator">
            <summary>
            Gets the <see cref="T:Atom.Core.Translator`1"/> required for translating the 
            values of a <see cref="T:Atom.Core.FileDataModel"/>
            </summary>
        </member>
        <member name="P:Atom.Core.CoreDataModelHelpers.FileGroupDataModelMapper">
            <summary>
            Maps the properties of the <see cref="T:Atom.Core.FileGroupDataModel"/> to custom values
            </summary>
        </member>
        <member name="P:Atom.Core.CoreDataModelHelpers.FileGroupDataModelTranslator">
            <summary>
            Gets the <see cref="T:Atom.Core.Translator`1"/> required for translating the 
            values of a <see cref="T:Atom.Core.FileGroupDataModel"/>
            </summary>
        </member>
        <member name="T:Atom.Core.ContainCondition">
            <summary>
            Provides enumeration for the contain conditions
            </summary>
        </member>
        <member name="F:Atom.Core.ContainCondition.Include">
            <summary>
            Include the value
            </summary>
        </member>
        <member name="F:Atom.Core.ContainCondition.Exclude">
            <summary>
            Exclude the value
            </summary>
        </member>
        <member name="T:Atom.Core.CopyAction">
            <summary>
            Provides enumeration for the copy actions
            </summary>
        </member>
        <member name="F:Atom.Core.CopyAction.Copy">
            <summary>
            The copy action
            </summary>
        </member>
        <member name="F:Atom.Core.CopyAction.Cut">
            <summary>
            The cut action
            </summary>
        </member>
        <member name="T:Atom.Core.CornerRectanglePlacement">
            <summary>
            Provides enumeration for the corner rectangle placement options
            </summary>
        </member>
        <member name="F:Atom.Core.CornerRectanglePlacement.TopLeft">
            <summary>
            Placement on the top left corner
            </summary>
        </member>
        <member name="F:Atom.Core.CornerRectanglePlacement.TopRight">
            <summary>
            Placement on the top right corner
            </summary>
        </member>
        <member name="F:Atom.Core.CornerRectanglePlacement.BottomRight">
            <summary>
            Placement on the bottom right corner
            </summary>
        </member>
        <member name="F:Atom.Core.CornerRectanglePlacement.BottomLeft">
            <summary>
            Placement on the bottom left corner
            </summary>
        </member>
        <member name="T:Atom.Core.DateSelectionState">
            <summary>
            Provides enumeration for the date selection states
            </summary>
        </member>
        <member name="F:Atom.Core.DateSelectionState.DaySelectionState">
            <summary>
            A state where the user selects the day of the month
            </summary>
        </member>
        <member name="F:Atom.Core.DateSelectionState.MonthSelectionState">
            <summary>
            A state where the user selects the month of the year
            </summary>
        </member>
        <member name="T:Atom.Core.DateType">
            <summary>
            Provides enumeration for the date types
            </summary>
        </member>
        <member name="T:Atom.Core.DayPeriod">
            <summary>
            Provides enumeration for the day periods
            </summary>
        </member>
        <member name="F:Atom.Core.DayPeriod.AM">
            <summary>
            Before midday
            </summary>
        </member>
        <member name="F:Atom.Core.DayPeriod.PM">
            <summary>
            Post midday
            </summary>
        </member>
        <member name="T:Atom.Core.Direction">
            <summary>
            Provides enumeration for the directions
            </summary>
        </member>
        <member name="F:Atom.Core.Direction.LeftToRight">
            <summary>
            From left to right
            </summary>
        </member>
        <member name="F:Atom.Core.Direction.RightToLeft">
            <summary>
            From right to left
            </summary>
        </member>
        <member name="F:Atom.Core.Direction.TopToBottom">
            <summary>
            From top to bottom
            </summary>
        </member>
        <member name="F:Atom.Core.Direction.BottomToTop">
            <summary>
            From bottom to top
            </summary>
        </member>
        <member name="T:Atom.Core.DockType">
            <summary>
            Provides enumeration for the dock types
            </summary>
        </member>
        <member name="F:Atom.Core.DockType.Fill">
            <summary>
            Fill all the available space
            </summary>
        </member>
        <member name="F:Atom.Core.DockType.Top">
            <summary>
            Position at the top of the available space
            </summary>
        </member>
        <member name="F:Atom.Core.DockType.Bottom">
            <summary>
            Position at the bottom of the available space
            </summary>
        </member>
        <member name="F:Atom.Core.DockType.Left">
            <summary>
            Position at the left of the available space
            </summary>
        </member>
        <member name="F:Atom.Core.DockType.Right">
            <summary>
            Position at the right of the available space
            </summary>
        </member>
        <member name="F:Atom.Core.DockType.None">
            <summary>
            No docking
            </summary>
        </member>
        <member name="T:Atom.Core.EventRepeatOption">
            <summary>
            Provides enumeration for the event repeat options
            </summary>
        </member>
        <member name="F:Atom.Core.EventRepeatOption.Daily">
            <summary>
            Daily recurrence
            </summary>
        </member>
        <member name="F:Atom.Core.EventRepeatOption.Weekly">
            <summary>
            Weekly recurrence
            </summary>
        </member>
        <member name="F:Atom.Core.EventRepeatOption.Monthly">
            <summary>
            Monthly recurrence
            </summary>
        </member>
        <member name="F:Atom.Core.EventRepeatOption.Yearly">
            <summary>
            Yearly recurrence
            </summary>
        </member>
        <member name="T:Atom.Core.EventState">
            <summary>
            Provides enumeration for the event states
            </summary>
        </member>
        <member name="F:Atom.Core.EventState.Scheduled">
            <summary>
            Scheduled
            </summary>
        </member>
        <member name="F:Atom.Core.EventState.InProgress">
            <summary>
            In progress
            </summary>
        </member>
        <member name="F:Atom.Core.EventState.Completed">
            <summary>
            Completed
            </summary>
        </member>
        <member name="F:Atom.Core.EventState.NotStarted">
            <summary>
            Not started
            </summary>
        </member>
        <member name="F:Atom.Core.EventState.Cancelled">
            <summary>
            Cancelled
            </summary>
        </member>
        <member name="T:Atom.Core.FilterCondition">
            <summary>
            Provides enumeration over the filtering conditions
            </summary>
        </member>
        <member name="F:Atom.Core.FilterCondition.OR">
            <summary>
            At least one filter condition must be satisfied
            </summary>
        </member>
        <member name="F:Atom.Core.FilterCondition.AND">
            <summary>
            All the filter conditions must be satisfied
            </summary>
        </member>
        <member name="T:Atom.Core.Month">
            <summary>
            Provides enumeration for the months
            </summary>
        </member>
        <member name="T:Atom.Core.NumericEqualityOperator">
            <summary>
            Provides enumeration over the equality operators
            </summary>
        </member>
        <member name="F:Atom.Core.NumericEqualityOperator.EqualsTo">
            <summary>
            Equals to "=="
            </summary>
        </member>
        <member name="F:Atom.Core.NumericEqualityOperator.NotEqualsTo">
            <summary>
            Not equals to "!="
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "F:Atom.Core.NumericEqualityOperator.LessThan" -->
        <member name="F:Atom.Core.NumericEqualityOperator.GreaterThan">
            <summary>
            Greater than ">"
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "F:Atom.Core.NumericEqualityOperator.LessOrEqualThan" -->
        <member name="F:Atom.Core.NumericEqualityOperator.GreaterOrEqualThan">
            <summary>
            Greater or equal than ">="
            </summary>
        </member>
        <member name="T:Atom.Core.OrderCondition">
            <summary>
            Provides enumeration for the order conditions
            </summary>
        </member>
        <member name="F:Atom.Core.OrderCondition.Ascending">
            <summary>
            Ascending sort order
            </summary>
        </member>
        <member name="F:Atom.Core.OrderCondition.Descending">
            <summary>
            Descending sort order
            </summary>
        </member>
        <member name="T:Atom.Core.OrientationStatus">
            <summary>
            Provides enumeration for the orientation statuses
            </summary>
        </member>
        <member name="F:Atom.Core.OrientationStatus.Horizontal">
            <summary>
            Horizontal orientation
            </summary>
        </member>
        <member name="F:Atom.Core.OrientationStatus.Vertical">
            <summary>
            Vertical orientation
            </summary>
        </member>
        <member name="F:Atom.Core.OrientationStatus.None">
            <summary>
            No orientation
            </summary>
        </member>
        <member name="T:Atom.Core.Placement">
            <summary>
            Provides enumeration for the  placement positions
            </summary>
        </member>
        <member name="F:Atom.Core.Placement.Left">
            <summary>
            Placement on the left side
            </summary>
        </member>
        <member name="F:Atom.Core.Placement.Right">
            <summary>
            Placement on the right side
            </summary>
        </member>
        <member name="F:Atom.Core.Placement.Top">
            <summary>
            Placement on the top side
            </summary>
        </member>
        <member name="F:Atom.Core.Placement.Bottom">
            <summary>
            Placement on the bottom side
            </summary>
        </member>
        <member name="F:Atom.Core.Placement.Center">
            <summary>
            Placement on the center side
            </summary>
        </member>
        <member name="T:Atom.Core.PricingOption">
            <summary>
            Provides enumeration for the pricing options
            </summary>
        </member>
        <member name="F:Atom.Core.PricingOption.Lifetime">
            <summary>
            Pay once
            </summary>
        </member>
        <member name="F:Atom.Core.PricingOption.Daily">
            <summary>
            Daily payment
            </summary>
        </member>
        <member name="F:Atom.Core.PricingOption.Weekly">
            <summary>
            Weekly payment
            </summary>
        </member>
        <member name="F:Atom.Core.PricingOption.Monthly">
            <summary>
            Monthly payment
            </summary>
        </member>
        <member name="F:Atom.Core.PricingOption.Annual">
            <summary>
            Annual payment
            </summary>
        </member>
        <member name="T:Atom.Core.Quadrant">
            <summary>
            Provides enumeration for the quadrants
            </summary>
        </member>
        <member name="F:Atom.Core.Quadrant.First">
            <summary>
            The first quadrant
            </summary>
        </member>
        <member name="F:Atom.Core.Quadrant.Second">
            <summary>
            The second quadrant
            </summary>
        </member>
        <member name="F:Atom.Core.Quadrant.Third">
            <summary>
            The third quadrant
            </summary>
        </member>
        <member name="F:Atom.Core.Quadrant.Fourth">
            <summary>
            The second quadrant
            </summary>
        </member>
        <member name="T:Atom.Core.QueueStatus">
            <summary>
            Provides enumeration over the queue statuses
            </summary>
        </member>
        <member name="F:Atom.Core.QueueStatus.Pending">
            <summary>
            Pending (waiting) status
            </summary>
        </member>
        <member name="F:Atom.Core.QueueStatus.Accepted">
            <summary>
            Accepted status
            </summary>
        </member>
        <member name="F:Atom.Core.QueueStatus.Rejected">
            <summary>
            Rejected status
            </summary>
        </member>
        <member name="T:Atom.Core.Sex">
            <summary>
            Provides enumeration for the sex options
            </summary>
        </member>
        <member name="F:Atom.Core.Sex.Male">
            <summary>
            Male
            </summary>
        </member>
        <member name="F:Atom.Core.Sex.Female">
            <summary>
            Female
            </summary>
        </member>
        <member name="T:Atom.Core.StringEqualityOperator">
            <summary>
            Provides enumeration over the string equality operator
            </summary>
        </member>
        <member name="F:Atom.Core.StringEqualityOperator.Contains">
            <summary>
            String contains a sub string value
            </summary>
        </member>
        <member name="F:Atom.Core.StringEqualityOperator.Equals">
            <summary>
            String is equal to a value
            </summary>
        </member>
        <member name="F:Atom.Core.StringEqualityOperator.StartsWith">
            <summary>
            String that starts with a value
            </summary>
        </member>
        <member name="F:Atom.Core.StringEqualityOperator.EndsWith">
            <summary>
            String that ends with a value
            </summary>
        </member>
        <member name="F:Atom.Core.StringEqualityOperator.Regex">
            <summary>
            String that satisfies a regex
            </summary>
        </member>
        <member name="T:Atom.Core.TextValue">
            <summary>
            Provides enumeration for the text value types
            </summary>
        </member>
        <member name="F:Atom.Core.TextValue.Default">
            <summary>
            A simple text value
            </summary>
        </member>
        <member name="F:Atom.Core.TextValue.Phone">
            <summary>
            A phone number
            </summary>
        </member>
        <member name="F:Atom.Core.TextValue.Email">
            <summary>
            An email
            </summary>
        </member>
        <member name="T:Atom.Core.TimePeriod">
            <summary>
            Provides enumeration over the standard periods
            </summary>
        </member>
        <member name="F:Atom.Core.TimePeriod.Second">
            <summary>
            Second period
            </summary>
        </member>
        <member name="F:Atom.Core.TimePeriod.Minute">
            <summary>
            Minute period
            </summary>
        </member>
        <member name="F:Atom.Core.TimePeriod.Hour">
            <summary>
            Hour period
            </summary>
        </member>
        <member name="F:Atom.Core.TimePeriod.Day">
            <summary>
            Day period
            </summary>
        </member>
        <member name="F:Atom.Core.TimePeriod.Week">
            <summary>
            Week period
            </summary>
        </member>
        <member name="F:Atom.Core.TimePeriod.Month">
            <summary>
            Month period
            </summary>
        </member>
        <member name="F:Atom.Core.TimePeriod.Year">
            <summary>
            Year period
            </summary>
        </member>
        <member name="T:Atom.Core.TimeValue">
            <summary>
            Provides enumeration for the time value types
            </summary>
        </member>
        <member name="F:Atom.Core.TimeValue.Second">
            <summary>
            Seconds time value
            </summary>
        </member>
        <member name="F:Atom.Core.TimeValue.Minute">
            <summary>
            Minutes time value
            </summary>
        </member>
        <member name="F:Atom.Core.TimeValue.Hour">
            <summary>
            Hours time value
            </summary>
        </member>
        <member name="T:Atom.Core.VersionType">
            <summary>
            Provides enumeration for the version types
            </summary>
        </member>
        <member name="F:Atom.Core.VersionType.Release">
            <summary>
            Release version
            </summary>
        </member>
        <member name="F:Atom.Core.VersionType.Alpha">
            <summary>
            Alpha version
            </summary>
        </member>
        <member name="F:Atom.Core.VersionType.Beta">
            <summary>
            Beta version
            </summary>
        </member>
        <member name="F:Atom.Core.VersionType.Preview">
            <summary>
            Preview version
            </summary>
        </member>
        <member name="T:Atom.Core.Coordinates">
            <summary>
            A struct that represents a coordinates pair
            </summary>
        </member>
        <member name="F:Atom.Core.Coordinates.X">
            <summary>
            The X coordinate
            </summary>
        </member>
        <member name="F:Atom.Core.Coordinates.Y">
            <summary>
            The Y coordinate
            </summary>
        </member>
        <member name="M:Atom.Core.Coordinates.#ctor(System.Double,System.Double)">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="T:Atom.Core.DaySpan">
            <summary>
            Represent a span of days
            </summary>
        </member>
        <member name="F:Atom.Core.DaySpan.mStartingDate">
            <summary>
            The member of the <see cref="P:Atom.Core.DaySpan.StartingDate"/> property
            </summary>
        </member>
        <member name="F:Atom.Core.DaySpan.mEndingDate">
            <summary>
            The member of the <see cref="P:Atom.Core.DaySpan.EndingDate"/> property
            </summary>
        </member>
        <member name="P:Atom.Core.DaySpan.StartingDate">
            <summary>
            The starting date
            </summary>
        </member>
        <member name="P:Atom.Core.DaySpan.EndingDate">
            <summary>
            The ending date
            </summary>
        </member>
        <member name="P:Atom.Core.DaySpan.NumberOfDays">
            <summary>
            Gets the number of days of the day span
            </summary>
        </member>
        <member name="P:Atom.Core.DaySpan.Days">
            <summary>
            Gets the date times that are between the <see cref="P:Atom.Core.DaySpan.StartingDate"/> and the <see cref="P:Atom.Core.DaySpan.EndingDate"/>
            </summary>
        </member>
        <member name="P:Atom.Core.DaySpan.SecondsDuration">
            <summary>
            The duration of the day span in seconds
            </summary>
        </member>
        <member name="M:Atom.Core.DaySpan.#ctor(System.DateTime,System.DateTime)">
            <summary>
            Default constructor
            </summary>
            <param name="startingDate">The starting date</param>
            <param name="endingDate">The ending date</param>
        </member>
        <member name="M:Atom.Core.DaySpan.#ctor(System.DateTime,System.UInt32)">
            <summary>
            Duration based constructor
            </summary>
            <param name="startingDate">The starting date</param>
            <param name="numberOfDays">The duration of the day span in days</param>
        </member>
        <member name="M:Atom.Core.DaySpan.#ctor(System.UInt32,System.DateTime)">
            <summary>
            Duration based constructor
            </summary>
            <param name="numberOfDays">The duration of the day span in days</param>
            <param name="endingDate">The ending date</param>
        </member>
        <member name="M:Atom.Core.DaySpan.Contains(System.DateTime)">
            <summary>
            Checks if the specified <paramref name="date"/> is contained in the day span
            </summary>
            <param name="date">The date to check if is contained in the current day span</param>
            <returns></returns>
        </member>
        <member name="M:Atom.Core.DaySpan.ToString">
            <summary>
            Returns a string that represents the current object
            </summary>
            <returns></returns>
        </member>
        <member name="M:Atom.Core.DaySpan.ToStandardString">
            <summary>
            Returns a string that represents the day span using a minimal format
            </summary>
            <returns></returns>
        </member>
        <member name="M:Atom.Core.DaySpan.Equals(System.Object)">
            <summary>
            Determines whether the specified <paramref name="obj"/> is equal to the current object
            </summary>
            <param name="obj">The object to check</param>
            <returns></returns>
        </member>
        <member name="M:Atom.Core.DaySpan.Equals(Atom.Core.DaySpan)">
            <summary>
            Indicates whether the current object is equal to another object of the same type
            </summary>
            <param name="other">The other object</param>
            <returns></returns>
        </member>
        <member name="M:Atom.Core.DaySpan.CompareTo(Atom.Core.DaySpan)">
            <summary>
            Compares the current object to the specified <paramref name="other"/>
            </summary>
            <param name="other">The object to be compared to</param>
            <returns></returns>
        </member>
        <member name="M:Atom.Core.DaySpan.CompareTo(System.Object)">
            <summary>
            Compares the current object to the specified <paramref name="obj"/>
            </summary>
            <param name="obj">The object to compare to the current object</param>
            <returns></returns>
        </member>
        <member name="M:Atom.Core.DaySpan.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Atom.Core.DaySpan.op_Equality(Atom.Core.DaySpan,Atom.Core.DaySpan)">
            <summary>
            Determines whether two specified <see cref="T:Atom.Core.DaySpan"/>s have the same value
            </summary>
            <param name="obj1">The first day span</param>
            <param name="obj2">The second day span</param>
            <returns></returns>
        </member>
        <member name="M:Atom.Core.DaySpan.op_Inequality(Atom.Core.DaySpan,Atom.Core.DaySpan)">
            <summary>
            Determines whether tow specified <see cref="T:Atom.Core.DaySpan"/>s have different values
            </summary>
            <param name="obj1">The first day span</param>
            <param name="obj2">The second day span</param>
            <returns></returns>
        </member>
        <member name="T:Atom.Core.PhoneNumber">
            <summary>
            Represents a phone number
            </summary>
        </member>
        <member name="P:Atom.Core.PhoneNumber.CountryCode">
            <summary>
            The country code
            </summary>
        </member>
        <member name="P:Atom.Core.PhoneNumber.Phone">
            <summary>
            The phone
            </summary>
        </member>
        <member name="M:Atom.Core.PhoneNumber.#ctor(System.Int32,System.String)">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Atom.Core.PhoneNumber.Equals(System.Object)">
            <summary>
            Determines whether the specified <paramref name="obj"/> is equal to the current object
            </summary>
            <param name="obj">The object to check</param>
            <returns></returns>
        </member>
        <member name="M:Atom.Core.PhoneNumber.Equals(Atom.Core.PhoneNumber)">
            <summary>
            Indicates whether the current object is equal to another object of the same type
            </summary>
            <param name="other">The other object</param>
            <returns></returns>
        </member>
        <member name="M:Atom.Core.PhoneNumber.CompareTo(Atom.Core.PhoneNumber)">
            <summary>
            Compares the current object to the specified <paramref name="other"/>
            </summary>
            <param name="other">The object to be compared to</param>
            <returns></returns>
        </member>
        <member name="M:Atom.Core.PhoneNumber.CompareTo(System.Object)">
            <summary>
            Compares the current object to the specified <paramref name="obj"/>
            </summary>
            <param name="obj">The object to compare to the current object</param>
            <returns></returns>
        </member>
        <member name="M:Atom.Core.PhoneNumber.ToPhoneNumberString">
            <summary>
            Returns a string that contains both the country code and phone number
            </summary>
            <returns></returns>
        </member>
        <member name="M:Atom.Core.PhoneNumber.ToString">
            <summary>
            Returns a string that represents a phone number
            </summary>
            <returns></returns>
        </member>
        <member name="M:Atom.Core.PhoneNumber.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Atom.Core.PhoneNumber.op_Equality(Atom.Core.PhoneNumber,Atom.Core.PhoneNumber)">
            <summary>
            Determines whether two specified <see cref="T:Atom.Core.DaySpan"/>s have the same value
            </summary>
            <param name="obj1">The first day span</param>
            <param name="obj2">The second day span</param>
            <returns></returns>
        </member>
        <member name="M:Atom.Core.PhoneNumber.op_Inequality(Atom.Core.PhoneNumber,Atom.Core.PhoneNumber)">
            <summary>
            Determines whether tow specified <see cref="T:Atom.Core.DaySpan"/>s have different values
            </summary>
            <param name="obj1">The first day span</param>
            <param name="obj2">The second day span</param>
            <returns></returns>
        </member>
        <member name="T:Atom.Core.ProgressResult">
            <summary>
            Represents a progress result status
            </summary>
        </member>
        <member name="P:Atom.Core.ProgressResult.Current">
            <summary>
            The current object
            </summary>
        </member>
        <member name="P:Atom.Core.ProgressResult.Total">
            <summary>
            The total object
            </summary>
        </member>
        <member name="M:Atom.Core.ProgressResult.#ctor(System.UInt32,System.UInt32)">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Atom.Core.ProgressResult.ToString">
            <summary>
            Returns a string that represents the current object
            </summary>
            <returns></returns>
        </member>
        <member name="M:Atom.Core.ProgressResult.Equals(System.Object)">
            <summary>
            Determines whether the specified object is equal to the current object.
            </summary>
            <param name="obj">The object to compare with the current object.</param>
            <returns></returns>
        </member>
        <member name="M:Atom.Core.ProgressResult.Equals(Atom.Core.ProgressResult)">
            <summary>
            Indicates whether the current object is equal to another object of the same type
            </summary>
            <param name="other">An object to compare with this object</param>
            <returns></returns>
        </member>
        <member name="M:Atom.Core.ProgressResult.GetHashCode">
            <summary>
            Serves as the default hash function.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Atom.Core.Range`1">
            <summary>
            Represents a range of values
            </summary>
            <typeparam name="T">The type of the values</typeparam>
        </member>
        <member name="F:Atom.Core.Range`1.mMinimum">
            <summary>
            The member of the <see cref="P:Atom.Core.Range`1.Minimum"/> property
            </summary>
        </member>
        <member name="F:Atom.Core.Range`1.mMaximum">
            <summary>
            The member of the <see cref="P:Atom.Core.Range`1.Maximum"/> property
            </summary>
        </member>
        <member name="P:Atom.Core.Range`1.Minimum">
            <summary>
            The minimum value
            </summary>
        </member>
        <member name="P:Atom.Core.Range`1.Maximum">
            <summary>
            The maximum value
            </summary>
        </member>
        <member name="M:Atom.Core.Range`1.#ctor(`0,`0)">
            <summary>
            Default constructor
            </summary>
            <param name="minimum">The minimum value</param>
            <param name="maximum">The maximum value</param>
        </member>
        <member name="M:Atom.Core.Range`1.ToString">
            <summary>
            Returns a string that represents the current object
            </summary>
        </member>
        <member name="M:Atom.Core.Range`1.ContainsValue(`0)">
            <summary>
            Determines if the provided value is inside the range.
            </summary>
            <param name="value">The range to test</param>
        </member>
        <member name="M:Atom.Core.Range`1.Contains(Atom.Core.Range{`0})">
            <summary>
            Determines if the specified <paramref name="range"/> is inside the bounds of the current range.
            </summary>
            <param name="range">The range</param>
        </member>
        <member name="M:Atom.Core.Range`1.IntersectsWith(Atom.Core.Range{`0})">
            <summary>
            Determines if the specified <paramref name="range"/> intersects with the current range
            </summary>
            <param name="range">The range</param>
            <returns></returns>
        </member>
        <member name="M:Atom.Core.Range`1.Equals(System.Object)">
            <summary>
            Determines whether the specified <paramref name="obj"/> is equal to the current object
            </summary>
            <param name="obj">The object to check</param>
            <returns></returns>
        </member>
        <member name="M:Atom.Core.Range`1.Equals(Atom.Core.Range{`0})">
            <summary>
            Indicates whether the current object is equal to another object of the same type
            </summary>
            <param name="other">The other object</param>
            <returns></returns>
        </member>
        <member name="M:Atom.Core.Range`1.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Atom.Core.Range`1.op_Equality(Atom.Core.Range{`0},Atom.Core.Range{`0})">
            <summary>
            Determines whether two specified <see cref="T:Atom.Core.Range`1"/>s have the same value
            </summary>
            <param name="obj1">The first range</param>
            <param name="obj2">The second range</param>
            <returns></returns>
        </member>
        <member name="M:Atom.Core.Range`1.op_Inequality(Atom.Core.Range{`0},Atom.Core.Range{`0})">
            <summary>
            Determines whether tow specified <see cref="T:Atom.Core.Range`1"/>s have different values
            </summary>
            <param name="obj1">The first range</param>
            <param name="obj2">The second range</param>
            <returns></returns>
        </member>
        <member name="T:Atom.Core.RowColumnIndexPair">
            <summary>
            Represents a pair of a column and a row index
            </summary>
        </member>
        <member name="P:Atom.Core.RowColumnIndexPair.ColumnIndex">
            <summary>
            The index of the column
            </summary>
        </member>
        <member name="P:Atom.Core.RowColumnIndexPair.RowIndex">
            <summary>
            The index of the row
            </summary>
        </member>
        <member name="M:Atom.Core.RowColumnIndexPair.#ctor(System.Int32,System.Int32)">
            <summary>
            Standard constructor
            </summary>
            <param name="columnIndex">The index of the column</param>
            <param name="rowIndex">The index of the row</param>
        </member>
        <member name="T:Atom.Core.TitleData">
            <summary>
            Required data for the presentation of a title
            </summary>
        </member>
        <member name="P:Atom.Core.TitleData.Property">
            <summary>
            The name of the target property
            </summary>
        </member>
        <member name="P:Atom.Core.TitleData.Name">
            <summary>
            The custom name.
            NOTE: If a custom name wasn't set, the <see cref="P:Atom.Core.TitleData.Property"/> is used instead
            </summary>
        </member>
        <member name="M:Atom.Core.TitleData.#ctor(System.Reflection.PropertyInfo,System.String)">
            <summary>
            Default constructor
            </summary>
            <param name="propertyInfo">The property info</param>
            <param name="name">
            The custom name.
            NOTE: If a custom name wasn't set, the name of the <see cref="P:Atom.Core.TitleData.Property"/> is used instead
            </param>
        </member>
        <member name="M:Atom.Core.TitleData.ToString">
            <summary>
            Returns a string that represents the current object
            </summary>
            <returns></returns>
        </member>
        <member name="T:Atom.Core.DateTimeConstants">
            <summary>
            Constants associated with dates and times
            </summary>
        </member>
        <member name="F:Atom.Core.DateTimeConstants.StandardDateAndTimeFormat">
            <summary>
            The standard date and time format
            </summary>
        </member>
        <member name="F:Atom.Core.DateTimeConstants.ShortDateFormat">
            <summary>
            The date only format
            </summary>
        </member>
        <member name="F:Atom.Core.DateTimeConstants.TimeFormat">
            <summary>
            The time only format
            </summary>
        </member>
        <member name="F:Atom.Core.DateTimeConstants.SundayShort">
            <summary>
            The Sunday short code
            </summary>
        </member>
        <member name="F:Atom.Core.DateTimeConstants.MondayShort">
            <summary>
            The Monday short code
            </summary>
        </member>
        <member name="F:Atom.Core.DateTimeConstants.TuesdayShort">
            <summary>
            The Tuesday short code
            </summary>
        </member>
        <member name="F:Atom.Core.DateTimeConstants.WednesdayShort">
            <summary>
            The Wednesday short code
            </summary>
        </member>
        <member name="F:Atom.Core.DateTimeConstants.ThursdayShort">
            <summary>
            The Thursday short code
            </summary>
        </member>
        <member name="F:Atom.Core.DateTimeConstants.FridayShort">
            <summary>
            The Friday short code
            </summary>
        </member>
        <member name="F:Atom.Core.DateTimeConstants.SaturdayShort">
            <summary>
            The Saturday short code
            </summary>
        </member>
        <member name="F:Atom.Core.DateTimeConstants.JanuaryName">
            <summary>
            The name of January
            </summary>
        </member>
        <member name="F:Atom.Core.DateTimeConstants.FenruaryName">
            <summary>
            The name of February
            </summary>
        </member>
        <member name="F:Atom.Core.DateTimeConstants.MarchName">
            <summary>
            The name of March
            </summary>
        </member>
        <member name="F:Atom.Core.DateTimeConstants.AprilName">
            <summary>
            The name of April
            </summary>
        </member>
        <member name="F:Atom.Core.DateTimeConstants.MayName">
            <summary>
            The name of May
            </summary>
        </member>
        <member name="F:Atom.Core.DateTimeConstants.JuneName">
            <summary>
            The name of June
            </summary>
        </member>
        <member name="F:Atom.Core.DateTimeConstants.JulyName">
            <summary>
            The name of July
            </summary>
        </member>
        <member name="F:Atom.Core.DateTimeConstants.AugustName">
            <summary>
            The name of August
            </summary>
        </member>
        <member name="F:Atom.Core.DateTimeConstants.SeptemberName">
            <summary>
            The name of September
            </summary>
        </member>
        <member name="F:Atom.Core.DateTimeConstants.OctoberName">
            <summary>
            The name of October
            </summary>
        </member>
        <member name="F:Atom.Core.DateTimeConstants.NovemberName">
            <summary>
            The name of November
            </summary>
        </member>
        <member name="F:Atom.Core.DateTimeConstants.DecemberName">
            <summary>
            The name of December
            </summary>
        </member>
        <member name="T:Atom.Core.DateTimeExtensions">
            <summary>
            Extension methods for <see cref="T:System.DateTime"/>
            </summary>
        </member>
        <member name="M:Atom.Core.DateTimeExtensions.ToUnixTimeMilliseconds(System.DateTime)">
            <summary>
            Converts a given <paramref name="date"/> into a Unix timestamp
            </summary>
            <param name="date">The date</param>
        </member>
        <member name="M:Atom.Core.DateTimeExtensions.ToUnixTimeSeconds(System.DateTime)">
            <summary>
            Converts a given <paramref name="date"/> into a Unix timestamp
            </summary>
            <param name="date">The date</param>
        </member>
        <member name="M:Atom.Core.DateTimeExtensions.ToString(System.Nullable{System.DateTime},System.String)">
            <summary>
            Returns a string based on the output format of a nullable date time
            </summary>
            <param name="dt">The nullable date time</param>
            <param name="format">The output format</param>
            <returns></returns>
        </member>
        <member name="M:Atom.Core.DateTimeExtensions.ToISO8601String(System.DateTime)">
            <summary>
            Returns a string that represents the specified <paramref name="dt"/> using the ISO8601 format
            </summary>
            <param name="dt">The date time</param>
            <returns></returns>
        </member>
        <member name="M:Atom.Core.DateTimeExtensions.ToMySQLDateTimeFormat(System.DateTime)">
            <summary>
            Returns a string formatted based on the MySQL date time acceptable format
            </summary>
            <param name="dt">The date time</param>
            <returns></returns>
        </member>
        <member name="M:Atom.Core.DateTimeExtensions.ToSQLServerDateTimeFormat(System.DateTime)">
            <summary>
            Returns a string formatted based on the MySQL date time acceptable format
            </summary>
            <param name="dt">the date time</param>
            <returns></returns>
        </member>
        <member name="M:Atom.Core.DateTimeExtensions.ToShortDateTimeString(System.DateTime)">
            <summary>
            Returns a string that represents the specified <paramref name="dt"/> using a short date and time format
            </summary>
            <param name="dt">The date time</param>
            <returns></returns>
        </member>
        <member name="M:Atom.Core.DateTimeExtensions.ToShortDateString(System.DateTime)">
            <summary>
            Returns a string that represents the specified <paramref name="dt"/> using a short date format
            </summary>
            <param name="dt">The date time</param>
            <returns></returns>
        </member>
        <member name="M:Atom.Core.DateTimeExtensions.GetFullMonthName(System.DateTime)">
            <summary>
            Gets the full name of the month of the given date time
            </summary>
            <param name="dt">The given date time</param>
            <returns></returns>
        </member>
        <member name="M:Atom.Core.DateTimeExtensions.GetShortDayName(System.DateTime)">
            <summary>
            Gets the day name acronym of the specified <paramref name="date"/>
            </summary>
            <param name="date">The date whose day acronym we want to get</param>
            <returns></returns>
        </member>
        <member name="M:Atom.Core.DateTimeExtensions.GetShortMonthName(System.DateTime)">
            <summary>
            Gets the short name of the month of the specified <paramref name="date"/>
            </summary>
            <param name="date"></param>
            <returns></returns>
        </member>
        <member name="M:Atom.Core.DateTimeExtensions.ToString(System.Nullable{System.DateTimeOffset},System.String)">
            <summary>
            Returns a string based on the output format of a nullable date time offset
            </summary>
            <param name="dto">The nullable date time offset</param>
            <param name="format">The output format</param>
            <returns></returns>
        </member>
        <member name="M:Atom.Core.DateTimeExtensions.ToTime(System.DateTimeOffset)">
            <summary>
            Returns a string that presents the hour and the minute of the given <paramref name="dto"/>
            </summary>
            <param name="dto">The date time offset</param>
            <returns></returns>
        </member>
        <member name="M:Atom.Core.DateTimeExtensions.GetFullMonthName(System.DateTimeOffset)">
            <summary>
            Gets the full name of the month of the given date time
            </summary>
            <param name="dto">The date time offset</param>
            <returns></returns>
        </member>
        <member name="M:Atom.Core.DateTimeExtensions.ToISO8601String(System.DateTimeOffset)">
            <summary>
            Returns a string that represents the specified <paramref name="dto"/> using the ISO8601 format
            </summary>
            <param name="dto">The date time offset</param>
            <returns></returns>
        </member>
        <member name="M:Atom.Core.DateTimeExtensions.ToShortDateTimeString(System.DateTimeOffset)">
            <summary>
            Returns a string that represents the specified <paramref name="dto"/> using a short date and time format
            </summary>
            <param name="dto">The date time offset</param>
            <returns></returns>
        </member>
        <member name="M:Atom.Core.DateTimeExtensions.ToShortDateString(System.DateTimeOffset)">
            <summary>
            Returns a string that represents the specified <paramref name="dto"/> using a short date format
            </summary>
            <param name="dto">The date time offset</param>
            <returns></returns>
        </member>
        <member name="M:Atom.Core.DateTimeExtensions.FirstDayOfTheMonth(System.DateTime)">
            <summary>
            Returns the first day of the month of a specific date time
            </summary>
            <param name="datetime">The specific date time</param>
            <returns></returns>
        </member>
        <member name="M:Atom.Core.DateTimeExtensions.LastDayOfTheMonth(System.DateTime)">
            <summary>
            Returns the last day of the month of a specific date time
            </summary>
            <param name="datetime">The specific date time</param>
            <returns></returns>
        </member>
        <member name="M:Atom.Core.DateTimeExtensions.DaysInMonth(System.DateTime)">
            <summary>
            Returns the number of days the month of a specific date time has
            </summary>
            <param name="datetime">The specific date time</param>
            <returns></returns>
        </member>
        <member name="M:Atom.Core.DateTimeExtensions.MonthDifference(System.DateTime,System.DateTime)">
            <summary>
            Gets the difference in months of the two specified datetime values
            </summary>
            <param name="dt1">The first datetime value</param>
            <param name="dt2">THe second datetime value</param>
            <returns></returns>
        </member>
        <member name="M:Atom.Core.DateTimeExtensions.ChangeYear(System.DateTime,System.Int32)">
            <summary>
            Changes the year value of a date time value
            </summary>
            <param name="dateTime">The targeted date time</param>
            <param name="value">The new year value</param>
            <returns></returns>
        </member>
        <member name="M:Atom.Core.DateTimeExtensions.ChangeMonth(System.DateTime,System.Int32)">
            <summary>
            Changes the month value of a date time value
            </summary>
            <param name="dateTime">The targeted date time</param>
            <param name="value">The new month value</param>
            <returns></returns>
        </member>
        <member name="M:Atom.Core.DateTimeExtensions.ChangeDay(System.DateTime,System.Int32)">
            <summary>
            Changes the day value of a date time value
            </summary>
            <param name="dateTime">The targeted date time</param>
            <param name="value">The new day value</param>
            <returns></returns>
        </member>
        <member name="M:Atom.Core.DateTimeExtensions.ChangeHour(System.DateTime,System.Int32)">
            <summary>
            Changes the hour value of a date time value
            </summary>
            <param name="dateTime">The targeted date time</param>
            <param name="value">The new hour value</param>
            <returns></returns>
        </member>
        <member name="M:Atom.Core.DateTimeExtensions.ChangeMinute(System.DateTime,System.Int32)">
            <summary>
            Changes the minute value of a date time value
            </summary>
            <param name="dateTime">The targeted date time</param>
            <param name="value">The new minute value</param>
            <returns></returns>
        </member>
        <member name="M:Atom.Core.DateTimeExtensions.ChangeSecond(System.DateTime,System.Int32)">
            <summary>
            Changes the second value of a date time value
            </summary>
            <param name="dateTime">The targeted date time</param>
            <param name="value">The new second value</param>
            <returns></returns>
        </member>
        <member name="M:Atom.Core.DateTimeExtensions.ToStartOfTheDay(System.DateTime)">
            <summary>
            Creates and returns a new <see cref="T:System.DateTime"/> with the same year,month and day
            as the specified <paramref name="dt"/> but with the time value set to 0
            </summary>
            <param name="dt">The date time</param>
            <returns></returns>
        </member>
        <member name="M:Atom.Core.DateTimeExtensions.ToEndOfTheDay(System.DateTime)">
            <summary>
            Creates and returns a new <see cref="T:System.DateTime"/> with the same year,month and day
            as the specified <paramref name="dt"/> but with the time value set to their maximum value
            </summary>
            <param name="dt">The date time</param>
            <returns></returns>
        </member>
        <member name="T:Atom.Core.DateTimeHelpers">
            <summary>
            Helper methods for <see cref="T:System.DateTime"/>
            </summary>
        </member>
        <member name="M:Atom.Core.DateTimeHelpers.FromUnixTimeMilliseconds(System.Int64)">
            <summary>
            Creates and returns a <see cref="T:System.DateTime"/> from the specified Unix timestamp milliseconds
            </summary>
            <param name="milliseconds">The milliseconds that represent a Unix timestamp</param>
            <returns></returns>
        </member>
        <member name="M:Atom.Core.DateTimeHelpers.FromUnixTimeSeconds(System.Int64)">
            <summary>
            Creates and returns a <see cref="T:System.DateTime"/> from the specified Unix timestamp seconds
            </summary>
            <param name="milliseconds">The seconds that represent a Unix timestamp</param>
            <returns></returns>
        </member>
        <member name="M:Atom.Core.DateTimeHelpers.GetDaysBetween(System.DateTime,System.DateTime)">
            <summary>
            Gets all the dates that represents days between the specified <paramref name="startDate"/> and the specified
            <paramref name="endDate"/>
            </summary>
            <param name="startDate">The start date</param>
            <param name="endDate">The end date</param>
            <returns></returns>
        </member>
        <member name="M:Atom.Core.DateTimeHelpers.GetMonthsBetween(System.DateTime,System.DateTime)">
            <summary>
            Gets all the dates that represent months between the specified <paramref name="startDate"/> and the specified
            <paramref name="endDate"/>
            </summary>
            <param name="startDate">The start date</param>
            <param name="endDate">The end date</param>
            <returns></returns>
        </member>
        <member name="M:Atom.Core.DateTimeHelpers.GetYearsBetween(System.DateTime,System.DateTime)">
            <summary>
            Gets all the dates that represent years between the specified <paramref name="startDate"/> and the specified
            <paramref name="endDate"/>
            </summary>
            <param name="startDate">The start date</param>
            <param name="endDate">The end date</param>
            <returns></returns>
        </member>
        <member name="T:Atom.Core.DecimalExtensions">
            <summary>
            Extension methods for <see cref="T:System.Decimal"/>
            </summary>
        </member>
        <member name="M:Atom.Core.DecimalExtensions.ToString(System.Decimal,System.Char)">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the specified <paramref name="d"/>
            using the <paramref name="separator"/> as the decimals separator
            </summary>
            <param name="d">The decimal</param>
            <param name="separator">The separator</param>
            <returns></returns>
        </member>
        <member name="M:Atom.Core.DecimalExtensions.Round(System.Decimal,System.Int32)">
            <summary>
            Rounds the specified <paramref name="d"/> to the specified <paramref name="decimals"/> places
            </summary>
            <param name="d">The decimal</param>
            <param name="decimals">The decimal places</param>
            <returns></returns>
        </member>
        <member name="T:Atom.Core.Numbers.DecimalHelpers">
            <summary>
            Helper methods related to <see cref="T:System.Decimal"/>
            </summary>
        </member>
        <member name="M:Atom.Core.Numbers.DecimalHelpers.CalculateCombinations(System.Decimal,System.Collections.Generic.IEnumerable{System.Decimal},System.Int32,System.Decimal)">
            <summary>
            Calculates the possible value combinations for <paramref name="target"/>, using the <paramref name="values"/>
            </summary>
            <param name="target">The target value</param>
            <param name="values">The values</param>
            <param name="numberOfUniqueBanknotes">The number of unique values that will make up the target</param>
            <param name="minimumBanknote">The minimum value that will make up the target</param>
        </member>
        <member name="T:Atom.Core.Numbers.FixedValue">
            <summary>
            Represents a value that is composed by another <see cref="P:Atom.Core.Numbers.FixedValue.Value"/> multiplied by <see cref="P:Atom.Core.Numbers.FixedValue.NumberOfValues"/> times
            </summary>
        </member>
        <member name="P:Atom.Core.Numbers.FixedValue.NumberOfValues">
            <summary>
            The number of used values
            </summary>
        </member>
        <member name="P:Atom.Core.Numbers.FixedValue.Value">
            <summary>
            The value
            </summary>
        </member>
        <member name="P:Atom.Core.Numbers.FixedValue.Total">
            <summary>
            The total
            </summary>
        </member>
        <member name="M:Atom.Core.Numbers.FixedValue.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Atom.Core.Numbers.FixedValue.ToString">
            <summary>
            Returns a string that represents the current object
            </summary>
            <returns></returns>
        </member>
        <member name="T:Atom.Core.Numbers.FixedValuesCombination">
            <summary>
            Represents a combination of <see cref="T:Atom.Core.Numbers.FixedValue"/>s
            </summary>
        </member>
        <member name="F:Atom.Core.Numbers.FixedValuesCombination.mFixedValues">
            <summary>
            The member of the <see cref="P:Atom.Core.Numbers.FixedValuesCombination.FixedValues"/> property
            </summary>
        </member>
        <member name="P:Atom.Core.Numbers.FixedValuesCombination.FixedValues">
            <summary>
            The fixed values
            </summary>
        </member>
        <member name="P:Atom.Core.Numbers.FixedValuesCombination.Total">
            <summary>
            The total values
            </summary>
        </member>
        <member name="M:Atom.Core.Numbers.FixedValuesCombination.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Atom.Core.Numbers.FixedValuesCombination.ToString">
            <summary>
            Returns a string that represents the current value
            </summary>
            <returns></returns>
        </member>
        <member name="M:Atom.Core.Numbers.FixedValuesCombination.Equals(System.Object)">
            <summary>
            Determines whether the specified object is equal to the current object.
            </summary>
            <param name="obj">The object to compare with the current object.</param>
            <returns></returns>
        </member>
        <member name="M:Atom.Core.Numbers.FixedValuesCombination.GetHashCode">
            <summary>
            Serves as the default hash function.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Atom.Core.DictionariesExtensions">
            <summary>
            Extension methods associated with <see cref="T:System.Collections.Generic.Dictionary`2"/>
            </summary>
        </member>
        <member name="M:Atom.Core.DictionariesExtensions.GetKeyFromValue``2(System.Collections.Generic.Dictionary{``0,``1},``1)">
            <summary>
            Gets the key linked with the specified <paramref name="value"/>
            </summary>
            <typeparam name="TKey">The type of the keys</typeparam>
            <typeparam name="TValue">The type of the values</typeparam>
            <param name="dictionary">The dictionary</param>
            <param name="value">The value contained in the dictionary</param>
            <returns></returns>
        </member>
        <member name="M:Atom.Core.DictionariesExtensions.DefaultOrValue``2(System.Collections.Generic.Dictionary{``0,``1},``0)">
            <summary>
            Returns the value linked with the specified <paramref name="key"/>
            or the default value if none is found.
            </summary>
            <typeparam name="TKey">The type of the keys</typeparam>
            <typeparam name="TValue">The type of the values</typeparam>
            <param name="dictionary">The dictionary</param>
            <param name="key">The key to search for a value</param>
            <returns></returns>
        </member>
        <member name="T:Atom.Core.DefaultApplicationEnvironment">
            <summary>
            The default implementation of the <see cref="T:Atom.Core.IApplicationEnvironment"/>
            </summary>
        </member>
        <member name="P:Atom.Core.DefaultApplicationEnvironment.ApplicationName">
            <summary>
            The application name
            </summary>
        </member>
        <member name="P:Atom.Core.DefaultApplicationEnvironment.ApplicationRootDirectoryPath">
            <summary>
            The directory where the application is stored
            </summary>
        </member>
        <member name="P:Atom.Core.DefaultApplicationEnvironment.Language">
            <summary>
            The <see cref="P:Atom.Core.LanguageDataModel.Shortcode"/> of the selected language
            </summary>
        </member>
        <member name="M:Atom.Core.DefaultApplicationEnvironment.#ctor(System.String,System.String)">
            <summary>
            Default constructor
            </summary>
            <param name="applicationName">The application name</param>
            <param name="language">The <see cref="P:Atom.Core.LanguageDataModel.Shortcode"/> of the selected language</param>
        </member>
        <member name="M:Atom.Core.DefaultApplicationEnvironment.GetApplicationDataDirectoryPath(System.Boolean@)">
            <summary>
            The main directory root path.
            Ex.: This is usually used for storing company specific data!
            Ex.: ./AppData/Roaming/{ApplicationName}/{CompanyId}!
            NOTE: If the directory doesn't exists, it gets created!
            </summary>
            <param name="created">
            A flag indicating whether the directory was created or it already existed.
            If <see cref="!:true"/> then the directory was created.
            If <see cref="!:false"/> then the directory already existed.
            </param>
        </member>
        <member name="M:Atom.Core.DefaultApplicationEnvironment.GetTempDirectoryPath(System.Boolean@)">
            <summary>
            The directory where temp files are stored.
            NOTE: If the directory doesn't exists, it gets created!
            </summary>
            <param name="created">
            A flag indicating whether the directory was created or it already existed.
            If <see cref="!:true"/> then the directory was created.
            If <see cref="!:false"/> then the directory already existed.
            </param>
        </member>
        <member name="M:Atom.Core.DefaultApplicationEnvironment.GetLogsDirectoryPath(System.Boolean@)">
            <summary>
            The directory where log files are stored.
            NOTE: If the directory doesn't exists, it gets created!
            </summary>
            <param name="created">
            A flag indicating whether the directory was created or it already existed.
            If <see cref="!:true"/> then the directory was created.
            If <see cref="!:false"/> then the directory already existed.
            </param>
        </member>
        <member name="M:Atom.Core.DefaultApplicationEnvironment.GetLocalDataStorageDirectoryPath(System.Boolean@)">
            <summary>
            The directory where the local data storages are stored.
            NOTE: If the directory doesn't exists, it gets created!
            </summary>
            <param name="created">
            A flag indicating whether the directory was created or it already existed.
            If <see cref="!:true"/> then the directory was created.
            If <see cref="!:false"/> then the directory already existed.
            </param>
        </member>
        <member name="M:Atom.Core.DefaultApplicationEnvironment.GetOptionsDirectoryPath(System.Boolean@)">
            <summary>
            The directory where the options are stored.
            NOTE: If the directory doesn't exists, it gets created!
            </summary>
            <param name="created">
            A flag indicating whether the directory was created or it already existed.
            If <see cref="!:true"/> then the directory was created.
            If <see cref="!:false"/> then the directory already existed.
            </param>
        </member>
        <member name="M:Atom.Core.DefaultApplicationEnvironment.GetLanguagePacksDirectoryPath(System.Boolean@)">
            <summary>
            The directory where the language packs are stored.
            NOTE: If the directory doesn't exists, it gets created!
            </summary>
            <param name="created">
            A flag indicating whether the directory was created or it already existed.
            If <see cref="!:true"/> then the directory was created.
            If <see cref="!:false"/> then the directory already existed.
            </param>
        </member>
        <member name="M:Atom.Core.DefaultApplicationEnvironment.ApplyRootExtension(System.String)">
            <summary>
            Applies a path extension to the specified <paramref name="path"/>
            </summary>
            <param name="path">The path</param>
            <returns></returns>
        </member>
        <member name="T:Atom.Core.DirectoryHelpers">
            <summary>
            Helper methods related to directories
            </summary>
        </member>
        <member name="F:Atom.Core.DirectoryHelpers.ExplorerProcessName">
            <summary>
            The explorer process name
            </summary>
        </member>
        <member name="M:Atom.Core.DirectoryHelpers.OpenDirectory(System.String)">
            <summary>
            Opens the directory with the specified <paramref name="path"/>
            </summary>
            <param name="path">The path</param>
        </member>
        <member name="T:Atom.Core.IdBasedApplicationEnvironment">
            <summary>
            A <see cref="T:Atom.Core.DefaultApplicationEnvironment"/> that uses a specified <see cref="P:Atom.Core.IdBasedApplicationEnvironment.Id"/> to build the directory paths
            </summary>
        </member>
        <member name="P:Atom.Core.IdBasedApplicationEnvironment.Id">
            <summary>
            The id
            </summary>
        </member>
        <member name="M:Atom.Core.IdBasedApplicationEnvironment.#ctor(System.String,System.String,System.String)">
            <summary>
            Default constructor
            </summary>
            <param name="applicationName">The application name</param>
            <param name="id">The id</param>
            <param name="language">The <see cref="P:Atom.Core.LanguageDataModel.Shortcode"/> of the selected language</param>
        </member>
        <member name="M:Atom.Core.IdBasedApplicationEnvironment.ApplyRootExtension(System.String)">
            <summary>
            Applies a path extension to the specified <paramref name="path"/>.
            Ex.: If <paramref name="path"/> is ./Application/PlugIns/Billing
                 the returned path will be ./Application/PlugIns/Billing/{Id}.
            NOTE: This is used for separating the plug in data based on the <see cref="P:Atom.Core.IdBasedApplicationEnvironment.Id"/>!
            NOTE: The <see cref="P:Atom.Core.IdBasedApplicationEnvironment.Id"/> is  usually the company id!
            </summary>
            <param name="path">The path</param>
            <returns></returns>
        </member>
        <member name="T:Atom.Core.CoreDI">
            <summary>
            The default services of the framework that should be available everywhere in the code
            </summary>
        </member>
        <member name="F:Atom.Core.CoreDI.mLocalization">
            <summary>
            The member of the <see cref="P:Atom.Core.CoreDI.Localization"/> property
            </summary>
        </member>
        <member name="M:Atom.Core.CoreDI.GetService``1(System.Action{``0})">
            <summary>
            Gets the requested service from the service provider
            </summary>
            <typeparam name="TService">
            The type of the service.
            NOTE: Some services require a different approach when retrieving them.
                  For example, some services , in order to function properly, require
                  some variables that their default parameterless constructors can't set.
                  In that case, use the methods located in the DI in their own library!
            </typeparam>
            <returns></returns>
        </member>
        <member name="M:Atom.Core.CoreDI.GetServices``1">
            <summary>
            Get an enumeration of services of type <typeparamref name="TService"/> from the service provider.
            </summary>
            <typeparam name="TService">The type of the service</typeparam>
            <returns></returns>
        </member>
        <member name="M:Atom.Core.CoreDI.GetService(System.Type)">
            <summary>
            Gets the requested service of the specified <paramref name="serviceType"/> from the service provider
            </summary>
            <param name="serviceType">The type of the service we want to get</param>
            <returns></returns>
        </member>
        <member name="P:Atom.Core.CoreDI.GetConfiguration">
            <summary>
            Gets the configuration
            </summary>
        </member>
        <member name="P:Atom.Core.CoreDI.GetLogger">
            <summary>
            Gets the default logger
            </summary>
        </member>
        <member name="P:Atom.Core.CoreDI.GetLoggerFactory">
            <summary>
            Gets the logger factory for creating loggers
            </summary>
        </member>
        <member name="P:Atom.Core.CoreDI.GetFrameworkEnvironment">
            <summary>
            Gets the framework environment
            </summary>
        </member>
        <member name="P:Atom.Core.CoreDI.GetFileManager">
            <summary>
            A shortcut to access the <see cref="T:Atom.Core.IFileManager"/>
            </summary>
        </member>
        <member name="P:Atom.Core.CoreDI.GetTaskManager">
            <summary>
            A shortcut to access the <see cref="T:Atom.Core.ITaskManager"/>
            </summary>
        </member>
        <member name="P:Atom.Core.CoreDI.GetApplicationEnvironment">
            <summary>
            A shortcut to access the <see cref="T:Atom.Core.IApplicationEnvironment"/>
            </summary>
        </member>
        <member name="P:Atom.Core.CoreDI.Localization">
            <summary>
            A shortcut to access the <see cref="T:Atom.Core.ILocalization"/>
            </summary>
        </member>
        <member name="T:Atom.Core.DIHelpers">
            <summary>
            Helper methods related to the DI
            </summary>
        </member>
        <member name="M:Atom.Core.DIHelpers.LoadFromFile``1(System.Linq.Expressions.Expression{System.Func{``0}},System.String)">
            <summary>
            
            </summary>
            <typeparam name="TKey">The type of the DI service</typeparam>
            <param name="diProperty">The DI property</param>
            <param name="assemblyFileName">The assembly file name</param>
        </member>
        <member name="T:Atom.Core.IApplicationEnvironment">
            <summary>
            Provides abstractions for the application environment
            </summary>
        </member>
        <member name="P:Atom.Core.IApplicationEnvironment.ApplicationName">
            <summary>
            The application name
            </summary>
        </member>
        <member name="P:Atom.Core.IApplicationEnvironment.ApplicationRootDirectoryPath">
            <summary>
            The directory where the application is stored
            </summary>
        </member>
        <member name="P:Atom.Core.IApplicationEnvironment.Language">
            <summary>
            The <see cref="P:Atom.Core.LanguageDataModel.Shortcode"/> of the selected language
            </summary>
        </member>
        <member name="M:Atom.Core.IApplicationEnvironment.GetApplicationDataDirectoryPath(System.Boolean@)">
            <summary>
            The main directory root path.
            Ex.: This is usually used for storing company specific data!
            Ex.: ./AppData/Roaming/{ApplicationName}/{CompanyId}!
            NOTE: If the directory doesn't exists, it gets created!
            </summary>
            <param name="created">
            A flag indicating whether the directory was created or it already existed.
            If <see cref="!:true"/> then the directory was created.
            If <see cref="!:false"/> then the directory already existed.
            </param>
        </member>
        <member name="M:Atom.Core.IApplicationEnvironment.GetTempDirectoryPath(System.Boolean@)">
            <summary>
            The directory where temp files are stored.
            NOTE: If the directory doesn't exists, it gets created!
            </summary>
            <param name="created">
            A flag indicating whether the directory was created or it already existed.
            If <see cref="!:true"/> then the directory was created.
            If <see cref="!:false"/> then the directory already existed.
            </param>
        </member>
        <member name="M:Atom.Core.IApplicationEnvironment.GetLogsDirectoryPath(System.Boolean@)">
            <summary>
            The directory where log files are stored.
            NOTE: If the directory doesn't exists, it gets created!
            </summary>
            <param name="created">
            A flag indicating whether the directory was created or it already existed.
            If <see cref="!:true"/> then the directory was created.
            If <see cref="!:false"/> then the directory already existed.
            </param>
        </member>
        <member name="M:Atom.Core.IApplicationEnvironment.GetLocalDataStorageDirectoryPath(System.Boolean@)">
            <summary>
            The directory where the local data storages are stored.
            NOTE: If the directory doesn't exists, it gets created!
            </summary>
            <param name="created">
            A flag indicating whether the directory was created or it already existed.
            If <see cref="!:true"/> then the directory was created.
            If <see cref="!:false"/> then the directory already existed.
            </param>
        </member>
        <member name="M:Atom.Core.IApplicationEnvironment.GetOptionsDirectoryPath(System.Boolean@)">
            <summary>
            The directory where the options are stored.
            NOTE: If the directory doesn't exists, it gets created!
            </summary>
            <param name="created">
            A flag indicating whether the directory was created or it already existed.
            If <see cref="!:true"/> then the directory was created.
            If <see cref="!:false"/> then the directory already existed.
            </param>
        </member>
        <member name="M:Atom.Core.IApplicationEnvironment.GetLanguagePacksDirectoryPath(System.Boolean@)">
            <summary>
            The directory where the language packs are stored.
            NOTE: If the directory doesn't exists, it gets created!
            </summary>
            <param name="created">
            A flag indicating whether the directory was created or it already existed.
            If <see cref="!:true"/> then the directory was created.
            If <see cref="!:false"/> then the directory already existed.
            </param>
        </member>
        <member name="M:Atom.Core.IApplicationEnvironment.ApplyRootExtension(System.String)">
            <summary>
            Applies a path extension to the specified <paramref name="path"/>
            usually taking into consideration the <see cref="M:Atom.Core.IApplicationEnvironment.GetApplicationDataDirectoryPath(System.Boolean@)"/> conditions.
            Ex.: If <paramref name="path"/> is ./Application/PlugIns/Billing
                 the returned path will be ./Application/PlugIns/Billing/{CompanyId}
            </summary>
            <param name="path">The path</param>
            <returns></returns>
        </member>
        <member name="T:Atom.Core.IFileManager">
            <summary>
            Handles reading/writing and querying the file system
            </summary>
        </member>
        <member name="M:Atom.Core.IFileManager.WriteTextToFileAsync(System.String,System.String,System.Boolean)">
            <summary>
            Writes the text to the specified file
            </summary>
            <param name="text">The text to write</param>
            <param name="path">The path of the file to write to</param>
            <param name="append">If true, writes the text to the end of the file, otherwise overrides any existing file</param>
            <returns></returns>
        </member>
        <member name="M:Atom.Core.IFileManager.WriteTextToFileAsync(System.String,System.String,System.Text.Encoding,System.Boolean)">
            <summary>
            Writes the text to the specified file
            </summary>
            <param name="text">The text to write</param>
            <param name="path">The path of the file to write to</param>
            <param name="encoding">The encoding</param>
            <param name="append">If true, writes the text to the end of the file, otherwise overrides any existing file</param>
            <returns></returns>
        </member>
        <member name="M:Atom.Core.IFileManager.NormalizePath(System.String)">
            <summary>
            Normalizing a path based on the current operating system
            </summary>
            <param name="path">The path to normalize</param>
            <returns></returns>
        </member>
        <member name="M:Atom.Core.IFileManager.ResolvePath(System.String)">
            <summary>
            Resolves any relative elements of the path to absolute
            </summary>
            <param name="path">The path to resolve</param>
            <returns></returns>
        </member>
        <member name="T:Atom.Core.ITaskManager">
            <summary>
            Handles anything to do with Tasks
            </summary>
        </member>
        <member name="M:Atom.Core.ITaskManager.LockTaskAsync(System.Linq.Expressions.Expression{System.Func{System.Boolean}},System.Func{System.Threading.Tasks.Task})">
            <summary>
            Runs the task if the updating flag is not set.
            If the flag is true (indicating the task is already running) then the task is not run.
            If the flag is false (indicating no running task) then the task is run.
            Once the task is finished if it was run, then the flag is reset to false.
            NOTE: This method doesn't queue tasks, it only prevents them from running!
            </summary>
            <param name="activeFlag">The boolean property flag defining if the task is already running</param>
            <param name="task">The task to run if it's not already running</param>
            <returns></returns>
        </member>
        <member name="M:Atom.Core.ITaskManager.LockTaskAsync``1(System.Linq.Expressions.Expression{System.Func{System.Boolean}},System.Func{System.Threading.Tasks.Task{``0}},``0)">
            <summary>
            Runs the task if the updating flag is not set.
            If the flag is true (indicating the task is already running) then the task is not run.
            If the flag is false (indicating no running task) then the task is run.
            Once the task is finished if it was run, then the flag is reset to false.
            NOTE: This method doesn't queue tasks, it only prevents them from running!
            </summary>
            <typeparam name="T">The type of the return value of the task</typeparam>
            <param name="activeFlag">The boolean property flag defining if the task is already running</param>
            <param name="task">The task to run if it's not already running</param>
            <param name="defaultValue">The default value to return if the task is already running</param>
            <returns></returns>
        </member>
        <member name="M:Atom.Core.ITaskManager.RunAndForget(System.Func{System.Threading.Tasks.Task},System.String,System.String,System.Int32)">
            <summary>
            Queues the specified work to run on the thread pool and returns a proxy for the
            task returned by function.
            </summary>
            <param name="function">The work to execute asynchronously</param>
            <param name="origin">The method/function this message was logged in</param>
            <param name="filePath">The code filename that this message was logged from</param>
            <param name="lineNumber">The line of code in the filename this message was logged from</param>
            <remarks>
            The passed in Task can't be awaited as it is not required to!
            Any errors that may occurre are being logged by the logger
            </remarks>
            <returns>A task that represents a proxy for the task returned by function.</returns>
            <exception cref="T:System.ArgumentNullException">The function parameter was null.</exception>
        </member>
        <member name="M:Atom.Core.ITaskManager.Run(System.Func{System.Threading.Tasks.Task},System.String,System.String,System.Int32)">
            <summary>
            Queues the specified work to run on the thread pool and returns a proxy for the
            task returned by function.
            </summary>
            <param name="function">The work to execute asynchronously</param>
            <param name="origin">The method/function this message was logged in</param>
            <param name="filePath">The code filename that this message was logged from</param>
            <param name="lineNumber">The line of code in the filename this message was logged from</param>
            <returns>A task that represents a proxy for the task returned by function.</returns>
            <exception cref="T:System.ArgumentNullException">The function parameter was null.</exception>
        </member>
        <member name="M:Atom.Core.ITaskManager.Run``1(System.Func{System.Threading.Tasks.Task{``0}},System.Threading.CancellationToken,System.String,System.String,System.Int32)">
            <summary>
            Queues the specified work to run on the thread pool and returns a proxy for the
            Task(TResult) returned by function.
            </summary>
            <typeparam name="TResult">The type of the result returned by the proxy task.</typeparam>
            <param name="function">The work to execute asynchronously</param>
            <param name="cancellationToken">A cancellation token that should be used to cancel the work</param>
            <param name="origin">The method/function this message was logged in</param>
            <param name="filePath">The code filename that this message was logged from</param>
            <param name="lineNumber">The line of code in the filename this message was logged from</param>
            <returns>A Task(TResult) that represents a proxy for the Task(TResult) returned by function.</returns>
            <exception cref="T:System.ArgumentNullException">The function parameter was null.</exception>
            <exception cref="T:System.Threading.Tasks.TaskCanceledException">The task has been canceled.</exception>
            <exception cref="T:System.ObjectDisposedException">The System.Threading.CancellationTokenSource associated with cancellationToken was disposed.</exception>
        </member>
        <member name="M:Atom.Core.ITaskManager.Run``1(System.Func{System.Threading.Tasks.Task{``0}},System.String,System.String,System.Int32)">
            <summary>
            Queues the specified work to run on the thread pool and returns a proxy for the
            Task(TResult) returned by function.
            </summary>
            <typeparam name="TResult">The type of the result returned by the proxy task.</typeparam>
            <param name="function">The work to execute asynchronously</param>
            <param name="origin">The method/function this message was logged in</param>
            <param name="filePath">The code filename that this message was logged from</param>
            <param name="lineNumber">The line of code in the filename this message was logged from</param>
            <returns>A Task(TResult) that represents a proxy for the Task(TResult) returned by function.</returns>
            <exception cref="T:System.ArgumentNullException">The function parameter was null.</exception>
        </member>
        <member name="M:Atom.Core.ITaskManager.Run``1(System.Func{``0},System.Threading.CancellationToken,System.String,System.String,System.Int32)">
            <summary>
            Queues the specified work to run on the thread pool and returns a Task(TResult)
            object that represents that work. A cancellation token allows the work to be
            canceled.
            </summary>
            <typeparam name="TResult">The result type of the task.</typeparam>
            <param name="function">The work to execute asynchronously</param>
            <param name="cancellationToken">A cancellation token that should be used to cancel the work</param>
            <param name="origin">The method/function this message was logged in</param>
            <param name="filePath">The code filename that this message was logged from</param>
            <param name="lineNumber">The line of code in the filename this message was logged from</param>
            <returns>A Task(TResult) that represents the work queued to execute in the thread pool.</returns>
            <exception cref="T:System.ArgumentNullException">The function parameter was null.</exception>
            <exception cref="T:System.Threading.Tasks.TaskCanceledException">The task has been canceled.</exception>
            <exception cref="T:System.ObjectDisposedException">The System.Threading.CancellationTokenSource associated with cancellationToken was disposed.</exception>
        </member>
        <member name="M:Atom.Core.ITaskManager.Run``1(System.Func{``0},System.String,System.String,System.Int32)">
            <summary>
            Queues the specified work to run on the thread pool and returns a System.Threading.Tasks.Task`1
            object that represents that work.
            </summary>
            <typeparam name="TResult">The return type of the task.</typeparam>
            <param name="function">The work to execute asynchronously.</param>
            <param name="origin">The method/function this message was logged in</param>
            <param name="filePath">The code filename that this message was logged from</param>
            <param name="lineNumber">The line of code in the filename this message was logged from</param>
            <returns>A task object that represents the work queued to execute in the thread pool.</returns>
            <exception cref="T:System.ArgumentNullException">The function parameter was null.</exception>
        </member>
        <member name="M:Atom.Core.ITaskManager.Run(System.Func{System.Threading.Tasks.Task},System.Threading.CancellationToken,System.String,System.String,System.Int32)">
            <summary>
            Queues the specified work to run on the thread pool and returns a proxy for the
            task returned by function.
            </summary>
            <param name="function">The work to execute asynchronously.</param>
            <param name="cancellationToken">A cancellation token that should be used to cancel the work.</param>
            <param name="origin">The method/function this message was logged in</param>
            <param name="filePath">The code filename that this message was logged from</param>
            <param name="lineNumber">The line of code in the filename this message was logged from</param>
            <returns>A task that represents a proxy for the task returned by function.</returns>
            <exception cref="T:System.ArgumentNullException">The function parameter was null.</exception>
            <exception cref="T:System.Threading.Tasks.TaskCanceledException">The task has been canceled.</exception>
            <exception cref="T:System.ObjectDisposedException">The System.Threading.CancellationTokenSource associated with cancellationToken was disposed.</exception>
        </member>
        <member name="M:Atom.Core.ITaskManager.Run(System.Action,System.Threading.CancellationToken,System.String,System.String,System.Int32)">
            <summary>
            Queues the specified work to run on the thread pool and returns a System.Threading.Tasks.Task
            object that represents that work. A cancellation token allows the work to be
            canceled.
            </summary>
            <param name="action">The work to execute asynchronously</param>
            <param name="cancellationToken">A cancellation token that can be used to cancel the work</param>
            <param name="origin">The method/function this message was logged in</param>
            <param name="filePath">The code filename that this message was logged from</param>
            <param name="lineNumber">The line of code in the filename this message was logged from</param>
            <returns>A task that represents the work queued to execute in the thread pool.</returns>
            <exception cref="T:System.ArgumentNullException">The action parameter was null.</exception>
            <exception cref="T:System.Threading.Tasks.TaskCanceledException">The task has been canceled.</exception>
            <exception cref="T:System.ObjectDisposedException">The System.Threading.CancellationTokenSource associated with cancellationToken was disposed.</exception>
        </member>
        <member name="M:Atom.Core.ITaskManager.Run(System.Action,System.String,System.String,System.Int32)">
            <summary>
            Queues the specified work to run on the thread pool and returns a System.Threading.Tasks.Task
            object that represents that work.
            </summary>
            <param name="action">The work to execute asynchronously</param>
            <param name="origin">The method/function this message was logged in</param>
            <param name="filePath">The code filename that this message was logged from</param>
            <param name="lineNumber">The line of code in the filename this message was logged from</param>
            <returns>A task that represents the work queued to execute in the ThreadPool.</returns>
            <exception cref="T:System.ArgumentNullException">The action parameter was null.</exception>
        </member>
        <member name="T:Atom.Core.DoublesExtensions">
            <summary>
            Extension methods for <see cref="T:System.Double"/>
            </summary>
        </member>
        <member name="M:Atom.Core.DoublesExtensions.IsNaN(System.Double)">
            <summary>
            Checks if the specified <paramref name="d"/> is not a number and returns true if it is and false if it isn't
            </summary>
            <param name="d">The double value to check</param>
            <returns></returns>
        </member>
        <member name="M:Atom.Core.DoublesExtensions.ToString(System.Double,System.Char)">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the specified <paramref name="d"/>
            using the <paramref name="separator"/> as the decimals separator
            </summary>
            <param name="d">The double</param>
            <param name="separator">The separator</param>
            <returns></returns>
        </member>
        <member name="T:Atom.Core.EnumHelpers">
            <summary>
            Helper methods for <see cref="T:System.Enum"/>
            </summary>
        </member>
        <member name="M:Atom.Core.EnumHelpers.GetEnumValues``1">
            <summary>
            Gets the values of an enum of type <typeparamref name="T"/>
            </summary>
            <typeparam name="T">The type of the enum</typeparam>
            <returns></returns>
        </member>
        <member name="P:Atom.Core.DefaultFrameworkEnvironment.IsDevelopment">
            <summary>
            True if we are in a development (specifically, debuggable) environment
            </summary>
        </member>
        <member name="P:Atom.Core.DefaultFrameworkEnvironment.Configuration">
            <summary>
            The configuration of the environment, either Development or Production
            </summary>
        </member>
        <member name="P:Atom.Core.DefaultFrameworkEnvironment.IsMobile">
            <summary>
            Determines (crudely) if we are a mobile (Xamarin) platform.
            This is a temporary, fragile check until it is officially supported 
            https://github.com/dotnet/corefx/issues/27417
            </summary>
        </member>
        <member name="P:Atom.Core.IFrameworkEnvironment.Configuration">
            <summary>
            The configuration of the environment, typically Development or Production
            </summary>
        </member>
        <member name="P:Atom.Core.IFrameworkEnvironment.IsDevelopment">
            <summary>
            True if we are in a development (specifically, debuggable) environment
            </summary>
        </member>
        <member name="P:Atom.Core.IFrameworkEnvironment.IsMobile">
            <summary>
            Indicates if we are a mobile platform
            </summary>
        </member>
        <member name="T:Atom.Core.ExceptionExtensions">
            <summary>
            Extension methods for <see cref="T:System.Exception"/>
            </summary>
        </member>
        <member name="M:Atom.Core.ExceptionExtensions.AggregateExceptionMessages(System.Exception)">
            <summary>
            Aggregates the <see cref="P:System.Exception.Message"/> in the <paramref name="exception"/> exception stack trace
            </summary>
            <param name="exception">The exception</param>
            <returns></returns>
        </member>
        <member name="T:Atom.Core.ExpressionHelpers">
            <summary>
            Helper methods related to <see cref="T:System.Linq.Expressions.Expression"/>s
            </summary>
        </member>
        <member name="M:Atom.Core.ExpressionHelpers.CreatePropertySelectorExpression(System.Type,System.Reflection.PropertyInfo)">
            <summary>
            Generates an expression of type <see cref="!:Expression&lt;Func&lt;TClass,TProperty&gt;&gt;"/>.
            NOTE: The compile time expression would look like: "i => i.Prop"!
            </summary>
            <param name="type">The type of the object that contains the <paramref name="propertyInfo"/></param>
            <param name="propertyInfo">The property info</param>
            <returns></returns>
        </member>
        <member name="M:Atom.Core.ExpressionHelpers.CreatePropertyContainsExpression(System.Type,System.Reflection.PropertyInfo,System.String)">
            <summary>
            Generates an expression of type <see cref="!:Expression&lt;Func&lt;TClass, bool&gt;&gt;"/>.
            NOTE: The compile time expression would look like: "x => x.Prop.Contains(value)"!
            NOTE: The property type must be a <see cref="T:System.String"/>!
            </summary>
            <param name="type">The type of the object that contains the <paramref name="propertyInfo"/></param>
            <param name="propertyInfo">The property info</param>
            <param name="value">The value used by the <see cref="M:System.String.Contains(System.String)"/> method</param>
            <returns></returns>
        </member>
        <member name="M:Atom.Core.ExpressionHelpers.CreatePropertyEqualityExpression(System.Type,System.Reflection.PropertyInfo,System.Object,Atom.Core.NumericEqualityOperator)">
            <summary>
            Generates an expression of type <see cref="!:Expression&lt;Func&lt;TClass, bool&gt;&gt;"/>.
            NOTE: One of the compile time expressions would look like: x => x.Prop >= value!
            NOTE: The <paramref name="value"/> must be of the same type as the type of the <paramref name="propertyInfo"/>!
            </summary>
            <param name="type">The type of the object that contains the <paramref name="propertyInfo"/></param>
            <param name="propertyInfo">The property info</param>
            <param name="value">The value that will be compared against the property</param>
            <param name="equalityOperator">The equality operator</param>
            <returns></returns>
        </member>
        <member name="T:Atom.Core.ExpressionsExtenstions">
            <summary>
            A helper for expressions
            </summary>
        </member>
        <member name="M:Atom.Core.ExpressionsExtenstions.GetValue``1(System.Linq.Expressions.Expression{System.Func{``0}})">
            <summary>
            Compiles an expression and gets the functions return value.
            NOTE: This method can be used to retrieve a value from a class member as well!
            </summary>
            <typeparam name="T">The type of return value</typeparam>
            <param name="lambda">The expression to compile</param>
            <returns></returns>
        </member>
        <member name="M:Atom.Core.ExpressionsExtenstions.GetValue``2(System.Linq.Expressions.Expression{System.Func{``0,``1}},``0)">
            <summary>
            Compiles an expression and gets the functions return value.
            NOTE: This method can be used to retrieve a value from a class member as well!
            </summary>
            <typeparam name="In">The type that is inserted to the function</typeparam>
            <typeparam name="T">The type of return value</typeparam>
            <param name="lambda">The expression to compile</param>
            <param name="input">The input parameter</param>
            <returns></returns>
        </member>
        <member name="M:Atom.Core.ExpressionsExtenstions.SetPropertyValue``1(System.Linq.Expressions.Expression{System.Func{``0}},``0)">
            <summary>
            Sets the underlying properties value to the given value
            from an expression that contains the property
            </summary>
            <typeparam name="T">The type of value to set</typeparam>
            <param name="lambda">The expression</param>
            <param name="value">The value to set the property to</param>
        </member>
        <member name="M:Atom.Core.ExpressionsExtenstions.SetPropertyValue``2(System.Linq.Expressions.Expression{System.Func{``1}},``0,``1)">
            <summary>
            Sets the underlying properties value to the given value
            from an expression that contains the property
            </summary>
            <typeparam name="In">The type that is inserted to the function</typeparam>
            <typeparam name="T">The type of value to set</typeparam>
            <param name="lambda">The expression</param>
            <param name="input">The input parameter</param>
            <param name="value">The value to set the property to</param>
        </member>
        <member name="M:Atom.Core.ExpressionsExtenstions.SetMemberValue``1(System.Linq.Expressions.Expression{System.Func{``0}},``0)">
            <summary>
            Sets the underlying members value to the given value
            from an expression that contains the property
            </summary>
            <typeparam name="T">The type of value to set</typeparam>
            <param name="lambda">The expression</param>
            <param name="value">The value to set the property to</param>
        </member>
        <member name="M:Atom.Core.ExpressionsExtenstions.GetPropertyInfo``2(System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Boolean)">
            <summary>
            Gets the property info of the targeted property
            </summary>
            <typeparam name="TSource">The type of the container of the property</typeparam>
            <typeparam name="TProperty">The type of the target property</typeparam>
            <param name="propertyExpression">The expression targeting the property</param>
            <param name="allowMethodProperties">If true, then the properties that their values are a product of other properties are allowed, otherwise they are not!</param>
            <returns></returns>
        </member>
        <member name="M:Atom.Core.ExpressionsExtenstions.GetPropertyInfo``1(System.Linq.Expressions.Expression{System.Func{``0}},System.Boolean)">
            <summary>
            Gets the property info of the targeted property
            </summary>
            <typeparam name="TProperty">The type of the target property</typeparam>
            <param name="propertyExpression">The expression targeting the property</param>
            <param name="allowMethodProperties">If true, then the properties that their values are a product of other properties are allowed, otherwise they are not!</param>
            <returns></returns>
        </member>
        <member name="M:Atom.Core.ExpressionsExtenstions.ToExpression``2(System.Func{``0,``1})">
            <summary>
            Converts the given <paramref name="method"/> to an expression
            </summary>
            <typeparam name="T">The type of the input parameter of the method</typeparam>
            <typeparam name="TResult">The type of the result of the method</typeparam>
            <param name="method">The method to convert to an expression</param>
            <returns></returns>
        </member>
        <member name="M:Atom.Core.ExpressionsExtenstions.ToFunc``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})">
            <summary>
            Extracts the method from the given <paramref name="expression"/>
            </summary>
            <typeparam name="T">The type of the input parameter of the method</typeparam>
            <typeparam name="TResult">The type of the result of the method</typeparam>
            <param name="expression">The expression to extract the method from</param>
            <returns></returns>
        </member>
        <member name="T:Atom.Core.BaseFileManager">
            <summary>
            Handles reading/writing and querying the file system
            </summary>
        </member>
        <member name="M:Atom.Core.BaseFileManager.WriteTextToFileAsync(System.String,System.String,System.Text.Encoding,System.Boolean)">
            <summary>
            Writes the text to the specified file
            </summary>
            <param name="text">The text to write</param>
            <param name="path">The path of the file to write to</param>
            <param name="encoding">The encoding</param>
            <param name="append">If true, writes the text to the end of the file, otherwise overrides any existing file</param>
            <returns></returns>
        </member>
        <member name="M:Atom.Core.BaseFileManager.WriteTextToFileAsync(System.String,System.String,System.Boolean)">
            <summary>
            Writes the text to the specified file
            </summary>
            <param name="text">The text to write</param>
            <param name="path">The path of the file to write to</param>
            <param name="append">If true, writes the text to the end of the file, otherwise overrides any existing file</param>
            <returns></returns>
        </member>
        <member name="M:Atom.Core.BaseFileManager.NormalizePath(System.String)">
            <summary>
            Normalizing a path based on the current operating system
            </summary>
            <param name="path">The path to normalize</param>
            <returns></returns>
        </member>
        <member name="M:Atom.Core.BaseFileManager.ResolvePath(System.String)">
            <summary>
            Resolves any relative elements of the path to absolute
            </summary>
            <param name="path">The path to resolve</param>
            <returns></returns>
        </member>
        <member name="T:Atom.Core.FileConstants">
            <summary>
            Constants related to files
            </summary>
        </member>
        <member name="P:Atom.Core.FileConstants.ImagesExtensions">
            <summary>
            The image file extensions
            </summary>
        </member>
        <member name="T:Atom.Core.FileHelpers">
            <summary>
            Helper methods related to files
            </summary>
        </member>
        <member name="M:Atom.Core.FileHelpers.OpenFile(System.String)">
            <summary>
            Attempts to open the file specified by the <paramref name="fileName"/> by the most appropriate OS application
            </summary>
            <param name="fileName">The directory path and the file name of the file</param>
        </member>
        <member name="M:Atom.Core.FileHelpers.PreviewHTMLAsync(System.String,System.String)">
            <summary>
            Generates a temp HTML file used for opening it with a browser
            </summary>
            <param name="directoryPath">The directory path of the directory where the file will get stored</param>
            <param name="html">The HTML text</param>
            <returns></returns>
        </member>
        <member name="T:Atom.Core.DefaultFrameworkConstruction">
            <summary>
            The default framework construction containing all the default services
            </summary>
        </member>
        <member name="M:Atom.Core.DefaultFrameworkConstruction.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Atom.Core.DefaultFrameworkConstruction.#ctor(System.Action{Microsoft.Extensions.Configuration.IConfigurationBuilder})">
            <summary>
            Constructor with configuration options
            </summary>
        </member>
        <member name="T:Atom.Core.FrameworkConstruction">
            <summary>
            The construction information when starting up and building the framework
            </summary>
        </member>
        <member name="F:Atom.Core.FrameworkConstruction.mServices">
            <summary>
            The services that will get used and compiled once the framework is builded
            </summary>
        </member>
        <member name="P:Atom.Core.FrameworkConstruction.Provider">
            <summary>
            The provider that will give as access to the services
            </summary>
        </member>
        <member name="P:Atom.Core.FrameworkConstruction.Services">
            <summary>
            The services that are injected
            </summary>
        </member>
        <member name="P:Atom.Core.FrameworkConstruction.Environment">
            <summary>
            The environment used for the Framework
            </summary>
        </member>
        <member name="P:Atom.Core.FrameworkConstruction.Configuration">
            <summary>
            The configuration used for the Framework
            </summary>
        </member>
        <member name="M:Atom.Core.FrameworkConstruction.#ctor(System.Boolean)">
            <summary>
            Default constructor
            </summary>
            <param name="createServiceCollection">If true, a new <see cref="T:Microsoft.Extensions.DependencyInjection.ServiceCollection"/> will be created for the Services</param>
        </member>
        <member name="M:Atom.Core.FrameworkConstruction.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Atom.Core.FrameworkConstruction.Build(System.IServiceProvider)">
            <summary>
            Builds the service collection into a service provider
            </summary>
        </member>
        <member name="M:Atom.Core.FrameworkConstruction.UseHostedServices(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            Uses the given service collection in the framework. 
            Typically used in an ASP.Net Core environment where
            the ASP.Net server has its own collection.
            </summary>
            <param name="services">The services to use</param>
            <returns></returns>
        </member>
        <member name="M:Atom.Core.FrameworkConstruction.UseConfiguration(Microsoft.Extensions.Configuration.IConfiguration)">
            <summary>
            Uses the given configuration in the framework
            </summary>
            <param name="configuration">The configuration to use</param>
            <returns></returns>
        </member>
        <member name="M:Atom.Core.FrameworkConstructionExtensions.Build(Atom.Core.FrameworkConstruction,System.Boolean)">
            <summary>
            Should be called once a Framework Construction is finished and we want to build it and
            start our application
            </summary>
            <param name="construction">The construction</param>
            <param name="logStarted">Specifies if the Framework Started message should be logged</param>
        </member>
        <member name="M:Atom.Core.FrameworkConstructionExtensions.AddDefaultConfiguration(Atom.Core.FrameworkConstruction,System.Action{Microsoft.Extensions.Configuration.IConfigurationBuilder})">
            <summary>
            Configures a framework construction in the default way
            </summary>
            <param name="construction">The construction to configure</param>
            <param name="configure">The custom configuration action</param>
            <returns></returns>
        </member>
        <member name="M:Atom.Core.FrameworkConstructionExtensions.AddConfiguration(Atom.Core.FrameworkConstruction,Microsoft.Extensions.Configuration.IConfiguration)">
            <summary>
            Configures a framework construction using the provided configuration
            </summary>
            <param name="construction">The construction to configure</param>
            <param name="configuration">The configuration</param>
            <returns></returns>
        </member>
        <member name="M:Atom.Core.FrameworkConstructionExtensions.AddDefaultServices(Atom.Core.FrameworkConstruction)">
            <summary>
            Injects all of the default services used by Framework for a quicker and cleaner setup
            </summary>
            <param name="construction">The construction</param>
            <returns></returns>
        </member>
        <member name="M:Atom.Core.FrameworkConstructionExtensions.AddDefaultLogger(Atom.Core.FrameworkConstruction)">
            <summary>
            Injects the default logger into the framework construction
            </summary>
            <param name="construction">The construction</param>
            <returns></returns>
        </member>
        <member name="M:Atom.Core.FrameworkConstructionExtensions.AddDefaultTaskManager(Atom.Core.FrameworkConstruction)">
            <summary>
            Injects the default task manager into the framework construction
            </summary>
            <param name="construction">The construction</param>
            <returns></returns>
        </member>
        <member name="M:Atom.Core.FrameworkConstructionExtensions.AddDefaultFileManager(Atom.Core.FrameworkConstruction)">
            <summary>
            Injects the default file manager into the framework construction
            </summary>
            <param name="construction">The construction</param>
            <returns></returns>
        </member>
        <member name="M:Atom.Core.FrameworkConstructionExtensions.AddDefaultApplicationEnvironment(Atom.Core.FrameworkConstruction,System.String,System.String)">
            <summary>
            Injects the <see cref="T:Atom.Core.DefaultApplicationEnvironment"/> into the framework construction
            </summary>
            <param name="applicationName">The application name</param>
            <param name="language">The <see cref="P:Atom.Core.LanguageDataModel.Shortcode"/> of the selected language</param>
            <param name="construction">The construction</param>
            <returns></returns>
        </member>
        <member name="M:Atom.Core.FrameworkConstructionExtensions.AddIdBasedApplicationEnvironmentProvider(Atom.Core.FrameworkConstruction,System.String,System.String,System.String)">
            <summary>
            Injects the <see cref="T:Atom.Core.IdBasedApplicationEnvironment"/> into the framework construction
            </summary>
            <param name="construction">The construction</param>
            <param name="applicationName">The application name</param>
            <param name="id">
            The id.
            NOTE: The id is usually the company id of the connected company!
            </param>
            <param name="language">The <see cref="P:Atom.Core.LanguageDataModel.Shortcode"/> of the selected language</param>
            <returns></returns>
        </member>
        <member name="M:Atom.Core.FrameworkConstructionExtensions.AddApplicationEnvironment(Atom.Core.FrameworkConstruction,Atom.Core.IApplicationEnvironment)">
            <summary>
            Injects the specified <paramref name="applicationEnvironment"/> into the framework construction
            </summary>
            <param name="construction">The construction</param>
            <param name="applicationEnvironment">The application environment</param>
            <returns></returns>
        </member>
        <member name="T:Atom.Core.HostedFrameworkConstruction">
            <summary>
            Creates a default framework construction containing all 
            the default configuration and services, when used inside
            a project that has it's own service provider such as an
            ASP.Net Core website
            </summary>
        </member>
        <member name="M:Atom.Core.HostedFrameworkConstruction.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="P:Atom.Core.Framework.Construction">
            <summary>
            The framework construction used in this application
            </summary>
            <remarks>This should be set at the very start of the application!</remarks>
            <example>
                <code>
                    Framework.Construct.DefaultFrameworkConstruction();
                </code>
            </example>
        </member>
        <member name="P:Atom.Core.Framework.Provider">
            <summary>
            The dependency injection service provider
            </summary>
        </member>
        <member name="M:Atom.Core.Framework.Build(System.IServiceProvider,System.Boolean)">
            <summary>
            Should be called once a Framework Construction is finished and we want to build it and
            start our application in a hosted environment where the service provider is already built
            such as ASP.Net Core applications
            </summary>
            <param name="provider">The provider</param>
            <param name="logStarted">Specifies if the Framework Started message should be logged</param>
        </member>
        <member name="M:Atom.Core.Framework.Construct``1">
            <summary>
            The initial call to setting up and using the Framework
            </summary>
            <typeparam name="T">The type of construction to use</typeparam>
        </member>
        <member name="M:Atom.Core.Framework.Construct``1(``0)">
            <summary>
            The initial call to setting up and using the Framework.
            </summary>
            <typeparam name="T">The type of construction to use</typeparam>
            <param name="constructionInstance">The instance of the construction to use</param>
        </member>
        <member name="M:Atom.Core.Framework.Service``1">
            <summary>
            Shortcut to Framework.Provider.GetService to get an injected service of type <typeparamref name="T"/>
            </summary>
            <typeparam name="T">The type of service to get</typeparam>
            <returns></returns>
        </member>
        <member name="T:Atom.Core.GenericsExtensions">
            <summary>
            Extensions that can be applied on generic types
            </summary>
        </member>
        <member name="M:Atom.Core.GenericsExtensions.CompareAny``1(``0,``0)">
            <summary>
            Compares to generic values
            </summary>
            <remarks>
            This method can be used to compare any two generic values no matter if it is a reference or a value type!
            </remarks>
            <typeparam name="T">The type of the values</typeparam>
            <param name="firstValue">The first value</param>
            <param name="secondValue">THe second value</param>
            <returns></returns>
        </member>
        <member name="T:Atom.Core.GenericsHelpers">
            <summary>
            Helper methods associated with generics
            </summary>
        </member>
        <member name="M:Atom.Core.GenericsHelpers.CreateInstance``1(System.Boolean,System.Object[])">
            <summary>
            Creates and returns a new instance of type <typeparamref name="T"/>
            </summary>
            <typeparam name="T">The type of the instance we want to create</typeparam>
            <param name="tryParameterlessConstructorIfFail">
            A flag indicating whether we should try to create the instance using the parameterless constructor if the
            initialization using parameters fails
            </param>
            <param name="parameters">The parameters of the constructor we want to user</param>
            <returns></returns>
        </member>
        <member name="M:Atom.Core.GenericsHelpers.ImplementsNonGenericInterface``2">
            <summary>
            Checks if the specified <typeparamref name="T"/> implements a non generic interface of type <typeparamref name="TInterface"/>
            </summary>
            <typeparam name="T">The type of the item</typeparam>
            <typeparam name="TInterface">The type of the interface we want to check if the item implements</typeparam>
            <returns></returns>
        </member>
        <member name="M:Atom.Core.GenericsHelpers.IsEnumerable(System.Type)">
            <summary>
            Checks if the specified <paramref name="type"/> is an <see cref="T:System.Collections.IEnumerable"/>
            </summary>
            <param name="type">The type to check if implements the <see cref="T:System.Collections.IEnumerable"/> interface</param>
            <returns></returns>
        </member>
        <member name="M:Atom.Core.GenericsHelpers.GetEnumerableType(System.Type)">
            <summary>
            Gets the generic type of the first <see cref="T:System.Collections.Generic.IEnumerable`1"/> interface that it implements
            </summary>
            <param name="type">The type to check</param>
            <returns></returns>
        </member>
        <member name="T:Atom.Core.GeometryHelpers">
            <summary>
            Helper methods for circle shapes
            </summary>
        </member>
        <member name="M:Atom.Core.GeometryHelpers.CalculatePositionInCircle(System.Double@,System.Double@,System.Double,System.Int32,System.Int32,System.Int32,System.Int32,System.Double,System.Double)">
            <summary>
            Calculates the position of the control based on the total controls and the control's index on a circle
            </summary>
            <param name="x">The calculated x-coordinate</param>
            <param name="y">The calculated y-coordinate</param>
            <param name="radius">The radius of the circle</param>
            <param name="width">The width of the control</param>
            <param name="height">THe height of the control</param>
            <param name="numberOfControls">The number of controls this circle has</param>
            <param name="controlIndex">The position of this control relative to the other. The starting index is 0</param>
            <param name="leftOffset">The extra distance of the circle from the left side</param>
            <param name="topOffset">The extra distance of the circle from the top side</param>
            <returns></returns>
        </member>
        <member name="M:Atom.Core.GeometryHelpers.CalculatePositionAngle(System.Int32,System.Int32)">
            <summary>
            Calculates the angle of a position given the total number of positions and the position's index
            </summary>
            <param name="numberOfPosititions">The number of positions</param>
            <param name="positionIndex">The index of the position we want to calculate the angle</param>
            <returns></returns>
        </member>
        <member name="M:Atom.Core.GeometryHelpers.CalculateCenterElementPositionInParent(System.Double@,System.Double@,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Calculates the best suitable location for the requested element trying to center it to based to the requested location
            </summary>
            <param name="x">The calculated x-coordinate</param>
            <param name="y">The calculated y-coordinate</param>
            <param name="parentWidth">The width of the parent</param>
            <param name="parentHeight">The height of the parent</param>
            <param name="elementWidth">The width of the element</param>
            <param name="elementHeight">The height of the element</param>
            <param name="requestedXLocation">The requested x-coordinate</param>
            <param name="requestedYLocation">The requested y-coordinate</param>
            <returns></returns>
        </member>
        <member name="M:Atom.Core.GeometryHelpers.CalculateUniformScale(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Calculates the uniform scale factor of a contained element
            </summary>
            <param name="containerWidth">The width of the container</param>
            <param name="containerHeight">The height of the container</param>
            <param name="width">the width of the element</param>
            <param name="height">The height of the element</param>
            <returns></returns>
        </member>
        <member name="M:Atom.Core.GeometryHelpers.TryConvertToPixels(System.String,System.Double@)">
            <summary>
            Tries to convert the <paramref name="inputString"/> to the pixel equivalent value.
            Ex. inputString = 1pt => value = 1 * <see cref="F:Atom.Core.NumericConstants.PointToPixel"/>.
            If the conversion fails then <see langword="false"/> is returned
            </summary>
            <param name="inputString">The input string</param>
            <param name="value">The value that is returned</param>
            <returns></returns>
        </member>
        <member name="T:Atom.Core.GuidExtensions">
            <summary>
            Extensions methods for <see cref="T:System.Guid"/>
            </summary>
        </member>
        <member name="M:Atom.Core.GuidExtensions.ToNormalizedString(System.Guid)">
            <summary>
            Returns a string that represents the specified <paramref name="guid"/>
            that contains only alphanumeric characters
            </summary>
            <param name="guid">The guid</param>
            <returns></returns>
        </member>
        <member name="T:Atom.Core.CoreHardwareHelpers">
            <summary>
            Helpers methods associated with Hardware
            </summary>
        </member>
        <member name="M:Atom.Core.CoreHardwareHelpers.GetLocalIPAddress">
            <summary>
            Gets the local IP address
            </summary>
            <returns></returns>
            <exception cref="T:System.Exception">Thrown when an Ip address couldn't be retrieved</exception>
        </member>
        <member name="M:Atom.Core.CoreHardwareHelpers.GetMACAddress">
            <summary>
            Gets the mac address of the current machine
            </summary>
            <returns></returns>
        </member>
        <member name="M:Atom.Core.CoreHardwareHelpers.GetMachineName">
            <summary>
            Gets the name of the current machine
            </summary>
            <returns></returns>
        </member>
        <member name="T:Atom.Core.IconPaths">
            <summary>
            The paths of certain icons
            </summary>
        </member>
        <member name="P:Atom.Core.IconPaths.Data">
            <summary>
            Gets all the icons path data
            </summary>
        </member>
        <member name="T:Atom.Core.IEnumerableExtensions">
            <summary>
            Extension methods associated with <see cref="T:System.Collections.IEnumerable"/> and <see cref="T:System.Collections.Generic.IEnumerable`1"/>
            </summary>
        </member>
        <member name="M:Atom.Core.IEnumerableExtensions.IsNullOrEmpty(System.Collections.IEnumerable)">
            <summary>
            Checks if the specified <paramref name="enumerable"/> is <see cref="!:null"/> or 
            if it doesn't have any items...
            </summary>
            <param name="enumerable">The enumerable</param>
            <returns></returns>
        </member>
        <member name="M:Atom.Core.IEnumerableExtensions.ForEach``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0})">
            <summary>
            One-line for each
            </summary>
            <typeparam name="T">The type of the items</typeparam>
            <param name="source">The source</param>
            <param name="action">The action to run</param>
        </member>
        <member name="M:Atom.Core.IEnumerableExtensions.NotNullOrEmpty``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Returns the specified <paramref name="source"/> if it's not null or empty,
            otherwise it throws an <see cref="T:System.ArgumentNullException"/>
            </summary>
            <param name="source">The source</param>
            <returns></returns>
        </member>
        <member name="M:Atom.Core.IEnumerableExtensions.AggregateString``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.String},System.Func{System.String,System.String,System.String})">
            <summary>
            Aggregates the specified <paramref name="source"/> into a <see cref="T:System.String"/>
            </summary>
            <typeparam name="T">The type of the items</typeparam>
            <param name="source">The source</param>
            <param name="extractor">The string extractor that is used to convert an item to a string</param>
            <param name="func">Delegate that places the extracted strings in order</param>
            <returns></returns>
        </member>
        <member name="M:Atom.Core.IEnumerableExtensions.AggregateString``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.String},System.String)">
            <summary>
            Aggregates the specified <paramref name="source"/> into a <see cref="T:System.String"/>
            </summary>
            <typeparam name="T">The type of the items</typeparam>
            <param name="source">The source</param>
            <param name="extractor">The string extractor that is used to convert an item to a string</param>
            <param name="separator">The separator</param>
            <returns></returns>
        </member>
        <member name="M:Atom.Core.IEnumerableExtensions.AggregateString``1(System.Collections.Generic.IEnumerable{``0},System.Func{System.String,System.String,System.String})">
            <summary>
            Aggregates the specified <paramref name="source"/> into a <see cref="T:System.String"/>.
            NOTE: This method converts the items of the <paramref name="source"/> to <see cref="T:System.String"/>
                  using the <see cref="M:System.Object.ToString"/> method!
            </summary>
            <typeparam name="T">The type of the items</typeparam>
            <param name="source">The source</param>
            <param name="func">Delegate that places the extracted strings in order</param>
            <returns></returns>
        </member>
        <member name="M:Atom.Core.IEnumerableExtensions.AggregateString``1(System.Collections.Generic.IEnumerable{``0},System.String)">
            <summary>
            Aggregates the specified <paramref name="source"/> into a <see cref="T:System.String"/>.
            NOTE: This method converts the items of the <paramref name="source"/> to <see cref="T:System.String"/>
                  using the <see cref="M:System.Object.ToString"/> method!
            NOTE: This method uses ", " as the items separator!
            </summary>
            <typeparam name="T">The type of the items</typeparam>
            <param name="source">The source</param>
            <param name="separator">The separator</param>
            <returns></returns>
        </member>
        <member name="M:Atom.Core.IEnumerableExtensions.Concat``3(System.Collections.Generic.IEnumerable{``1},System.Collections.Generic.IEnumerable{``2})">
            <summary>
            Concatenates two sequences.
            </summary>
            <typeparam name="TResult">The type to cast the elements of source to.</typeparam>
            <typeparam name="T1">The type of the elements of the first input sequence</typeparam>
            <typeparam name="T2">The type of the elements of the first input sequence</typeparam>
            <param name="firstSequence">The first sequence</param>
            <param name="secondSequence">The second sequence</param>
            <returns></returns>
        </member>
        <member name="M:Atom.Core.IEnumerableExtensions.Concat``2(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1})">
            <summary>
            Concatenates two sequences.
            </summary>
            <typeparam name="T1">The type of the elements of the first input sequence</typeparam>
            <typeparam name="T2">The type of the elements of the first input sequence</typeparam>
             <param name="firstSequence">The first sequence</param>
            <param name="secondSequence">The second sequence</param>
            <returns></returns>
        </member>
        <member name="M:Atom.Core.IEnumerableExtensions.OrderByStringValue``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.String})">
            <summary>
            Sorts the items of the collection in a ascending order according to a string value provided by an extractor
            </summary>
            <typeparam name="T">The type of the items of the <paramref name="source"/></typeparam>
            <param name="source">The target collection</param>
            <param name="valueExtractor">Extracts a string value from an item</param>
        </member>
        <member name="M:Atom.Core.IEnumerableExtensions.OrderByDescendingStringValue``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.String})">
            <summary>
            Sorts the items of the collection in a descending order according to a string value provided by an extractor
            </summary>
            <typeparam name="T">The type of the items of the <paramref name="source"/></typeparam>
            <param name="source">The target collection</param>
            <param name="valueExtractor">Extracts a string value from an item</param>
        </member>
        <member name="M:Atom.Core.IEnumerableExtensions.ToPotentialNullList``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Creates a <see cref="T:System.Collections.Generic.List`1"/> from an <see cref="T:System.Collections.Generic.IEnumerable`1"/>
            that could potentially be <see cref="!:null"/>
            </summary>
            <typeparam name="T">The type of the items</typeparam>
            <param name="source">The source</param>
            <returns></returns>
        </member>
        <member name="M:Atom.Core.IEnumerableExtensions.Distinct``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Object})">
            <summary>
            Returns distinct elements from a sequence by using the values provided by the <paramref name="keySelector"/>
            </summary>
            <typeparam name="T">The type of the values</typeparam>
            <param name="source">A sequence of values</param>
            <param name="keySelector">A function to extract a key from an element.</param>
            <returns></returns>
        </member>
        <member name="M:Atom.Core.IEnumerableExtensions.Equals``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Checks whether the <paramref name="first"/> enumerable is equal to the <paramref name="second"/>
            </summary>
            <typeparam name="T">The type of the items of the enumerable</typeparam>
            <param name="first">The first enumerable</param>
            <param name="second">The second enumerable</param>
            <returns></returns>
        </member>
        <member name="T:Atom.Core.IEnumerableHelpers">
            <summary>
            Helper methods for <see cref="T:System.Collections.IEnumerable"/> and <see cref="T:System.Collections.Generic.IEnumerable`1"/>
            </summary>
        </member>
        <member name="M:Atom.Core.IEnumerableHelpers.GetParents``1(System.Collections.Generic.IEnumerable{``0},``0,System.Func{``0,System.String},System.Func{``0,System.String})">
            <summary>
            Searches the specified <paramref name="source"/> for all the parents of the specified <paramref name="child"/>
            </summary>
            <typeparam name="T">The type of the items</typeparam>
            <param name="source">The source that contains the items</param>
            <param name="child">The child</param>
            <param name="keyExtractor">
            Gets the principle key of an item.
            NOTE: The parent key of a child is the key of a parent!
            </param>
            <param name="parentKeyExtractor">Get the parent key of an item</param>
            <returns></returns>
        </member>
        <member name="M:Atom.Core.IEnumerableHelpers.CreateAndAdd``1(System.Collections.Generic.IEnumerable{``0},``0)">
            <summary>
            Adds the specified <paramref name="item"/> to the specified <paramref name="source"/>.
            NOTE: If the <paramref name="source"/> is <see cref="!:null"/> then a new <see cref="T:System.Collections.Generic.List`1"/>
                  is created!
            </summary>
            <typeparam name="T">The type of the items</typeparam>
            <param name="source">The source</param>
            <param name="item">The item</param>
            <returns></returns>
        </member>
        <member name="M:Atom.Core.IEnumerableHelpers.CreateAndAddRange``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Adds the specified <paramref name="items"/> to the specified <paramref name="source"/>.
            NOTE: If the <paramref name="source"/> is <see cref="!:null"/> then a new <see cref="T:System.Collections.Generic.List`1"/>
                  is created!
            </summary>
            <typeparam name="T">The type of the items</typeparam>
            <param name="source">The source</param>
            <param name="items">The items</param>
            <returns></returns>
        </member>
        <member name="M:Atom.Core.IEnumerableHelpers.CreateCombinations``1(System.Collections.Generic.IEnumerable{System.Collections.Generic.IEnumerable{``0}})">
            <summary>
            Creates and returns all the possible combinations of the specified <paramref name="sequences"/>.
            NOTE: Each combination contains one item from each sequence!
            NOTE: Order is not taken into consideration!
            </summary>
            <typeparam name="T">The type of the items</typeparam>
            <param name="sequences">The sequences</param>
            <returns></returns>
        </member>
        <member name="T:Atom.Core.IFormFileExtensions">
            <summary>
            Extension methods for <see cref="T:Microsoft.AspNetCore.Http.IFormFile"/>
            </summary>
        </member>
        <member name="M:Atom.Core.IFormFileExtensions.GetBytesAsync(Microsoft.AspNetCore.Http.IFormFile)">
            <summary>
            Gets the <see cref="!:byte[]"/> that represents the specified <paramref name="formFile"/>
            </summary>
            <param name="formFile">The form file</param>
            <returns></returns>
        </member>
        <member name="T:Atom.Core.IFormFileHelpers">
            <summary>
            Helper methods associated with the <see cref="T:Microsoft.AspNetCore.Http.IFormFile"/>
            </summary>
        </member>
        <member name="M:Atom.Core.IFormFileHelpers.FromFileName(System.String)">
            <summary>
            Creates and returns a <see cref="T:Microsoft.AspNetCore.Http.IFormFile"/> from the specified <paramref name="fileName"/>
            </summary>
            <param name="fileName">The file name</param>
            <returns></returns>
        </member>
        <member name="M:Atom.Core.IFormFileHelpers.FromFileName(System.String,System.String)">
            <summary>
            Creates and returns a <see cref="T:Microsoft.AspNetCore.Http.IFormFile"/> from the specified <paramref name="fileName"/>
            </summary>
            <param name="fileName">The file name</param>
            <param name="name">
            The custom name that will represents this <see cref="T:Microsoft.AspNetCore.Http.IFormFile"/>.
            NOTE: The name will be placed at the <see cref="P:Microsoft.AspNetCore.Http.IFormFile.Headers"/> dictionary
                  using the <see cref="F:Atom.Core.StringConstants.NameHeader"/> as the key!
            </param>
            <returns></returns>
        </member>
        <member name="M:Atom.Core.IFormFileHelpers.GetCustomFileName(Microsoft.AspNetCore.Http.IFormFile)">
            <summary>
            Uses the <see cref="F:Atom.Core.StringConstants.NameHeader"/> to retrieve the custom name
            inserted to the <see cref="P:Microsoft.AspNetCore.Http.IFormFile.Headers"/> of the specified <paramref name="file"/>
            </summary>
            <param name="file">The file</param>
            <returns></returns>
        </member>
        <member name="T:Atom.Core.IntegerExtensions">
            <summary>
            Extension methods for <see cref="T:System.Int32"/>
            </summary>
        </member>
        <member name="M:Atom.Core.IntegerExtensions.ToString(System.Int32,System.String,System.String,System.String)">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the specified <paramref name="count"/>
            using the specified forms.
            NOTE: The lower case presentation of the <paramref name="oneForm"/> and the <paramref name="pluralForm"/>!
            </summary>
            <param name="count">The number of items</param>
            <param name="oneForm">The string that is returned if there is just one item</param>
            <param name="pluralForm">The string that is returned if there are multiple items</param>
            <param name="zeroForm">The string that is returned when there are no items</param>
            <returns></returns>
        </member>
        <member name="M:Atom.Core.IntegerExtensions.ToString(System.Int32,System.Func{System.String},System.Func{System.Int32,System.String},System.Func{System.String})">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the specified <paramref name="count"/>
            using the specified forms
            </summary>
            <param name="count">The number of items</param>
            <param name="oneForm">Returns the string that represents the one form</param>
            <param name="pluralForm">Returns the string that represents the plural form</param>
            <param name="zeroForm">Returns the string that represents the zero form</param>
            <returns></returns>
        </member>
        <member name="T:Atom.Core.IChargeable">
            <summary>
            Provides abstractions for a charge
            </summary>
        </member>
        <member name="P:Atom.Core.IChargeable.TaxAmount">
            <summary>
            The tax amount
            </summary>
        </member>
        <member name="P:Atom.Core.IChargeable.NetAmount">
            <summary>
            The net amount
            </summary>
        </member>
        <member name="P:Atom.Core.IChargeable.Amount">
            <summary>
            The amount
            </summary>
        </member>
        <member name="T:Atom.Core.IColorable">
            <summary>
            Provides abstractions for a colorable object
            </summary>
        </member>
        <member name="P:Atom.Core.IColorable.Color">
            <summary>
            The color
            </summary>
        </member>
        <member name="T:Atom.Core.IDateCreateable">
            <summary>
            Provides abstractions for a date createable entity
            </summary>
        </member>
        <member name="P:Atom.Core.IDateCreateable.DateCreated">
            <summary>
            The creation date
            </summary>
        </member>
        <member name="T:Atom.Core.IDateFormattable">
            <summary>
            Provides abstraction for a date formattable object
            </summary>
        </member>
        <member name="P:Atom.Core.IDateFormattable.DateFormat">
            <summary>
            The date format
            </summary>
        </member>
        <member name="T:Atom.Core.IDateLimitable">
            <summary>
            Provides abstractions for an object that offers date based limiting options
            </summary>
        </member>
        <member name="P:Atom.Core.IDateLimitable.After">
            <summary>
            Limit result set to resources created after a specific date time
            </summary>
        </member>
        <member name="P:Atom.Core.IDateLimitable.Before">
            <summary>
            Limit result set to resources created before a specific date time
            </summary>
        </member>
        <member name="T:Atom.Core.IDateModifiable">
            <summary>
            Provides abstraction for a date modifiable entity
            </summary>
        </member>
        <member name="P:Atom.Core.IDateModifiable.DateModified">
            <summary>
            The modification date
            </summary>
        </member>
        <member name="T:Atom.Core.IDescriptable">
            <summary>
            Provides abstractions for an object that can be described
            </summary>
        </member>
        <member name="P:Atom.Core.IDescriptable.Description">
            <summary>
            The description
            </summary>
        </member>
        <member name="T:Atom.Core.IDurationable">
            <summary>
            Provides abstractions for an object with a set duration
            </summary>
        </member>
        <member name="P:Atom.Core.IDurationable.DateStart">
            <summary>
            The starting date time
            </summary>
        </member>
        <member name="P:Atom.Core.IDurationable.DateEnd">
            <summary>
            The ending date time
            </summary>
        </member>
        <member name="T:Atom.Core.IFailable">
            <summary>
            Provides abstractions for an object that can fail its task
            </summary>
        </member>
        <member name="P:Atom.Core.IFailable.ErrorType">
            <summary>
            The error type
            </summary>
        </member>
        <member name="P:Atom.Core.IFailable.ErrorMessage">
            <summary>
            The error message
            </summary>
        </member>
        <member name="P:Atom.Core.IFailable.Successful">
            <summary>
            A flag indicating whether the task was successful or not
            </summary>
        </member>
        <member name="T:Atom.Core.IFailable`1">
            <summary>
            A <see cref="T:Atom.Core.IFailable"/> that contains a result
            </summary>
            <typeparam name="TResult">The type of the result</typeparam>
        </member>
        <member name="P:Atom.Core.IFailable`1.Result">
            <summary>
            The result
            </summary>
        </member>
        <member name="T:Atom.Core.ErrorType">
            <summary>
            Provides enumeration over the error types
            </summary>
        </member>
        <member name="F:Atom.Core.ErrorType.Error">
            <summary>
            A standard error
            </summary>
        </member>
        <member name="F:Atom.Core.ErrorType.Warning">
            <summary>
            A warning
            </summary>
        </member>
        <member name="F:Atom.Core.ErrorType.SmallError">
            <summary>
            A low priority error
            </summary>
        </member>
        <member name="F:Atom.Core.ErrorType.Hidden">
            <summary>
            An error that should get hidden
            </summary>
        </member>
        <member name="T:Atom.Core.IIdentifiable`1">
            <summary>
            Provides abstractions for an identifiable object
            </summary>
        </member>
        <member name="P:Atom.Core.IIdentifiable`1.Id">
            <summary>
            The id of the object
            </summary>
        </member>
        <member name="T:Atom.Core.INameable">
            <summary>
            Provides abstractions for an object that can be named
            </summary>
        </member>
        <member name="P:Atom.Core.INameable.Name">
            <summary>
            The name
            </summary>
        </member>
        <member name="T:Atom.Core.INoteable">
            <summary>
            Provides abstractions for an object that can be noted
            </summary>
        </member>
        <member name="P:Atom.Core.INoteable.Note">
            <summary>
            The note
            </summary>
        </member>
        <member name="T:Atom.Core.IOffsetable">
            <summary>
            Provides abstractions for an object that can set its offset
            </summary>
        </member>
        <member name="P:Atom.Core.IOffsetable.Offset">
            <summary>
            The offset
            </summary>
        </member>
        <member name="T:Atom.Core.IOpenable">
            <summary>
            Provides abstractions for an open status
            </summary>
        </member>
        <member name="P:Atom.Core.IOpenable.IsOpen">
            <summary>
            A flag indicating an open status
            </summary>
        </member>
        <member name="T:Atom.Core.IPageable">
            <summary>
            Provides abstractions for an object that uses pagination
            </summary>
        </member>
        <member name="P:Atom.Core.IPageable.Page">
            <summary>
            The index of the page starting from 0
            </summary>
        </member>
        <member name="T:Atom.Core.IParentable">
            <summary>
            Provides abstractions for an object that has a parent
            </summary>
        </member>
        <member name="P:Atom.Core.IParentable.Parent">
            <summary>
            The parent
            </summary>
        </member>
        <member name="T:Atom.Core.IPayable">
            <summary>
            Provides abstractions for an object that represents a payment
            </summary>
        </member>
        <member name="P:Atom.Core.IPayable.Amount">
            <summary>
            The amount
            </summary>
        </member>
        <member name="T:Atom.Core.ISaveable`1">
            <summary>
            Provides abstractions for a saveable object
            </summary>
            <typeparam name="T">The type of the saveable item</typeparam>
        </member>
        <member name="E:Atom.Core.ISaveable`1.ChangesSaved">
            <summary>
            Fires every time the changes are saved
            </summary>
        </member>
        <member name="T:Atom.Core.IStringFormattable">
            <summary>
            Provides abstractions a text formattable object
            </summary>
        </member>
        <member name="P:Atom.Core.IStringFormattable.InputFormatter">
            <summary>
            The input formatter that formats the input of the user
            </summary>
        </member>
        <member name="T:Atom.Core.IUpdatable">
            <summary>
            Provides abstractions for an updatable object
            </summary>
        </member>
        <member name="M:Atom.Core.IUpdatable.Update">
            <summary>
            Updates the object
            </summary>
        </member>
        <member name="T:Atom.Core.IValidatable">
            <summary>
            Provides abstractions for a validatable object
            </summary>
        </member>
        <member name="M:Atom.Core.IValidatable.Validate">
            <summary>
            Validates the state of the object
            </summary>
            <returns></returns>
        </member>
        <member name="T:Atom.Core.DynamicProgress`2">
            <summary>
            An <see cref="T:System.IProgress`1"/> implementation that has the ability to 
            update its value changed event using the <see cref="P:Atom.Core.DynamicProgress`2.Formatter"/>
            </summary>
            <typeparam name="TValue">The type of the value</typeparam>
            <typeparam name="TOut">The type of the reported value</typeparam>
        </member>
        <member name="P:Atom.Core.DynamicProgress`2.Formatter">
            <summary>
            The formatter used for formatting the value before calling the event
            </summary>
        </member>
        <member name="M:Atom.Core.DynamicProgress`2.Report(`0)">
            <summary>
            Reports a progress update.
            </summary>
            <param name="value">The value of the updated progress.</param>
        </member>
        <member name="E:Atom.Core.DynamicProgress`2.ProgressChanged">
            <summary>
            Fires when the progress changes
            </summary>
        </member>
        <member name="T:Atom.Core.ListExtensions">
            <summary>
            Extension methods for lists
            </summary>
        </member>
        <member name="M:Atom.Core.ListExtensions.Swap``1(System.Collections.Generic.IList{``0},System.Int32,System.Int32)">
            <summary>
            Swaps the position of the item with index <paramref name="indexA"/> with the item with index <paramref name="indexB"/>
            NOTE: Using this method when the target list is an observable collection might cause problems 
                  because the collection changed event will get fired twice and on the first time 
                  the item at <paramref name="indexA"/> and the item at <paramref name="indexB"/> will be the same!
            </summary>
            <typeparam name="T">The type of items that the list contains</typeparam>
            <param name="list">The list</param>
            <param name="indexA">The index of the first item</param>
            <param name="indexB">The index of the second item</param>
            <returns></returns>
        </member>
        <member name="M:Atom.Core.ListExtensions.Split``1(System.Collections.Generic.List{``0},System.Int32)">
            <summary>
            Splits the specified <paramref name="list"/> into sublists of 
            the specified <paramref name="size"/>
            </summary>
            <typeparam name="T">The type of the items of the list</typeparam>
            <param name="list">The list to split</param>
            <param name="size">The maximum size of each sub list</param>
            <returns></returns>
        </member>
        <member name="T:Atom.Core.EnglishLocalization">
            <summary>
            English localization resources
            </summary>
        </member>
        <member name="T:Atom.Core.ILocalization">
            <summary>
            Provides abstractions for localization resources
            </summary>
        </member>
        <member name="T:Atom.Core.LanguageDataModel">
            <summary>
            Represents a language
            </summary>
        </member>
        <member name="P:Atom.Core.LanguageDataModel.Shortcode">
            <summary>
            The shortcode of the language
            </summary>
        </member>
        <member name="P:Atom.Core.LanguageDataModel.Name">
            <summary>
            The name of the language in English
            </summary>
        </member>
        <member name="P:Atom.Core.LanguageDataModel.LocalizedName">
            <summary>
            The localized name
            </summary>
        </member>
        <member name="M:Atom.Core.LanguageDataModel.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Atom.Core.LanguageDataModel.#ctor(System.String,System.String,System.String)">
            <summary>
            Standard constructor
            </summary>
            <param name="shortcode">The shortcode of the language</param>
            <param name="name">The name of the language in English</param>
            <param name="localizedName">The localized name</param>
        </member>
        <member name="M:Atom.Core.LanguageDataModel.ToString">
            <summary>
            Returns a string that represents the current object
            </summary>
            <returns></returns>
        </member>
        <member name="M:Atom.Core.LanguageDataModel.Equals(System.Object)">
            <summary>
            Determines whether the specified object is equal to the current object
            </summary>
            <param name="obj">The object to compare with the current object</param>
            <returns></returns>
        </member>
        <member name="M:Atom.Core.LanguageDataModel.Equals(Atom.Core.LanguageDataModel)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <param name="other">An object to compare with this object.</param>
            <returns></returns>
        </member>
        <member name="M:Atom.Core.LanguageDataModel.GetHashCode">
            <summary>
            Serves as the default hash function
            </summary>
            <returns></returns>
        </member>
        <member name="T:Atom.Core.LanguageDataModels">
            <summary>
            Implements a set of predefined <see cref="T:Atom.Core.LanguageDataModel"/>s 
            </summary>
        </member>
        <member name="P:Atom.Core.LanguageDataModels.Data">
            <summary>
            Gets all the language data models
            </summary>
        </member>
        <member name="P:Atom.Core.LanguageDataModels.English">
            <summary>
            Represents the English language
            </summary>
        </member>
        <member name="P:Atom.Core.LanguageDataModels.Greek">
            <summary>
            Represents the Greek language
            </summary>
        </member>
        <member name="T:Atom.Core.LocalizationExtensions">
            <summary>
            Extension methods associated with localization
            </summary>
        </member>
        <member name="M:Atom.Core.LocalizationExtensions.ToLocalizedCurrency(System.Byte)">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the specified <paramref name="value"/>
            as a localized currency value.
            </summary>
            <param name="value">The value</param>
            <returns></returns>
        </member>
        <member name="M:Atom.Core.LocalizationExtensions.ToLocalizedCurrency(System.Nullable{System.Byte})">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the specified <paramref name="value"/>
            as a localized currency value.
            NOTE: <see cref="!:null"/> is returned if the <paramref name="value"/> is also <see cref="!:null"/>!
            </summary>
            <param name="value">The value</param>
            <returns></returns>
        </member>
        <member name="M:Atom.Core.LocalizationExtensions.ToLocalizedCurrency(System.SByte)">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the specified <paramref name="value"/>
            as a localized currency value.
            </summary>
            <param name="value">The value</param>
            <returns></returns>
        </member>
        <member name="M:Atom.Core.LocalizationExtensions.ToLocalizedCurrency(System.Nullable{System.SByte})">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the specified <paramref name="value"/>
            as a localized currency value.
            NOTE: <see cref="!:null"/> is returned if the <paramref name="value"/> is also <see cref="!:null"/>!
            </summary>
            <param name="value">The value</param>
            <returns></returns>
        </member>
        <member name="M:Atom.Core.LocalizationExtensions.ToLocalizedCurrency(System.Int32)">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the specified <paramref name="value"/>
            as a localized currency value.
            </summary>
            <param name="value">The value</param>
            <returns></returns>
        </member>
        <member name="M:Atom.Core.LocalizationExtensions.ToLocalizedCurrency(System.Nullable{System.Int32})">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the specified <paramref name="value"/>
            as a localized currency value.
            NOTE: <see cref="!:null"/> is returned if the <paramref name="value"/> is also <see cref="!:null"/>!
            </summary>
            <param name="value">The value</param>
            <returns></returns>
        </member>
        <member name="M:Atom.Core.LocalizationExtensions.ToLocalizedCurrency(System.UInt32)">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the specified <paramref name="value"/>
            as a localized currency value.
            </summary>
            <param name="value">The value</param>
            <returns></returns>
        </member>
        <member name="M:Atom.Core.LocalizationExtensions.ToLocalizedCurrency(System.Nullable{System.UInt32})">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the specified <paramref name="value"/>
            as a localized currency value.
            NOTE: <see cref="!:null"/> is returned if the <paramref name="value"/> is also <see cref="!:null"/>!
            </summary>
            <param name="value">The value</param>
            <returns></returns>
        </member>
        <member name="M:Atom.Core.LocalizationExtensions.ToLocalizedCurrency(System.Double)">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the specified <paramref name="value"/>
            as a localized currency value.
            </summary>
            <param name="value">The value</param>
            <returns></returns>
        </member>
        <member name="M:Atom.Core.LocalizationExtensions.ToLocalizedCurrency(System.Nullable{System.Double})">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the specified <paramref name="value"/>
            as a localized currency value.
            NOTE: <see cref="!:null"/> is returned if the <paramref name="value"/> is also <see cref="!:null"/>!
            </summary>
            <param name="value">The value</param>
            <returns></returns>
        </member>
        <member name="M:Atom.Core.LocalizationExtensions.ToLocalizedCurrency(System.Single)">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the specified <paramref name="value"/>
            as a localized currency value.
            </summary>
            <param name="value">The value</param>
            <returns></returns>
        </member>
        <member name="M:Atom.Core.LocalizationExtensions.ToLocalizedCurrency(System.Nullable{System.Single})">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the specified <paramref name="value"/>
            as a localized currency value.
            NOTE: <see cref="!:null"/> is returned if the <paramref name="value"/> is also <see cref="!:null"/>!
            </summary>
            <param name="value">The value</param>
            <returns></returns>
        </member>
        <member name="M:Atom.Core.LocalizationExtensions.ToLocalizedCurrency(System.Decimal)">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the specified <paramref name="value"/>
            as a localized currency value.
            </summary>
            <param name="value">The value</param>
            <returns></returns>
        </member>
        <member name="M:Atom.Core.LocalizationExtensions.ToLocalizedCurrency(System.Nullable{System.Decimal})">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the specified <paramref name="value"/>
            as a localized currency value.
            NOTE: <see cref="!:null"/> is returned if the <paramref name="value"/> is also <see cref="!:null"/>!
            </summary>
            <param name="value">The value</param>
            <returns></returns>
        </member>
        <member name="M:Atom.Core.LocalizationExtensions.ToLocalizedCurrency(System.Int64)">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the specified <paramref name="value"/>
            as a localized currency value.
            </summary>
            <param name="value">The value</param>
            <returns></returns>
        </member>
        <member name="M:Atom.Core.LocalizationExtensions.ToLocalizedCurrency(System.Nullable{System.Int64})">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the specified <paramref name="value"/>
            as a localized currency value.
            NOTE: <see cref="!:null"/> is returned if the <paramref name="value"/> is also <see cref="!:null"/>!
            </summary>
            <param name="value">The value</param>
            <returns></returns>
        </member>
        <member name="M:Atom.Core.LocalizationExtensions.ToLocalizedCurrency(System.UInt64)">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the specified <paramref name="value"/>
            as a localized currency value.
            </summary>
            <param name="value">The value</param>
            <returns></returns>
        </member>
        <member name="M:Atom.Core.LocalizationExtensions.ToLocalizedCurrency(System.Nullable{System.UInt64})">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the specified <paramref name="value"/>
            as a localized currency value.
            NOTE: <see cref="!:null"/> is returned if the <paramref name="value"/> is also <see cref="!:null"/>!
            </summary>
            <param name="value">The value</param>
            <returns></returns>
        </member>
        <member name="M:Atom.Core.LocalizationExtensions.ToLocalizedCurrency(System.Int16)">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the specified <paramref name="value"/>
            as a localized currency value.
            </summary>
            <param name="value">The value</param>
            <returns></returns>
        </member>
        <member name="M:Atom.Core.LocalizationExtensions.ToLocalizedCurrency(System.Nullable{System.Int16})">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the specified <paramref name="value"/>
            as a localized currency value.
            NOTE: <see cref="!:null"/> is returned if the <paramref name="value"/> is also <see cref="!:null"/>!
            </summary>
            <param name="value">The value</param>
            <returns></returns>
        </member>
        <member name="M:Atom.Core.LocalizationExtensions.ToLocalizedCurrency(System.UInt16)">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the specified <paramref name="value"/>
            as a localized currency value.
            </summary>
            <param name="value">The value</param>
            <returns></returns>
        </member>
        <member name="M:Atom.Core.LocalizationExtensions.ToLocalizedCurrency(System.Nullable{System.UInt16})">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the specified <paramref name="value"/>
            as a localized currency value.
            NOTE: <see cref="!:null"/> is returned if the <paramref name="value"/> is also <see cref="!:null"/>!
            </summary>
            <param name="value">The value</param>
            <returns></returns>
        </member>
        <member name="M:Atom.Core.LocalizationExtensions.ToPercentage(System.Byte)">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the specified <paramref name="value"/>
            as a percentage value.
            </summary>
            <param name="value">The value</param>
            <returns></returns>
        </member>
        <member name="M:Atom.Core.LocalizationExtensions.ToPercentage(System.Nullable{System.Byte})">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the specified <paramref name="value"/>
            as a percentage value.
            NOTE: <see cref="!:null"/> is returned if the <paramref name="value"/> is also <see cref="!:null"/>!
            </summary>
            <param name="value">The value</param>
            <returns></returns>
        </member>
        <member name="M:Atom.Core.LocalizationExtensions.ToPercentage(System.SByte)">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the specified <paramref name="value"/>
            as a percentage value.
            </summary>
            <param name="value">The value</param>
            <returns></returns>
        </member>
        <member name="M:Atom.Core.LocalizationExtensions.ToPercentage(System.Nullable{System.SByte})">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the specified <paramref name="value"/>
            as a percentage value.
            NOTE: <see cref="!:null"/> is returned if the <paramref name="value"/> is also <see cref="!:null"/>!
            </summary>
            <param name="value">The value</param>
            <returns></returns>
        </member>
        <member name="M:Atom.Core.LocalizationExtensions.ToPercentage(System.Int32)">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the specified <paramref name="value"/>
            as a percentage value.
            </summary>
            <param name="value">The value</param>
            <returns></returns>
        </member>
        <member name="M:Atom.Core.LocalizationExtensions.ToPercentage(System.Nullable{System.Int32})">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the specified <paramref name="value"/>
            as a percentage value.
            NOTE: <see cref="!:null"/> is returned if the <paramref name="value"/> is also <see cref="!:null"/>!
            </summary>
            <param name="value">The value</param>
            <returns></returns>
        </member>
        <member name="M:Atom.Core.LocalizationExtensions.ToPercentage(System.UInt32)">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the specified <paramref name="value"/>
            as a percentage value.
            </summary>
            <param name="value">The value</param>
            <returns></returns>
        </member>
        <member name="M:Atom.Core.LocalizationExtensions.ToPercentage(System.Nullable{System.UInt32})">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the specified <paramref name="value"/>
            as a percentage value.
            NOTE: <see cref="!:null"/> is returned if the <paramref name="value"/> is also <see cref="!:null"/>!
            </summary>
            <param name="value">The value</param>
            <returns></returns>
        </member>
        <member name="M:Atom.Core.LocalizationExtensions.ToPercentage(System.Single)">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the specified <paramref name="value"/>
            as a percentage value.
            </summary>
            <param name="value">The value</param>
            <returns></returns>
        </member>
        <member name="M:Atom.Core.LocalizationExtensions.ToPercentage(System.Nullable{System.Single})">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the specified <paramref name="value"/>
            as a percentage value.
            NOTE: <see cref="!:null"/> is returned if the <paramref name="value"/> is also <see cref="!:null"/>!
            </summary>
            <param name="value">The value</param>
            <returns></returns>
        </member>
        <member name="M:Atom.Core.LocalizationExtensions.ToPercentage(System.Double)">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the specified <paramref name="value"/>
            as a percentage value.
            </summary>
            <param name="value">The value</param>
            <returns></returns>
        </member>
        <member name="M:Atom.Core.LocalizationExtensions.ToPercentage(System.Nullable{System.Double})">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the specified <paramref name="value"/>
            as a percentage value.
            NOTE: <see cref="!:null"/> is returned if the <paramref name="value"/> is also <see cref="!:null"/>!
            </summary>
            <param name="value">The value</param>
            <returns></returns>
        </member>
        <member name="M:Atom.Core.LocalizationExtensions.ToPercentage(System.Decimal)">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the specified <paramref name="value"/>
            as a percentage value.
            </summary>
            <param name="value">The value</param>
            <returns></returns>
        </member>
        <member name="M:Atom.Core.LocalizationExtensions.ToPercentage(System.Nullable{System.Decimal})">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the specified <paramref name="value"/>
            as a percentage value.
            NOTE: <see cref="!:null"/> is returned if the <paramref name="value"/> is also <see cref="!:null"/>!
            </summary>
            <param name="value">The value</param>
            <returns></returns>
        </member>
        <member name="M:Atom.Core.LocalizationExtensions.ToPercentage(System.Int64)">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the specified <paramref name="value"/>
            as a percentage value.
            </summary>
            <param name="value">The value</param>
            <returns></returns>
        </member>
        <member name="M:Atom.Core.LocalizationExtensions.ToPercentage(System.Nullable{System.Int64})">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the specified <paramref name="value"/>
            as a percentage value.
            NOTE: <see cref="!:null"/> is returned if the <paramref name="value"/> is also <see cref="!:null"/>!
            </summary>
            <param name="value">The value</param>
            <returns></returns>
        </member>
        <member name="M:Atom.Core.LocalizationExtensions.ToPercentage(System.UInt64)">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the specified <paramref name="value"/>
            as a percentage value.
            </summary>
            <param name="value">The value</param>
            <returns></returns>
        </member>
        <member name="M:Atom.Core.LocalizationExtensions.ToPercentage(System.Nullable{System.UInt64})">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the specified <paramref name="value"/>
            as a percentage value.
            NOTE: <see cref="!:null"/> is returned if the <paramref name="value"/> is also <see cref="!:null"/>!
            </summary>
            <param name="value">The value</param>
            <returns></returns>
        </member>
        <member name="M:Atom.Core.LocalizationExtensions.ToPercentage(System.Int16)">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the specified <paramref name="value"/>
            as a percentage value.
            </summary>
            <param name="value">The value</param>
            <returns></returns>
        </member>
        <member name="M:Atom.Core.LocalizationExtensions.ToPercentage(System.Nullable{System.Int16})">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the specified <paramref name="value"/>
            as a percentage value.
            NOTE: <see cref="!:null"/> is returned if the <paramref name="value"/> is also <see cref="!:null"/>!
            </summary>
            <param name="value">The value</param>
            <returns></returns>
        </member>
        <member name="M:Atom.Core.LocalizationExtensions.ToPercentage(System.UInt16)">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the specified <paramref name="value"/>
            as a percentage value.
            </summary>
            <param name="value">The value</param>
            <returns></returns>
        </member>
        <member name="M:Atom.Core.LocalizationExtensions.ToPercentage(System.Nullable{System.UInt16})">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the specified <paramref name="value"/>
            as a percentage value.
            NOTE: <see cref="!:null"/> is returned if the <paramref name="value"/> is also <see cref="!:null"/>!
            </summary>
            <param name="value">The value</param>
            <returns></returns>
        </member>
        <member name="M:Atom.Core.LocalizationHelpers.GetCurrencySymbol">
            <summary>
            Gets the currency symbol of the local machine
            </summary>
            <returns></returns>
        </member>
        <member name="M:Atom.Core.LocalizationHelpers.GetIsoCurrencySymbol">
            <summary>
            Gets the ISO currency symbol of the local machine
            </summary>
            <returns></returns>
        </member>
        <member name="T:Atom.Core.LoggerExtensions">
            <summary>
            Extensions for <see cref="T:Microsoft.Extensions.Logging.ILogger"/> loggers
            </summary>
        </member>
        <member name="M:Atom.Core.LoggerExtensions.LogCriticalSource(Microsoft.Extensions.Logging.ILogger,System.String,Microsoft.Extensions.Logging.EventId,System.Exception,System.String,System.String,System.Int32,System.Object[])">
            <summary>
            Logs a critical message, including the source of the log
            </summary>
            <param name="logger">The logger</param>
            <param name="message">The message</param>
            <param name="eventId">The id of the event</param>
            <param name="exception">The exception</param>
            <param name="origin">The callers member/function name</param>
            <param name="filePath">The source code file path</param>
            <param name="lineNumber">The line number in the code file of the caller</param>
            <param name="args">The additional arguments</param>
        </member>
        <member name="M:Atom.Core.LoggerExtensions.LogTraceSource(Microsoft.Extensions.Logging.ILogger,System.String,Microsoft.Extensions.Logging.EventId,System.Exception,System.String,System.String,System.Int32,System.Object[])">
            <summary>
            Logs a verbose trace message, including the source of the log
            </summary>
            <param name="logger">The logger</param>
            <param name="message">The message</param>
            <param name="eventId">The id of the event</param>
            <param name="exception">The exception</param>
            <param name="origin">The callers member/function name</param>
            <param name="filePath">The source code file path</param>
            <param name="lineNumber">The line number in the code file of the caller</param>
            <param name="args">The additional arguments</param>
        </member>
        <member name="M:Atom.Core.LoggerExtensions.LogDebugSource(Microsoft.Extensions.Logging.ILogger,System.String,Microsoft.Extensions.Logging.EventId,System.Exception,System.String,System.String,System.Int32,System.Object[])">
            <summary>
            Logs a debug message, including the source of the log
            </summary>
            <param name="logger">The logger</param>
            <param name="message">The message</param>
            <param name="eventId">The id of the event</param>
            <param name="exception">The exception</param>
            <param name="origin">The callers member/function name</param>
            <param name="filePath">The source code file path</param>
            <param name="lineNumber">The line number in the code file of the caller</param>
            <param name="args">The additional arguments</param>
        </member>
        <member name="M:Atom.Core.LoggerExtensions.LogErrorSource(Microsoft.Extensions.Logging.ILogger,System.String,Microsoft.Extensions.Logging.EventId,System.Exception,System.String,System.String,System.Int32,System.Object[])">
            <summary>
            Logs an error message, including the source of the log
            </summary>
            <param name="logger">The logger</param>
            <param name="message">The message</param>
            <param name="eventId">The id of the event</param>
            <param name="exception">The exception</param>
            <param name="origin">The callers member/function name</param>
            <param name="filePath">The source code file path</param>
            <param name="lineNumber">The line number in the code file of the caller</param>
            <param name="args">The additional arguments</param>
        </member>
        <member name="M:Atom.Core.LoggerExtensions.LogInformationSource(Microsoft.Extensions.Logging.ILogger,System.String,Microsoft.Extensions.Logging.EventId,System.Exception,System.String,System.String,System.Int32,System.Object[])">
            <summary>
            Logs an informative message, including the source of the log
            </summary>
            <param name="logger">The logger</param>
            <param name="message">The message</param>
            <param name="eventId">The id of the event</param>
            <param name="exception">The exception</param>
            <param name="origin">The callers member/function name</param>
            <param name="filePath">The source code file path</param>
            <param name="lineNumber">The line number in the code file of the caller</param>
            <param name="args">The additional arguments</param>
        </member>
        <member name="M:Atom.Core.LoggerExtensions.LogWarningSource(Microsoft.Extensions.Logging.ILogger,System.String,Microsoft.Extensions.Logging.EventId,System.Exception,System.String,System.String,System.Int32,System.Object[])">
            <summary>
            Logs a warning message, including the source of the log
            </summary>
            <param name="logger">The logger</param>
            <param name="message">The message</param>
            <param name="eventId">The id of the event</param>
            <param name="exception">The exception</param>
            <param name="origin">The callers member/function name</param>
            <param name="filePath">The source code file path</param>
            <param name="lineNumber">The line number in the code file of the caller</param>
            <param name="args">The additional arguments</param>
        </member>
        <member name="T:Atom.Core.LoggerSourceFormatter">
            <summary>
            Formats a message when the callers source information is provided first in the arguments
            </summary>
        </member>
        <member name="M:Atom.Core.LoggerSourceFormatter.Format(System.Object[],System.Exception)">
            <summary>
            Formats the message including the source information pulled out of the state
            </summary>
            <param name="state">The state information about the log</param>
            <param name="exception">The exception</param>
            <returns></returns>
        </member>
        <member name="T:Atom.Core.BaseMap`1">
            <summary>
            The base for all the maps
            </summary>
            <typeparam name="T">The type of the identifier</typeparam>
        </member>
        <member name="P:Atom.Core.BaseMap`1.Id">
            <summary>
            The unique identifier of this map
            </summary>
        </member>
        <member name="M:Atom.Core.BaseMap`1.#ctor(`0)">
            <summary>
            Default constructor
            </summary>
            <param name="id">The unique identifier of this map</param>
        </member>
        <member name="M:Atom.Core.BaseMap`1.IsIdentifierValid(`0)">
            <summary>
            Checks whether the inserted identifier is valid or not
            </summary>
            <param name="id">The identifier</param>
            <returns></returns>
        </member>
        <member name="T:Atom.Core.BaseMap">
            <summary>
            The base for all the maps with an identifier of type <see cref="T:System.Object"/>
            </summary>
        </member>
        <member name="M:Atom.Core.BaseMap.#ctor(System.Object)">
            <summary>
            Default constructor
            </summary>
            <param name="id">The unique identifier of this map</param>
        </member>
        <member name="T:Atom.Core.StandardMap">
            <summary>
            A <see cref="T:Atom.Core.BaseMap`1"/> that uses a <see cref="T:System.String"/> as the type of the <see cref="P:Atom.Core.BaseMap`1.Id"/>
            </summary>
        </member>
        <member name="M:Atom.Core.StandardMap.#ctor(System.String)">
            <summary>
            Default constructor
            </summary>
            <param name="id">The unique identifier of this map</param>
        </member>
        <member name="M:Atom.Core.StandardMap.IsIdentifierValid(System.String)">
            <summary>
            Checks whether the inserted identifier is valid or not
            </summary>
            <param name="id">The identifier</param>
            <returns></returns>
        </member>
        <member name="T:Atom.Core.PropertyMapper`1">
            <summary>
            Maps the properties of the <typeparamref name="TClass"/> with values
            to map collections identified by unique ids
            </summary>
            <typeparam name="TClass">The type of the model</typeparam>
        </member>
        <member name="F:Atom.Core.PropertyMapper`1.mMapper">
            <summary>
            The mapper
            </summary>
        </member>
        <member name="F:Atom.Core.PropertyMapper`1.mOptionalPropertyMapIDs">
            <summary>
            The ids of the maps that do not require to have all the properties of the <typeparamref name="TClass"/> mapped
            </summary>
        </member>
        <member name="M:Atom.Core.PropertyMapper`1.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="P:Atom.Core.PropertyMapper`1.Atom#Core#IClonablePropertyMapper{TClass}#Mapper">
            <summary>
            The mapper.
            NOTE: This method should created a copy from the original mapper to prevent its external manipulation
            </summary>
        </member>
        <member name="M:Atom.Core.PropertyMapper`1.CopyMapsFrom(Atom.Core.IClonablePropertyMapper{`0})">
            <summary>
            Copies the maps from the specified <paramref name="mapper"/>
            </summary>
            <param name="mapper">The mapper</param>
        </member>
        <member name="M:Atom.Core.PropertyMapper`1.GetProperties(System.Object)">
            <summary>
            Gets all the properties registered for the map with the specified <paramref name="id"/>
            </summary>
            <param name="id">The id of the property map</param>
            <returns></returns>
        </member>
        <member name="M:Atom.Core.PropertyMapper`1.Validate">
            <summary>
            Calls the <see cref="M:Atom.Core.PropertyMapper`1.Validate(System.Object)"/> for all the registered maps.
            NOTE: This method is usually used for debugging reasons, in order to check if for example
                  a representation value has been set for all the properties of the <typeparamref name="TClass"/>!
            </summary>
            <returns></returns>
        </member>
        <member name="M:Atom.Core.PropertyMapper`1.Validate(System.Object)">
            <summary>
            Validates the map collection that's identified by the specified <paramref name="id"/>.
            NOTE: Validating a map collection meaning checking if a value has been set for all
                  the available properties of the <typeparamref name="TClass"/> for that map!
            NOTE: This method is usually used for debugging reasons, in order to check if for example
                  a representation value has been set for all the properties of the <typeparamref name="TClass"/>!
            </summary>
            <param name="id">The if of the map</param>
            <returns></returns>
        </member>
        <member name="M:Atom.Core.PropertyMapper`1.Map(System.Object,System.Linq.Expressions.Expression{System.Func{`0,System.Object}},System.Object)">
            <summary>
            Create a map for the map collection with the specified <paramref name="id"/>
            for the property targeted by the specified <paramref name="propertySelector"/>
            and with the specified <paramref name="value"/>.
            </summary>
            <param name="id">The id of the map collection</param>
            <param name="propertySelector">Expression that selects a property from the <typeparamref name="TClass"/></param>
            <param name="value">The value</param>
            <returns></returns>
        </member>
        <member name="M:Atom.Core.PropertyMapper`1.Atom#Core#IPropertyMapper{TClass}#Map(System.Object,System.Linq.Expressions.Expression{System.Func{`0,System.Object}},System.Object)">
            <summary>
            Create a map for the map collection with the specified <paramref name="id"/>
            for the property targeted by the specified <paramref name="propertySelector"/>
            and with the specified <paramref name="value"/>.
            </summary>
            <param name="id">The id of the map collection</param>
            <param name="propertySelector">Expression that selects a property from the <typeparamref name="TClass"/></param>
            <param name="value">The value</param>
            <returns></returns>
        </member>
        <member name="M:Atom.Core.PropertyMapper`1.UnsafeMap(System.Object,System.Reflection.PropertyInfo,System.Object)">
            <summary>
            Create a map for the map collection with the specified <paramref name="id"/>
            for the specified <paramref name="propertyInfo"/>
            and with the specified <paramref name="value"/>.
            NOTE: This method should only be used by implementations related to <see cref="N:System.Reflection"/>!
            </summary>
            <param name="id">The id of the map collection</param>
            <param name="propertyInfo">The property info</param>
            <param name="value">The value</param>
            <returns></returns>
        </member>
        <member name="M:Atom.Core.PropertyMapper`1.Atom#Core#IPropertyMapper#UnsafeMap(System.Object,System.Reflection.PropertyInfo,System.Object)">
            <summary>
            Create a map for the map collection with the specified <paramref name="id"/>
            for the specified <paramref name="propertyInfo"/>
            and with the specified <paramref name="value"/>.
            NOTE: This method should only be used by implementations related to <see cref="N:System.Reflection"/>!
            </summary>
            <param name="id">The id of the map collection</param>
            <param name="propertyInfo">The property info</param>
            <param name="value">The value</param>
            <returns></returns>
        </member>
        <member name="M:Atom.Core.PropertyMapper`1.SetOptional(System.Object)">
            <summary>
            Declares the property map collection with the specified <paramref name="id"/> as optional,
            meaning that not all the properties of the <typeparamref name="TClass"/> are required to be mapped
            to the map collection
            </summary>
            <param name="id">The id of the map collection</param>
            <returns></returns>
        </member>
        <member name="M:Atom.Core.PropertyMapper`1.Atom#Core#IPropertyMapper#SetOptional(System.Object)">
            <summary>
            Declares the property map collection with the specified <paramref name="id"/> as optional,
            meaning that not all the properties of the <typeparamref name="TClass"/> are required to be mapped
            to the map collection
            </summary>
            <param name="id">The id of the map collection</param>
            <returns></returns>
        </member>
        <member name="M:Atom.Core.PropertyMapper`1.Get(System.Object,System.Linq.Expressions.Expression{System.Func{`0,System.Object}},System.Object)">
            <summary>
            Gets the value of the property targeted by the <paramref name="propertySelector"/>
            from the map collection with the specified <paramref name="id"/>
            </summary>
            <param name="id">The id of the map collection</param>
            <param name="propertySelector">Expression that selects a property from the <typeparamref name="TClass"/></param>
            <param name="fallBackValue">The value that is returned when a custom value is not assigned</param>
            <returns></returns>
        </member>
        <member name="M:Atom.Core.PropertyMapper`1.UnsafeGet(System.Object,System.Reflection.PropertyInfo,System.Object)">
            <summary>
            Gets the value of the specified <paramref name="propertyInfo"/>
            from the map collection with the specified <paramref name="id"/>.
            NOTE: This method should only be used by implementations related to <see cref="N:System.Reflection"/>!
            </summary>
            <param name="id">The id of the map collection</param>
            <param name="propertyInfo">The property info</param>
            <param name="fallBackValue">The value that is returned when a custom value is not assigned</param>
            <returns></returns>
        </member>
        <member name="M:Atom.Core.PropertyMapper`1.Atom#Core#IPropertyMapper#UnsafeGet(System.Object,System.Reflection.PropertyInfo,System.Object)">
            <summary>
            Gets the value of the specified <paramref name="propertyInfo"/>
            from the map collection with the specified <paramref name="id"/>.
            NOTE: This method should only be used by implementations related to <see cref="N:System.Reflection"/>!
            </summary>
            <param name="id">The id of the map collection</param>
            <param name="propertyInfo">The property info</param>
            <param name="fallBackValue">The value that is returned when a custom value is not assigned</param>
            <returns></returns>
        </member>
        <member name="T:Atom.Core.IPropertyMapper">
            <summary>
            Provides abstractions for a property mapper when the type of the mapped model is unknown
            </summary>
        </member>
        <member name="M:Atom.Core.IPropertyMapper.UnsafeMap(System.Object,System.Reflection.PropertyInfo,System.Object)">
            <summary>
            Create a map for the map collection with the specified <paramref name="id"/>
            for the specified <paramref name="propertyInfo"/>
            and with the specified <paramref name="value"/>.
            NOTE: This method should only be used by implementations related to <see cref="N:System.Reflection"/>!
            </summary>
            <param name="id">The id of the map collection</param>
            <param name="propertyInfo">The property info</param>
            <param name="value">The value</param>
            <returns></returns>
        </member>
        <member name="M:Atom.Core.IPropertyMapper.UnsafeGet(System.Object,System.Reflection.PropertyInfo,System.Object)">
            <summary>
            Gets the value of the specified <paramref name="propertyInfo"/>
            from the map collection with the specified <paramref name="id"/>.
            NOTE: This method should only be used by implementations related to <see cref="N:System.Reflection"/>!
            </summary>
            <param name="id">The id of the map collection</param>
            <param name="propertyInfo">The property info</param>
            <param name="fallBackValue">The value that is returned when a custom value is not assigned</param>
            <returns></returns>
        </member>
        <member name="M:Atom.Core.IPropertyMapper.SetOptional(System.Object)">
            <summary>
            Declares the property map collection with the specified <paramref name="id"/> as optional,
            meaning that not all the properties of the model are required to be mapped
            to the map collection
            </summary>
            <param name="id">The id of the map collection</param>
            <returns></returns>
        </member>
        <member name="T:Atom.Core.IPropertyMapper`1">
            <summary>
            Provides abstractions for a property mapper
            </summary>
            <typeparam name="TClass"></typeparam>
        </member>
        <member name="M:Atom.Core.IPropertyMapper`1.Map(System.Object,System.Linq.Expressions.Expression{System.Func{`0,System.Object}},System.Object)">
            <summary>
            Create a map for the map collection with the specified <paramref name="id"/>
            for the property targeted by the specified <paramref name="propertySelector"/>
            and with the specified <paramref name="value"/>.
            </summary>
            <param name="id">The id of the map collection</param>
            <param name="propertySelector">Expression that selects a property from the <typeparamref name="TClass"/></param>
            <param name="value">The value</param>
            <returns></returns>
        </member>
        <member name="M:Atom.Core.IPropertyMapper`1.Get(System.Object,System.Linq.Expressions.Expression{System.Func{`0,System.Object}},System.Object)">
            <summary>
            Gets the value of the property targeted by the <paramref name="propertySelector"/>
            from the map collection with the specified <paramref name="id"/>
            </summary>
            <param name="id">The id of the map collection</param>
            <param name="propertySelector">Expression that selects a property from the <typeparamref name="TClass"/></param>
            <param name="fallBackValue">The value that is returned when a custom value is not assigned</param>
            <returns></returns>
        </member>
        <member name="T:Atom.Core.IClonablePropertyMapper`1">
            <summary>
            Provides abstractions for a property mapper that gives access to its maps
            </summary>
            <typeparam name="TClass">The type of the model</typeparam>
        </member>
        <member name="P:Atom.Core.IClonablePropertyMapper`1.Mapper">
            <summary>
            The mapper.
            NOTE: This method should created a copy from the original mapper to prevent its external manipulation
            </summary>
        </member>
        <member name="T:Atom.Core.PropertyMapperExtensions">
            <summary>
            Extension methods for <see cref="T:Atom.Core.PropertyMapper`1"/>
            </summary>
        </member>
        <member name="F:Atom.Core.PropertyMapperExtensions.Title">
            <summary>
            The id of a maps category that contains titles
            </summary>
        </member>
        <member name="F:Atom.Core.PropertyMapperExtensions.Description">
            <summary>
            The id of a maps category that contains descriptions
            </summary>
        </member>
        <member name="F:Atom.Core.PropertyMapperExtensions.Size">
            <summary>
            The id of a maps category that contains sizes
            </summary>
        </member>
        <member name="F:Atom.Core.PropertyMapperExtensions.Comparer">
            <summary>
            The id of a maps category that contains comparers
            </summary>
        </member>
        <member name="F:Atom.Core.PropertyMapperExtensions.Category">
            <summary>
            The id of the maps category that contains category names
            </summary>
        </member>
        <member name="F:Atom.Core.PropertyMapperExtensions.Ignore">
            <summary>
            The id of the ignore category
            </summary>
        </member>
        <member name="M:Atom.Core.PropertyMapperExtensions.GetTitleProperties``1(Atom.Core.PropertyMapper{``0})">
            <summary>
            Gets all the properties registered for the map with id : <see cref="F:Atom.Core.PropertyMapperExtensions.Title"/>
            </summary>
            <typeparam name="TClass">The type of the model</typeparam>
            <param name="mapper"></param>
            <returns></returns>
        </member>
        <member name="M:Atom.Core.PropertyMapperExtensions.MapTitle``1(Atom.Core.PropertyMapper{``0},System.Reflection.PropertyInfo,System.String)">
            <summary>
            Create a map for the map collection with id: '<see cref="F:Atom.Core.PropertyMapperExtensions.Title"/>'
            for the specified <paramref name="propertyInfo"/>
            and with the specified <paramref name="value"/>.
            NOTE: This method should only be used by implementations related to <see cref="N:System.Reflection"/>!
            </summary>
            <param name="mapper">The mapper</param>
            <param name="propertyInfo">The property info</param>
            <param name="value">The value</param>
            <returns></returns>
        </member>
        <member name="M:Atom.Core.PropertyMapperExtensions.MapTitle``1(Atom.Core.PropertyMapper{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.String)">
            <summary>
            Create a map for the map collection with id: '<see cref="F:Atom.Core.PropertyMapperExtensions.Title"/>' for the property targeted by the 
            specified <paramref name="targetPropertySelector"/> and with the specified <paramref name="value"/>.
            </summary>
            <param name="mapper">The mapper</param>
            <param name="targetPropertySelector">Expression that selects a property from the <typeparamref name="TClass"/></param>
            <param name="value">The value</param>
            <returns></returns>
        </member>
        <member name="M:Atom.Core.PropertyMapperExtensions.MapDescription``1(Atom.Core.PropertyMapper{``0},System.Reflection.PropertyInfo,System.String)">
            <summary>
            Create a map for the map collection with id: '<see cref="F:Atom.Core.PropertyMapperExtensions.Description"/>'
            for the specified <paramref name="propertyInfo"/>
            and with the specified <paramref name="value"/>.
            NOTE: This method should only be used by implementations related to <see cref="N:System.Reflection"/>!
            </summary>
            <param name="mapper">The mapper</param>
            <param name="propertyInfo">The property info</param>
            <param name="value">The value</param>
            <returns></returns>
        </member>
        <member name="M:Atom.Core.PropertyMapperExtensions.MapDescription``1(Atom.Core.PropertyMapper{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.String)">
            <summary>
            Create a map for the map collection with id: '<see cref="F:Atom.Core.PropertyMapperExtensions.Description"/>' for the property targeted by the 
            specified <paramref name="targetPropertySelector"/> and with the specified <paramref name="value"/>.
            </summary>
            <param name="mapper">The mapper</param>
            <param name="targetPropertySelector">Expression that selects a property from the <typeparamref name="TClass"/></param>
            <param name="value">The value</param>
            <returns></returns>
        </member>
        <member name="M:Atom.Core.PropertyMapperExtensions.MapSize``1(Atom.Core.PropertyMapper{``0},System.Reflection.PropertyInfo,System.UInt32)">
            <summary>
            Create a map for the map collection with id: '<see cref="F:Atom.Core.PropertyMapperExtensions.Size"/>'
            for the specified <paramref name="propertyInfo"/>
            and with the specified <paramref name="value"/>.
            NOTE: This method should only be used by implementations related to <see cref="N:System.Reflection"/>!
            </summary>
            <param name="mapper">The mapper</param>
            <param name="propertyInfo">The property info</param>
            <param name="value">The value</param>
            <returns></returns>
        </member>
        <member name="M:Atom.Core.PropertyMapperExtensions.MapSize``1(Atom.Core.PropertyMapper{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.UInt32)">
            <summary>
            Create a map for the map collection with id: '<see cref="F:Atom.Core.PropertyMapperExtensions.Size"/>' for the property targeted by the 
            specified <paramref name="targetpropertySelector"/> and with the specified <paramref name="value"/>.
            </summary>
            <param name="mapper">The mapper</param>
            <param name="targetpropertySelector">Expression that selects a property from the <typeparamref name="TClass"/></param>
            <param name="value">The value</param>
            <returns></returns>
        </member>
        <member name="M:Atom.Core.PropertyMapperExtensions.MapComparer``1(Atom.Core.PropertyMapper{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.Object)">
            <summary>
            Create a map for the map collection with id: '<see cref="F:Atom.Core.PropertyMapperExtensions.Comparer"/>' for the property targeted by the 
            specified <paramref name="targetPropertySelector"/> and with the specified <paramref name="value"/>.
            </summary>
            <typeparam name="TClass">The type of the model</typeparam>
            <param name="mapper">The mapper</param>
            <param name="targetPropertySelector">Expression that selects a property from the <typeparamref name="TClass"/></param>
            <param name="value">The value</param>
            <returns></returns>
        </member>
        <member name="M:Atom.Core.PropertyMapperExtensions.MapComparer``1(Atom.Core.PropertyMapper{``0},System.Reflection.PropertyInfo,System.Object)">
            <summary>
            Create a map for the map collection with id: '<see cref="F:Atom.Core.PropertyMapperExtensions.Comparer"/>'
            for the specified <paramref name="propertyInfo"/>
            and with the specified <paramref name="value"/>.
            NOTE: This method should only be used by implementations related to <see cref="N:System.Reflection"/>!
            </summary>
            <typeparam name="TClass">The type of the model</typeparam>
            <param name="mapper">The mapper</param>
            <param name="propertyInfo">The property info</param>
            <param name="value">The value</param>
            <returns></returns>
        </member>
        <member name="M:Atom.Core.PropertyMapperExtensions.MapNullableComparer``2(Atom.Core.PropertyMapper{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{``1}}})">
            <summary>
            Create a map for the map collection with id: '<see cref="F:Atom.Core.PropertyMapperExtensions.Comparer"/>' for the property targeted by the 
            specified <paramref name="targetPropertySelector"/> and with a <see cref="T:Atom.Core.NullableComparableComparer`1"/>.
            </summary>
            <typeparam name="TClass">The type of the model</typeparam>
            <typeparam name="TKey">The type of the nullable struct</typeparam>
            <param name="mapper">The mapper</param>
            <param name="targetPropertySelector">Expression that selects a property from the <typeparamref name="TClass"/></param>
            <returns></returns>
        </member>
        <member name="M:Atom.Core.PropertyMapperExtensions.MapEnumerableComparer``2(Atom.Core.PropertyMapper{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
            <summary>
            Create a map for the map collection with id: '<see cref="F:Atom.Core.PropertyMapperExtensions.Comparer"/>' for the property targeted by the 
            specified <paramref name="targetPropertySelector"/> and with a <see cref="T:Atom.Core.LengthBasedEnumerableComparer"/>.
            </summary>
            <typeparam name="TClass">The type of the model</typeparam>
            <typeparam name="TKey">The type of the enumerable</typeparam>
            <param name="mapper">The mapper</param>
            <param name="targetPropertySelector">Expression that selects a property from the <typeparamref name="TClass"/></param>
            <returns></returns>
        </member>
        <member name="M:Atom.Core.PropertyMapperExtensions.MapCategory``1(Atom.Core.PropertyMapper{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.String)">
            <summary>
            Create a map for the map collection with id: '<see cref="F:Atom.Core.PropertyMapperExtensions.Category"/>' for the property targeted by the 
            specified <paramref name="targetPropertySelector"/> and with the specified <paramref name="categoryName"/>.
            </summary>
            <typeparam name="TClass">The type of the model</typeparam>
            <param name="mapper">The mapper</param>
            <param name="targetPropertySelector">Expression that selects a property from the <typeparamref name="TClass"/></param>
            <param name="categoryName">The name of the category</param>
            <returns></returns>
        </member>
        <member name="M:Atom.Core.PropertyMapperExtensions.MapCategory``1(Atom.Core.PropertyMapper{``0},System.Reflection.PropertyInfo,System.String)">
            <summary>
            Create a map for the map collection with id: '<see cref="F:Atom.Core.PropertyMapperExtensions.Category"/>'
            for the specified <paramref name="propertyInfo"/>
            and with the specified <paramref name="categoryName"/>.
            NOTE: This method should only be used by implementations related to <see cref="N:System.Reflection"/>!
            </summary>
            <typeparam name="TClass">The type of the model</typeparam>
            <param name="mapper">The mapper</param>
            <param name="propertyInfo">The property info</param>
            <param name="categoryName">The name of the category</param>
            <returns></returns>
        </member>
        <member name="M:Atom.Core.PropertyMapperExtensions.MapCategory``1(Atom.Core.PropertyMapper{``0},System.String,System.Linq.Expressions.Expression{System.Func{``0,System.Object}}[])">
            <summary>
            Create a map for the map collection with id: '<see cref="F:Atom.Core.PropertyMapperExtensions.Category"/>' for the properties targeted by the 
            specified <paramref name="targetPropertySelectors"/> and with the specified <paramref name="categoryName"/>.
            </summary>
            <typeparam name="TClass">The type of the model</typeparam>
            <param name="mapper">The mapper</param>
            <param name="categoryName">The name of the category</param>
            <param name="targetPropertySelectors">Expression that selects a property from the <typeparamref name="TClass"/></param>
            <returns></returns>
        </member>
        <member name="M:Atom.Core.PropertyMapperExtensions.MapIgnore``1(Atom.Core.PropertyMapper{``0},System.Reflection.PropertyInfo)">
            <summary>
            Create a map for the map collection with id: '<see cref="F:Atom.Core.PropertyMapperExtensions.Ignore"/>'
            for the specified <paramref name="propertyInfo"/>.
            NOTE: This method should only be used by implementations related to <see cref="N:System.Reflection"/>!
            </summary>
            <param name="mapper">The mapper</param>
            <param name="propertyInfo">The property info</param>
            <returns></returns>
        </member>
        <member name="M:Atom.Core.PropertyMapperExtensions.MapIgnore``1(Atom.Core.PropertyMapper{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Object}})">
            <summary>
            Create a map for the map collection with id: '<see cref="F:Atom.Core.PropertyMapperExtensions.Ignore"/>' for the property targeted by the 
            specified <paramref name="targetPropertySelector"/>.
            </summary>
            <param name="mapper">The mapper</param>
            <param name="targetPropertySelector">Expression that selects a property from the <typeparamref name="TClass"/></param>
            <returns></returns>
        </member>
        <member name="M:Atom.Core.PropertyMapperExtensions.GetTitle``1(Atom.Core.PropertyMapper{``0},System.Reflection.PropertyInfo,System.String)">
            <summary>
            Gets the value of the specified <paramref name="propertyInfo"/>
            from the map collection with the id : '<see cref="F:Atom.Core.PropertyMapperExtensions.Title"/>'.
            NOTE: This method should only be used by implementations related to <see cref="N:System.Reflection"/>!
            </summary>
            <typeparam name="TClass">The type of the model</typeparam>
            <param name="mapper">The mapper</param>
            <param name="propertyInfo">The property info</param>
            <param name="fallBackValue">The value that is returned when a custom value is not assigned</param>
            <returns></returns>
        </member>
        <member name="M:Atom.Core.PropertyMapperExtensions.GetTitle``1(Atom.Core.PropertyMapper{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.String)">
            <summary>
            Gets the value of the property targeted by the specified <paramref name="targetPropertySelector"/>
            from the map collection with the id : '<see cref="F:Atom.Core.PropertyMapperExtensions.Title"/>'
            </summary>
            <typeparam name="TClass">The type of the model</typeparam>
            <param name="mapper">The mapper</param>
            <param name="targetPropertySelector">Expression that selects a property from the <typeparamref name="TClass"/></param>
            <param name="fallBackValue">The value that is returned when a custom value is not assigned</param>
            <returns></returns>
        </member>
        <member name="M:Atom.Core.PropertyMapperExtensions.GetDescription``1(Atom.Core.PropertyMapper{``0},System.Reflection.PropertyInfo,System.String)">
            <summary>
            Gets the value of the specified <paramref name="propertyInfo"/>
            from the map collection with the id : '<see cref="F:Atom.Core.PropertyMapperExtensions.Description"/>'.
            NOTE: This method should only be used by implementations related to <see cref="N:System.Reflection"/>!
            </summary>
            <typeparam name="TClass">The type of the model</typeparam>
            <param name="mapper">The mapper</param>
            <param name="propertyInfo">The property info</param>
            <param name="fallBackValue">The value that is returned when a custom value is not assigned</param>
            <returns></returns>
        </member>
        <member name="M:Atom.Core.PropertyMapperExtensions.GetDescription``1(Atom.Core.PropertyMapper{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.String)">
            <summary>
            Gets the value of the property targeted by the specified <paramref name="targetPropertySelector"/>
            from the map collection with the id : '<see cref="F:Atom.Core.PropertyMapperExtensions.Description"/>'
            </summary>
            <typeparam name="TClass">The type of the model</typeparam>
            <param name="mapper">The mapper</param>
            <param name="targetPropertySelector">Expression that selects a property from the <typeparamref name="TClass"/></param>
            <param name="fallBackValue">The value that is returned when a custom value is not assigned</param>
            <returns></returns>
        </member>
        <member name="M:Atom.Core.PropertyMapperExtensions.GetSize``1(Atom.Core.PropertyMapper{``0},System.Reflection.PropertyInfo,System.UInt32)">
            <summary>
            Gets the value of the specified <paramref name="propertyInfo"/>
            from the map collection with the id : '<see cref="F:Atom.Core.PropertyMapperExtensions.Size"/>'.
            NOTE: This method should only be used by implementations related to <see cref="N:System.Reflection"/>!
            </summary>
            <typeparam name="TClass">The type of the model</typeparam>
            <param name="mapper">The mapper</param>
            <param name="propertyInfo">The property info</param>
            <param name="fallBackValue">The value that is returned when a custom value is not assigned</param>
            <returns></returns>
        </member>
        <member name="M:Atom.Core.PropertyMapperExtensions.GetSize``1(Atom.Core.PropertyMapper{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.UInt32)">
            <summary>
            Gets the value of the property targeted by the specified <paramref name="targetPropertySelector"/>
            from the map collection with the id : '<see cref="F:Atom.Core.PropertyMapperExtensions.Size"/>'
            </summary>
            <typeparam name="TClass">The type of the model</typeparam>
            <param name="mapper">The mapper</param>
            <param name="targetPropertySelector">Expression that selects a property from the <typeparamref name="TClass"/></param>
            <param name="fallBackValue">The value that is returned when a custom value is not assigned</param>
            <returns></returns>
        </member>
        <member name="M:Atom.Core.PropertyMapperExtensions.GetComparer``1(Atom.Core.PropertyMapper{``0},System.Reflection.PropertyInfo)">
            <summary>
            Gets the value of the specified <paramref name="propertyInfo"/>
            from the map collection with the id : '<see cref="F:Atom.Core.PropertyMapperExtensions.Comparer"/>'.
            NOTE: This method should only be used by implementations related to <see cref="N:System.Reflection"/>!
            </summary>
            <typeparam name="TClass">The type of the model</typeparam>
            <param name="mapper">The mapper</param>
            <param name="propertyInfo">The property info</param>
            <returns></returns>
        </member>
        <member name="M:Atom.Core.PropertyMapperExtensions.GetComparer``1(Atom.Core.PropertyMapper{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Object}})">
            <summary>
            Gets the value of the property targeted by the specified <paramref name="targetPropertySelector"/>
            from the map collection with the id : '<see cref="F:Atom.Core.PropertyMapperExtensions.Comparer"/>'
            </summary>
            <typeparam name="TClass">The type of the model</typeparam>
            <param name="mapper">The mapper</param>
            <param name="targetPropertySelector">Expression that selects a property from the <typeparamref name="TClass"/></param>
            <returns></returns>
        </member>
        <member name="M:Atom.Core.PropertyMapperExtensions.GetCategory``1(Atom.Core.PropertyMapper{``0},System.Reflection.PropertyInfo)">
            <summary>
            Gets the value of the specified <paramref name="propertyInfo"/>
            from the map collection with the id : '<see cref="F:Atom.Core.PropertyMapperExtensions.Category"/>'.
            NOTE: This method should only be used by implementations related to <see cref="N:System.Reflection"/>!
            </summary>
            <typeparam name="TClass">The type of the model</typeparam>
            <param name="mapper">The mapper</param>
            <param name="propertyInfo">The property info</param>
            <returns></returns>
        </member>
        <member name="M:Atom.Core.PropertyMapperExtensions.GetCategory``1(Atom.Core.PropertyMapper{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Object}})">
            <summary>
            Gets the value of the property targeted by the specified <paramref name="targetPropertySelector"/>
            from the map collection with the id : '<see cref="F:Atom.Core.PropertyMapperExtensions.Category"/>'
            </summary>
            <typeparam name="TClass">The type of the model</typeparam>
            <param name="mapper">The mapper</param>
            <param name="targetPropertySelector">Expression that selects a property from the <typeparamref name="TClass"/></param>
            <returns></returns>
        </member>
        <member name="M:Atom.Core.PropertyMapperExtensions.GetIgnore``1(Atom.Core.PropertyMapper{``0},System.Reflection.PropertyInfo)">
            <summary>
            Gets the value of the specified <paramref name="propertyInfo"/>
            from the map collection with the id : '<see cref="F:Atom.Core.PropertyMapperExtensions.Ignore"/>'.
            NOTE: This method should only be used by implementations related to <see cref="N:System.Reflection"/>!
            </summary>
            <typeparam name="TClass">The type of the model</typeparam>
            <param name="mapper">The mapper</param>
            <param name="propertyInfo">The property info</param>
            <returns></returns>
        </member>
        <member name="M:Atom.Core.PropertyMapperExtensions.GetIgnore``1(Atom.Core.PropertyMapper{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Object}})">
            <summary>
            Gets the value of the property targeted by the specified <paramref name="targetPropertySelector"/>
            from the map collection with the id : '<see cref="F:Atom.Core.PropertyMapperExtensions.Ignore"/>'
            </summary>
            <typeparam name="TClass">The type of the model</typeparam>
            <param name="mapper">The mapper</param>
            <param name="targetPropertySelector">Expression that selects a property from the <typeparamref name="TClass"/></param>
            <returns></returns>
        </member>
        <member name="T:Atom.Core.BasePropertyMap">
            <summary>
            The base for every property map
            </summary>
        </member>
        <member name="P:Atom.Core.BasePropertyMap.Property">
            <summary>
            The target property
            </summary>
        </member>
        <member name="M:Atom.Core.BasePropertyMap.#ctor(System.Reflection.PropertyInfo)">
            <summary>
            Default constructor
            </summary>
            <param name="propertyInfo">The property info</param>
        </member>
        <member name="M:Atom.Core.BasePropertyMap.DuplicateMap``1(System.Collections.Generic.List{``0},System.String)">
            <summary>
            Checks if there is already a map of the specified type for the specified property
            </summary>
            <typeparam name="TMap">he type of the map</typeparam>
            <param name="maps">The collection of the maps</param>
            <param name="propertyName">The target property</param>
            <returns></returns>
        </member>
        <member name="T:Atom.Core.BasePropertyTranslationMap">
            <summary>
            The base for every translation map
            </summary>
        </member>
        <member name="M:Atom.Core.BasePropertyTranslationMap.#ctor(System.Reflection.PropertyInfo)">
            <summary>
            Default constructor
            </summary>
            <param name="propertyInfo">The property info</param>
        </member>
        <member name="M:Atom.Core.BasePropertyTranslationMap.TranslateString(System.Object,System.Object)">
            <summary>
            Translates the given value and returns the requested result in a form of a <see cref="T:System.String"/>
            </summary>
            <param name="value">The value to translate</param>
            <param name="instance">The instance of the object that contains the <paramref name="value"/></param>
            <returns></returns>
        </member>
        <member name="M:Atom.Core.BasePropertyTranslationMap.Translate(System.Object,System.Object)">
            <summary>
            Translates the given value and returns the requested result in a form of a <see cref="T:System.Object"/>
            </summary>
            <param name="value">The value to translate</param>
            <param name="instance">The instance of the object that contains the <paramref name="value"/></param>
            <returns></returns>
        </member>
        <member name="T:Atom.Core.BasePropertyTranslationMap`2">
            <summary>
            The base for every translation map
            </summary>
            <typeparam name="TOldValue">The type of the target value</typeparam>
            <typeparam name="TNewValue">The type of the value that the <typeparamref name="TOldValue"/> gets translated to</typeparam>
        </member>
        <member name="F:Atom.Core.BasePropertyTranslationMap`2.mTranslator">
            <summary>
            The translator
            </summary>
        </member>
        <member name="M:Atom.Core.BasePropertyTranslationMap`2.#ctor(System.Reflection.PropertyInfo,System.Func{System.Object,`0,`1})">
            <summary>
            Default constructor
            </summary>
            <param name="propertyInfo">The property info</param>
            <param name="translator">The translator</param>
        </member>
        <member name="M:Atom.Core.BasePropertyTranslationMap`2.Translate(System.Object,System.Object)">
            <summary>
            Translates the given value and returns the requested result in a form of a <see cref="T:System.Object"/>
            </summary>
            <param name="value">The value to translate</param>
            <param name="instance">The instance of the object that contains the <paramref name="value"/></param>
            <returns></returns>
        </member>
        <member name="M:Atom.Core.BasePropertyTranslationMap`2.TranslateSpecific(System.Object,`0)">
            <summary>
            Translates the given value and returns the requested result in a form of a <typeparamref name="TNewValue"/>
            </summary>
            <param name="value">The value to translate</param>
            <param name="instance">The instance of the object that contains the <paramref name="value"/></param>
            <returns></returns>
        </member>
        <member name="T:Atom.Core.BasePropertyTranslationMap`1">
            <summary>
            The base for every translation map
            </summary>
            <typeparam name="TOldValue">The type of the target value</typeparam>
        </member>
        <member name="M:Atom.Core.BasePropertyTranslationMap`1.#ctor(System.Reflection.PropertyInfo,System.Func{System.Object,`0,System.Object})">
            <summary>
            Default constructor
            </summary>
            <param name="propertyInfo">The property info</param>
            <param name="translator">The translator</param>
        </member>
        <member name="T:Atom.Core.StandardPropertyTranslationMap`1">
            <summary>
            The base for every translation map that translates a value to a <see cref="T:System.String"/>
            </summary>
        </member>
        <member name="M:Atom.Core.StandardPropertyTranslationMap`1.#ctor(System.Reflection.PropertyInfo,System.Func{System.Object,`0,System.String})">
            <summary>
            Default constructor
            </summary>
            <param name="propertyInfo">The property info</param>
            <param name="translator">The translator</param>
        </member>
        <member name="M:Atom.Core.StandardPropertyTranslationMap`1.TranslateSpecific(System.Object,`0)">
            <summary>
            Translates the given value and returns the requested result in a form of a <see cref="T:System.String"/>
            </summary>
            <param name="value">The value to translate</param>
            <param name="instance">The instance of the object that contains the <paramref name="value"/></param>
            <returns></returns>
        </member>
        <member name="T:Atom.Core.DoubleObjectPropertyTranslationMap">
            <summary>
            A <see cref="T:Atom.Core.BasePropertyMap"/> that contains translators from and to the property value
            </summary>
        </member>
        <member name="P:Atom.Core.DoubleObjectPropertyTranslationMap.FromPropertyValueConverter">
            <summary>
            Converters the value of the property to an another type
            </summary>
        </member>
        <member name="P:Atom.Core.DoubleObjectPropertyTranslationMap.ToPropertyValueConverter">
            <summary>
            Converts the inserted value to the type of the property value
            </summary>
        </member>
        <member name="M:Atom.Core.DoubleObjectPropertyTranslationMap.#ctor(System.Reflection.PropertyInfo,System.Func{System.Object,System.Object},System.Func{System.Object,System.Object})">
            <summary>
            Default constructor
            </summary>
            <param name="propertyInfo">The property info</param>
            <param name="fromPropertyValueConverter">Converters the value of the property to an another type</param>
            <param name="toPropertyValueConverter">Converts the inserted value to the type of the property value</param>
        </member>
        <member name="T:Atom.Core.EventHandlerPropertyMap`1">
            <summary>
            Maps a property with an event handler whose event args are of type <typeparamref name="TClass"/>
            </summary>
            <typeparam name="TClass">The type of the model</typeparam>
        </member>
        <member name="P:Atom.Core.EventHandlerPropertyMap`1.EventHandler">
            <summary>
            The event handler
            </summary>
        </member>
        <member name="M:Atom.Core.EventHandlerPropertyMap`1.#ctor(System.Reflection.PropertyInfo,System.EventHandler{`0})">
            <summary>
            Default constructor
            </summary>
            <param name="propertyInfo">The property info</param>
            <param name="eventHandler">The event handler</param>
        </member>
        <member name="T:Atom.Core.ObjectPropertyTranslationMap">
            <summary>
            Maps a <see cref="T:System.Object"/> to an another <see cref="T:System.Object"/>
            </summary>
        </member>
        <member name="M:Atom.Core.ObjectPropertyTranslationMap.#ctor(System.Reflection.PropertyInfo,System.Func{System.Object,System.Object,System.Object})">
            <summary>
            Default constructor
            </summary>
            <param name="propertyInfo">The property info</param>
            <param name="translator">The translator</param>
        </member>
        <member name="T:Atom.Core.PropertyToIntMap">
            <summary>
            Maps a property to an <see cref="T:System.Int32"/>
            </summary>
        </member>
        <member name="P:Atom.Core.PropertyToIntMap.Integer">
            <summary>
            The integer value
            </summary>
        </member>
        <member name="M:Atom.Core.PropertyToIntMap.#ctor(System.Reflection.PropertyInfo,System.Int32)">
            <summary>
            Default constructor
            </summary>
            <param name="propertyInfo">The property info</param>
            <param name="integer">The integer</param>
        </member>
        <member name="T:Atom.Core.PropertyToNameMap">
            <summary>
            Maps a property to a custom name
            </summary>
        </member>
        <member name="P:Atom.Core.PropertyToNameMap.Name">
            <summary>
            The custom name
            </summary>
        </member>
        <member name="M:Atom.Core.PropertyToNameMap.#ctor(System.Reflection.PropertyInfo,System.String)">
            <summary>
            Default constructor
            </summary>
            <param name="propertyInfo">The property info</param>
            <param name="name">The custom name</param>
        </member>
        <member name="T:Atom.Core.PropertyToTextFormatterMap">
            <summary>
            Maps a property to a text formatter
            </summary>
        </member>
        <member name="P:Atom.Core.PropertyToTextFormatterMap.Formatter">
            <summary>
            The text formatter
            </summary>
        </member>
        <member name="M:Atom.Core.PropertyToTextFormatterMap.#ctor(System.Reflection.PropertyInfo,System.Func{System.String,System.String,System.String})">
            <summary>
            Default constructor
            </summary>
            <param name="propertyInfo">The property info</param>
            <param name="formatter">The text formatter</param>
        </member>
        <member name="T:Atom.Core.PropertyToTextMap">
            <summary>
            Maps a property to a custom text
            </summary>
        </member>
        <member name="P:Atom.Core.PropertyToTextMap.Text">
            <summary>
            The Text
            </summary>
        </member>
        <member name="M:Atom.Core.PropertyToTextMap.#ctor(System.Reflection.PropertyInfo,System.String)">
            <summary>
            Default constructor
            </summary>
            <param name="propertyInfo">The property info</param>
            <param name="text">The text</param>
        </member>
        <member name="T:Atom.Core.StringPropertyToTextValueMap">
            <summary>
            Maps a <see cref="T:System.String"/> property to a <see cref="P:Atom.Core.StringPropertyToTextValueMap.TextValue"/> type
            </summary>
        </member>
        <member name="P:Atom.Core.StringPropertyToTextValueMap.TextValue">
            <summary>
            The text value
            </summary>
        </member>
        <member name="M:Atom.Core.StringPropertyToTextValueMap.#ctor(System.Reflection.PropertyInfo,Atom.Core.TextValue)">
            <summary>
            Default constructor
            </summary>
            <param name="propertyInfo">The property info</param>
            <param name="textValue">The text value</param>
        </member>
        <member name="T:Atom.Core.ValidationPropertyMap">
            <summary>
            Maps a <see cref="P:Atom.Core.ValidationPropertyMap.Validator"/> to a property that is used for validating its value
            </summary>
        </member>
        <member name="P:Atom.Core.ValidationPropertyMap.Validator">
            <summary>
            The validator
            </summary>
        </member>
        <member name="M:Atom.Core.ValidationPropertyMap.#ctor(System.Reflection.PropertyInfo,System.Func{System.Object,System.Boolean})">
            <summary>
            Default constructor
            </summary>
            <param name="propertyInfo">The property info</param>
            <param name="validator">The validator</param>
        </member>
        <member name="T:Atom.Core.StandardFileExtensionContentTypeProvider">
            <summary>
            An extended <see cref="T:Microsoft.AspNetCore.StaticFiles.FileExtensionContentTypeProvider"/>
            </summary>
        </member>
        <member name="M:Atom.Core.StandardFileExtensionContentTypeProvider.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="T:Atom.Core.MiscHelpers">
            <summary>
            General helper methods
            </summary>
        </member>
        <member name="M:Atom.Core.MiscHelpers.LazyLoad``1(``0@)">
            <summary>
            Initializes the <paramref name="member"/> if it hasn't yet been initialized and returns it
            </summary>
            <typeparam name="T">The type of the member</typeparam>
            <param name="member">The member</param>
            <returns></returns>
        </member>
        <member name="M:Atom.Core.MiscHelpers.LazyLoad``1(``0@,System.Func{``0})">
            <summary>
            Initializes the <paramref name="member"/> using the <paramref name="initializer"/> if it hasn't yet been initialized and returns it
            </summary>
            <typeparam name="T">The type of the member</typeparam>
            <param name="member">The member</param>
            <param name="initializer">The initialized</param>
            <returns></returns>
        </member>
        <member name="M:Atom.Core.MiscHelpers.NullableCompare(System.Object,System.Object,System.Nullable{System.Int32}@)">
            <summary>
            Performs a nullable compare to the specified objects and returns
            <see cref="!:true"/> if the objects where successfully compared and
            <see cref="!:false"/> if a further comparison should be performed
            as well as the nullable comparison result
            </summary>
            <param name="x">The first object</param>
            <param name="y">The second object</param>
            <param name="result">The nullable comparison result</param>
            <returns></returns>
        </member>
        <member name="T:Atom.Core.NullableExtensions">
            <summary>
            Extension methods for nullables
            </summary>
        </member>
        <member name="M:Atom.Core.NullableExtensions.ToPotentialNullString``1(System.Nullable{``0})">
            <summary>
            Returns the string that represents the specified <paramref name="value"/>
            and <see cref="!:null"/> if there isn't a value
            </summary>
            <typeparam name="T">The type of the nullable struct</typeparam>
            <param name="value">The value</param>
            <returns></returns>
        </member>
        <member name="T:Atom.Core.ObjectsExtensions">
            <summary>
            Extension methods for a objects
            </summary>
        </member>
        <member name="M:Atom.Core.ObjectsExtensions.ToPotentialNullString(System.Object,System.String)">
            <summary>
            Returns a string that represents the specified <paramref name="obj"/> and a <see cref="F:System.String.Empty"/> if the <paramref name="obj"/> is <see cref="!:null"/>
            </summary>
            <param name="obj">The object</param>
            <param name="fallBackValue">The value that is returned when the <paramref name="obj"/> is null</param>
            <returns></returns>
        </member>
        <member name="M:Atom.Core.ObjectsExtensions.CastTo``1(System.Object)">
            <summary>
            Casts and returns the given object to the given type
            </summary>
            <typeparam name="T">The given type</typeparam>
            <param name="obj">The given object</param>
            <returns></returns>
        </member>
        <member name="M:Atom.Core.ObjectsExtensions.CheckType``1(System.Object)">
            <summary>
            Checks if the given object is of the given type
            </summary>
            <typeparam name="T">The given type</typeparam>
            <param name="obj">The given object</param>
            <returns></returns>
        </member>
        <member name="M:Atom.Core.ObjectsExtensions.Clone``1(``0)">
            <summary>
            Perform a deep Copy of the object.
            </summary>
            <typeparam name="T">The type of object being copied.</typeparam>
            <param name="source">The object instance to copy.</param>
            <returns>The copied object.</returns>
        </member>
        <member name="T:Atom.Core.NotifyCollectionChangedEventArgsExtensions">
            <summary>
            Extension methods associated with <see cref="T:System.Collections.Specialized.NotifyCollectionChangedEventArgs"/>
            </summary>
        </member>
        <member name="M:Atom.Core.NotifyCollectionChangedEventArgsExtensions.GetAddedItem``1(System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            Gets the added item
            </summary>
            <typeparam name="T">The type of the items of the collection</typeparam>
            <param name="e">The collection event args</param>
            <returns></returns>
        </member>
        <member name="M:Atom.Core.NotifyCollectionChangedEventArgsExtensions.GetRemovedItem``1(System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            Gets the removed item
            </summary>
            <typeparam name="T">The type of the items of the collection</typeparam>
            <param name="e">The collection event args</param>
            <returns></returns>
        </member>
        <member name="M:Atom.Core.NotifyCollectionChangedEventArgsExtensions.GetMovedItems``1(System.Collections.Specialized.NotifyCollectionChangedEventArgs,System.Collections.ObjectModel.ObservableCollection{``0})">
            <summary>
            Gets the items that where affected by the <see cref="F:System.Collections.Specialized.NotifyCollectionChangedAction.Move"/> action of the collection 
            with the <see cref="P:Atom.Core.AffectedItems`1.NewItem"/> being the item that was asked to move to the location of the <see cref="P:Atom.Core.AffectedItems`1.OldItem"/>
            </summary>
            <typeparam name="T">The type of the items of the collection</typeparam>
            <param name="e">The collection event args</param>
            <param name="collection">The source of items</param>
            <returns></returns>
        </member>
        <member name="M:Atom.Core.NotifyCollectionChangedEventArgsExtensions.GetReplacedItem``1(System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            Gets the items that where affected by the <see cref="F:System.Collections.Specialized.NotifyCollectionChangedAction.Replace"/> action of the collection with the <see cref="P:Atom.Core.AffectedItems`1.NewItem"/> being the new item
            </summary>
            <typeparam name="T">The type of the items of the collection</typeparam>
            <param name="e">The collection event args</param>
            <returns></returns>
        </member>
        <member name="T:Atom.Core.AffectedItems`1">
            <summary>
            A struct that contains the items that were affected by the <see cref="F:System.Collections.Specialized.NotifyCollectionChangedAction.Move"/> and the <see cref="F:System.Collections.Specialized.NotifyCollectionChangedAction.Replace"/> actions
            </summary>
            <typeparam name="TItem">The type of the items of the collection</typeparam>
        </member>
        <member name="P:Atom.Core.AffectedItems`1.NewItem">
            <summary>
            The new item
            </summary>
        </member>
        <member name="P:Atom.Core.AffectedItems`1.OldItem">
            <summary>
            The old item
            </summary>
        </member>
        <member name="P:Atom.Core.AffectedItems`1.NewItemIndex">
            <summary>
            The item of the new index
            </summary>
        </member>
        <member name="P:Atom.Core.AffectedItems`1.OldItemIndex">
            <summary>
            The item of the old index
            </summary>
        </member>
        <member name="T:Atom.Core.BaseObservableCollectionEventArgs`1">
            <summary>
            The base for all the observable collection event args
            </summary>
            <typeparam name="TItem">The type of the items</typeparam>
        </member>
        <member name="P:Atom.Core.BaseObservableCollectionEventArgs`1.Collection">
            <summary>
            The collection
            </summary>
        </member>
        <member name="M:Atom.Core.BaseObservableCollectionEventArgs`1.#ctor(System.Collections.ObjectModel.ObservableCollection{`0})">
            <summary>
            Default constructor
            </summary>
            <param name="collection">The collection</param>
        </member>
        <member name="T:Atom.Core.ItemAddedEventArgs`1">
            <summary>
            Event args for when an item is added to the collection
            </summary>
            <typeparam name="TItem">The type of the items</typeparam>
        </member>
        <member name="P:Atom.Core.ItemAddedEventArgs`1.Item">
            <summary>
            The item that was added
            </summary>
        </member>
        <member name="P:Atom.Core.ItemAddedEventArgs`1.Index">
            <summary>
            The index of the item in the collection before the removal
            </summary>
        </member>
        <member name="M:Atom.Core.ItemAddedEventArgs`1.#ctor(System.Collections.ObjectModel.ObservableCollection{`0},`0,System.Int32)">
            <summary>
            Default constructor
            </summary>
            <param name="collection">The collection</param>
            <param name="item">The item that was added</param>
            <param name="index">The index of the item in the collection before the removal</param>
        </member>
        <member name="T:Atom.Core.ItemAddedEventArgs`2">
            <summary>
            Event args for when an item is added to the collection
            </summary>
            <typeparam name="TItem">The type of the items</typeparam>
            <typeparam name="TElement">The type of the elements</typeparam>
        </member>
        <member name="P:Atom.Core.ItemAddedEventArgs`2.Element">
            <summary>
            The element that was added
            </summary>
        </member>
        <member name="M:Atom.Core.ItemAddedEventArgs`2.#ctor(System.Collections.ObjectModel.ObservableCollection{`0},`0,`1,System.Int32)">
            <summary>
            Default constructor
            </summary>
            <param name="collection">The collection</param>
            <param name="item">The item that was added</param>
            <param name="element">The element that was added</param>
            <param name="index">The index of the item in the collection before the removal</param>
        </member>
        <member name="T:Atom.Core.ItemRemovedEventArgs`1">
            <summary>
            Event args for when an item is removed from the collection
            </summary>
            <typeparam name="TItem">The type of the items</typeparam>
        </member>
        <member name="P:Atom.Core.ItemRemovedEventArgs`1.Item">
            <summary>
            The item that was removed
            </summary>
        </member>
        <member name="P:Atom.Core.ItemRemovedEventArgs`1.Index">
            <summary>
            The index of the item in the collection before the removal
            </summary>
        </member>
        <member name="M:Atom.Core.ItemRemovedEventArgs`1.#ctor(System.Collections.ObjectModel.ObservableCollection{`0},`0,System.Int32)">
            <summary>
            Default constructor
            </summary>
            <param name="collection">The collection</param>
            <param name="item">The item that was removed</param>
            <param name="index">The index of the item in the collection before the removal</param>
        </member>
        <member name="T:Atom.Core.ItemRemovedEventArgs`2">
            <summary>
            Event args for when an item is removed from the collection
            </summary>
            <typeparam name="TItem">The type of the items</typeparam>
            <typeparam name="TElement">The type of the elements</typeparam>
        </member>
        <member name="P:Atom.Core.ItemRemovedEventArgs`2.Element">
            <summary>
            The element that was removed
            </summary>
        </member>
        <member name="M:Atom.Core.ItemRemovedEventArgs`2.#ctor(System.Collections.ObjectModel.ObservableCollection{`0},`0,`1,System.Int32)">
            <summary>
            Default constructor
            </summary>
            <param name="collection">The collection</param>
            <param name="item">The item that was removed</param>
            <param name="index">The index of the item in the collection before the removal</param>
            <param name="element">The element that was removed</param>
        </member>
        <member name="T:Atom.Core.ItemMovedEventArgs`1">
            <summary>
            Event args for when an item is moved in the collection
            </summary>
            <typeparam name="TItem">The type of the items</typeparam>
        </member>
        <member name="P:Atom.Core.ItemMovedEventArgs`1.Item1">
            <summary>
            The first item
            </summary>
        </member>
        <member name="P:Atom.Core.ItemMovedEventArgs`1.Item1Index">
            <summary>
            The index of the first item
            </summary>
        </member>
        <member name="P:Atom.Core.ItemMovedEventArgs`1.Item2">
            <summary>
            The second item
            </summary>
        </member>
        <member name="P:Atom.Core.ItemMovedEventArgs`1.Item2Index">
            <summary>
            The index of the second item
            </summary>
        </member>
        <member name="M:Atom.Core.ItemMovedEventArgs`1.#ctor(System.Collections.ObjectModel.ObservableCollection{`0},`0,System.Int32,`0,System.Int32)">
            <summary>
            Default constructor
            </summary>
            <param name="collection">The collection</param>
            <param name="item1">The first item</param>
            <param name="item1Index">The index of the first item</param>
            <param name="item2">The second item</param>
            <param name="item2Index">The index of the second item</param>
        </member>
        <member name="T:Atom.Core.ItemMovedEventArgs`2">
            <summary>
            Event args for when an item is moved in the collection
            </summary>
            <typeparam name="TItem">The type of the items</typeparam>
            <typeparam name="TElement">The type of the elements</typeparam>
        </member>
        <member name="P:Atom.Core.ItemMovedEventArgs`2.Element1">
            <summary>
            The first element
            </summary>
        </member>
        <member name="P:Atom.Core.ItemMovedEventArgs`2.Element2">
            <summary>
            The second element
            </summary>
        </member>
        <member name="M:Atom.Core.ItemMovedEventArgs`2.#ctor(System.Collections.ObjectModel.ObservableCollection{`0},`0,`1,System.Int32,`0,`1,System.Int32)">
            <summary>
            Default constructor
            </summary>
            <param name="collection">The collection</param>
            <param name="item1">The first item</param>
            <param name="element1">The first element</param>
            <param name="item1Index">The index of the first item</param>
            <param name="item2">The second item</param>
            <param name="element2">The second element</param>
            <param name="item2Index">The index of the second item</param>
        </member>
        <member name="T:Atom.Core.ItemReplacedEventArgs`1">
            <summary>
            Event args for when an item is replaced in the collection
            </summary>
            <typeparam name="TItem">The type of the items</typeparam>
        </member>
        <member name="P:Atom.Core.ItemReplacedEventArgs`1.RemovedItem">
            <summary>
            The item that was replaced
            </summary>
        </member>
        <member name="P:Atom.Core.ItemReplacedEventArgs`1.AddedItem">
            <summary>
            The new item
            </summary>
        </member>
        <member name="P:Atom.Core.ItemReplacedEventArgs`1.Index">
            <summary>
            The index of the replaced/new item
            </summary>
        </member>
        <member name="M:Atom.Core.ItemReplacedEventArgs`1.#ctor(System.Collections.ObjectModel.ObservableCollection{`0},`0,`0,System.Int32)">
            <summary>
            Default constructor
            </summary>
            <param name="collection">The collection</param>
            <param name="removedItem">The item that was replaced</param>
            <param name="addedItem">The new item</param>
            <param name="index">The index of the replaced/new item</param>
        </member>
        <member name="T:Atom.Core.ItemReplacedEventArgs`2">
            <summary>
            Event args for when an item is replaced in the collection
            </summary>
            <typeparam name="TItem">The type of the items</typeparam>
            <typeparam name="TElement">The type of the elements</typeparam>
        </member>
        <member name="P:Atom.Core.ItemReplacedEventArgs`2.RemovedElement">
            <summary>
            The element that was replaced
            </summary>
        </member>
        <member name="P:Atom.Core.ItemReplacedEventArgs`2.AddedElement">
            <summary>
            The new element
            </summary>
        </member>
        <member name="M:Atom.Core.ItemReplacedEventArgs`2.#ctor(System.Collections.ObjectModel.ObservableCollection{`0},`0,`1,`0,`1,System.Int32)">
            <summary>
            Default constructor
            </summary>
            <param name="collection">The collection</param>
            <param name="removedItem">The item that was replaced</param>
            <param name="addedElement">The new element</param>
            <param name="removedElement">The element that was removed</param>
            <param name="addedItem">The new item</param>
            <param name="index">The index of the replaced/new item</param>
        </member>
        <member name="T:Atom.Core.ItemsClearedEventArgs`1">
            <summary>
            Event args for when a collection gets cleared
            </summary>
            <typeparam name="TItem">The type of the items</typeparam>
        </member>
        <member name="P:Atom.Core.ItemsClearedEventArgs`1.ClearedItems">
            <summary>
            The items that got cleared
            </summary>
        </member>
        <member name="M:Atom.Core.ItemsClearedEventArgs`1.#ctor(System.Collections.ObjectModel.ObservableCollection{`0},System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="T:Atom.Core.ItemsClearedEventArgs`2">
            <summary>
            Event args for when a collection gets cleared
            </summary>
            <typeparam name="TItem">The type of the items</typeparam>
            <typeparam name="TElement">The type of the elements</typeparam>
        </member>
        <member name="P:Atom.Core.ItemsClearedEventArgs`2.Mapper">
            <summary>
            The mapper
            </summary>
        </member>
        <member name="M:Atom.Core.ItemsClearedEventArgs`2.#ctor(System.Collections.ObjectModel.ObservableCollection{`0},System.Collections.Generic.IDictionary{`0,`1})">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="T:Atom.Core.ItemAddedEventHandler`1">
            <summary>
            Represents the method that will handle events raised when an item is added to an observable collection
            </summary>
            <typeparam name="TItem">The type of the items</typeparam>
            <param name="sender">The object that contains the source</param>
            <param name="args">The arguments of the change</param>
        </member>
        <member name="T:Atom.Core.ItemAddedEventHandler`2">
            <summary>
            Represents the method that will handle events raised when an item is added to an observable collection
            </summary>
            <typeparam name="TItem">The type of the items</typeparam>
            <typeparam name="TElement">The type of the elements</typeparam>
            <param name="sender">The object that contains the source</param>
            <param name="args">The arguments of the change</param>
        </member>
        <member name="T:Atom.Core.ItemRemovedEventHandler`1">
            <summary>
            Represents the method that will handle events raised when an item is removed to an observable collection
            </summary>
            <typeparam name="TItem">The type of the items</typeparam>
            <param name="sender">The object that contains the source</param>
            <param name="args">The arguments of the change</param>
        </member>
        <member name="T:Atom.Core.ItemRemovedEventHandler`2">
            <summary>
            Represents the method that will handle events raised when an item is removed to an observable collection
            </summary>
            <typeparam name="TItem">The type of the items</typeparam>
            <typeparam name="TElement">The type of the elements</typeparam>
            <param name="sender">The object that contains the source</param>
            <param name="args">The arguments of the change</param>
        </member>
        <member name="T:Atom.Core.ItemMovedEventHandler`1">
            <summary>
            Represents the method that will handle events raised when an item is moved to an observable collection
            </summary>
            <typeparam name="TItem">The type of the items</typeparam>
            <param name="sender">The object that contains the source</param>
            <param name="args">The arguments of the change</param>
        </member>
        <member name="T:Atom.Core.ItemMovedEventHandler`2">
            <summary>
            Represents the method that will handle events raised when an item is moved to an observable collection
            </summary>
            <typeparam name="TItem">The type of the items</typeparam>
            <typeparam name="TElement">The type of the elements</typeparam>
            <param name="sender">The object that contains the source</param>
            <param name="args">The arguments of the change</param>
        </member>
        <member name="T:Atom.Core.ItemReplacedEventHandler`1">
            <summary>
            Represents the method that will handle events raised when an item is replaced to an observable collection
            </summary>
            <typeparam name="TItem">The type of the items</typeparam>
            <param name="sender">The object that contains the source</param>
            <param name="args">The arguments of the change</param>
        </member>
        <member name="T:Atom.Core.ItemReplacedEventHandler`2">
            <summary>
            Represents the method that will handle events raised when an item is replaced to an observable collection
            </summary>
            <typeparam name="TItem">The type of the items</typeparam>
            <typeparam name="TElement">The type of the elements</typeparam>
            <param name="sender">The object that contains the source</param>
            <param name="args">The arguments of the change</param>
        </member>
        <member name="T:Atom.Core.ItemsClearedEventHandler`1">
            <summary>
            Represents the method that will handle events raised when the collection is cleared
            </summary>
            <typeparam name="TItem">The type of the items</typeparam>
            <param name="sender">The object that contains the source</param>
            <param name="args">The arguments of the change</param>
        </member>
        <member name="T:Atom.Core.ItemsClearedEventHandler`2">
            <summary>
            Represents the method that will handle events raised when the collection is cleared
            </summary>
            <typeparam name="TItem">The type of the items</typeparam>
            <typeparam name="TElement">The type of the elements</typeparam>
            <param name="sender">The object that contains the source</param>
            <param name="args">The arguments of the change</param>
        </member>
        <member name="T:Atom.Core.ObservableCollectionExtensions">
            <summary>
            Extension methods associated with <see cref="T:System.Collections.ObjectModel.ObservableCollection`1"/>
            </summary>
        </member>
        <member name="M:Atom.Core.ObservableCollectionExtensions.Sort``2(System.Collections.ObjectModel.ObservableCollection{``0},System.Func{``0,``1})">
            <summary>
            Sorts the items of the collection in ascending order according to a key
            </summary>
            <typeparam name="T">The type of the items of the <paramref name="obsCollection"/></typeparam>
            <typeparam name="TKey">The type of the key returned by <paramref name="keySelector"/></typeparam>
            <param name="obsCollection">The target observable collection</param>
            <param name="keySelector">A function to extract a key from an item</param>
        </member>
        <member name="M:Atom.Core.ObservableCollectionExtensions.SortByStringValue``1(System.Collections.ObjectModel.ObservableCollection{``0},System.Func{``0,System.String})">
            <summary>
            Sorts the items of the collection in a ascending order according to a string value provided by an extractor
            </summary>
            <typeparam name="T">The type of the items of the <paramref name="obsCollection"/></typeparam>
            <param name="obsCollection">The target observable collection</param>
            <param name="valueExtractor">Extracts a string value from an item</param>
        </member>
        <member name="M:Atom.Core.ObservableCollectionExtensions.SortByDescending``2(System.Collections.ObjectModel.ObservableCollection{``0},System.Func{``0,``1})">
            <summary>
            Sorts the items of the collection in a descending order according to a key
            </summary>
            <typeparam name="T">The type of the items of the <paramref name="obsCollection"/></typeparam>
            <typeparam name="TKey">The type of the key returned by <paramref name="keySelector"/></typeparam>
            <param name="obsCollection">The target observable collection</param>
            <param name="keySelector">A function to extract a key from an item</param>
        </member>
        <member name="M:Atom.Core.ObservableCollectionExtensions.SortByDescendingStringValue``1(System.Collections.ObjectModel.ObservableCollection{``0},System.Func{``0,System.String})">
            <summary>
            Sorts the items of the collection in a descending order according to a string value provided by an extractor
            </summary>
            <typeparam name="T">The type of the items of the <paramref name="obsCollection"/></typeparam>
            <param name="obsCollection">The target observable collection</param>
            <param name="valueExtractor">Extracts a string value from an item</param>
        </member>
        <member name="M:Atom.Core.ObservableCollectionExtensions.Sort``2(System.Collections.ObjectModel.ObservableCollection{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})">
            <summary>
            Sorts the items of the collection in ascending order according to a key
            </summary>
            <typeparam name="T">The type of the items of the <paramref name="obsCollection"/></typeparam>
            <typeparam name="TKey">The type of the key returned by <paramref name="keySelector"/></typeparam>
            <param name="obsCollection">The target observable collection</param>
            <param name="keySelector">A function to extract a key from an item</param>
            <param name="comparer">An <see cref="T:System.Collections.Generic.IComparer`1"/> to compare keys</param>
        </member>
        <member name="M:Atom.Core.ObservableCollectionExtensions.SortByDescending``2(System.Collections.ObjectModel.ObservableCollection{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})">
            <summary>
            Sorts the items of the collection in descending order according to a key
            </summary>
            <typeparam name="T">The type of the items of the <paramref name="obsCollection"/></typeparam>
            <typeparam name="TKey">The type of the key returned by <paramref name="keySelector"/></typeparam>
            <param name="obsCollection">The target observable collection</param>
            <param name="keySelector">A function to extract a key from an item</param>
            <param name="comparer">An <see cref="T:System.Collections.Generic.IComparer`1"/> to compare keys</param>
        </member>
        <member name="M:Atom.Core.ObservableCollectionExtensions.InternalSort``1(System.Collections.ObjectModel.ObservableCollection{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Moves the items of the collection so that their orders are the same as those of the items provided
            </summary>
            <typeparam name="T">The type of the items of the <paramref name="obsCollection"/></typeparam>
            <param name="obsCollection">The target observable collection</param>
            <param name="sortedItems">An <see cref="T:System.Collections.Generic.IEnumerable`1"/> to provide item orders</param>
        </member>
        <member name="T:Atom.Core.ShortableObservableCollection`1">
            <summary>
            An observable collection that has the ability to short the items it contains
            </summary>
            <typeparam name="T">The type of elements in the collection.</typeparam>
        </member>
        <member name="M:Atom.Core.ShortableObservableCollection`1.#ctor">
            <summary>
            Initializes a new instance of the System.Collections.ObjectModel.ObservableCollection`
            </summary>
        </member>
        <member name="M:Atom.Core.ShortableObservableCollection`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Initializes a new instance of the System.Collections.ObjectModel.ObservableCollection
            class that contains elements copied from the specified collection.
            </summary>
            <param name="collection">The collection from which the elements are copied.</param>
        </member>
        <member name="M:Atom.Core.ShortableObservableCollection`1.#ctor(System.Collections.Generic.List{`0})">
            <summary>
            Initializes a new instance of the System.Collections.ObjectModel.ObservableCollection
            class that contains elements copied from the specified list.
            </summary>
            <param name="list">The list from which the elements are copied.</param>
        </member>
        <member name="M:Atom.Core.ShortableObservableCollection`1.Sort``1(System.Func{`0,``0})">
            <summary>
            Sorts the items of the collection in ascending order according to a key
            </summary>
            <typeparam name="TKey">The type of the key returned by <paramref name="keySelector"/></typeparam>
            <param name="keySelector">A function to extract a key from an item</param>
        </member>
        <member name="M:Atom.Core.ShortableObservableCollection`1.SortByDescending``1(System.Func{`0,``0})">
            <summary>
            Sorts the items of the collection in a descending order according to a key
            </summary>
            <typeparam name="TKey">The type of the key returned by <paramref name="keySelector"/></typeparam>
            <param name="keySelector">A function to extract a key from an item</param>
        </member>
        <member name="M:Atom.Core.ShortableObservableCollection`1.Sort``1(System.Func{`0,``0},System.Collections.Generic.IComparer{``0})">
            <summary>
            Sorts the items of the collection in ascending order according to a key
            </summary>
            <typeparam name="TKey">The type of the key returned by <paramref name="keySelector"/></typeparam>
            <param name="keySelector">A function to extract a key from an item</param>
            <param name="comparer">An <see cref="T:System.Collections.Generic.IComparer`1"/> to compare keys</param>
        </member>
        <member name="M:Atom.Core.ShortableObservableCollection`1.SortByDescending``1(System.Func{`0,``0},System.Collections.Generic.IComparer{``0})">
            <summary>
            Sorts the items of the collection in descending order according to a key
            </summary>
            <typeparam name="TKey">The type of the key returned by <paramref name="keySelector"/></typeparam>
            <param name="keySelector">A function to extract a key from an item</param>
            <param name="comparer">An <see cref="T:System.Collections.Generic.IComparer`1"/> to compare keys</param>
        </member>
        <member name="M:Atom.Core.ShortableObservableCollection`1.InternalSort(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Moves the items of the collection so that their orders are the same as those of the items provided
            </summary>
            <param name="sortedItems">An <see cref="T:System.Collections.Generic.IEnumerable`1"/> to provide item orders</param>
        </member>
        <member name="T:Atom.Core.ReflectionHelpers">
            <summary>
            Helpers methods related to reflection
            </summary>
        </member>
        <member name="M:Atom.Core.ReflectionHelpers.CreateList(System.Type)">
            <summary>
            Creates and returns a <see cref="T:System.Collections.Generic.List`1"/> that can contains items of the specified <paramref name="type"/>
            </summary>
            <param name="type">The type of the items the list contains</param>
            <returns></returns>
        </member>
        <member name="M:Atom.Core.ReflectionHelpers.GetValues(System.Object,System.String,System.Reflection.PropertyInfo)">
            <summary>
            Gets the values of the specified sub-<paramref name="propertyInfo"/>/s of the specified <paramref name="instance"/>.
            </summary>
            <param name="instance">The instance that is directly or indirectly the parent of the specified <paramref name="propertyInfo"/></param>
            <param name="propertyPath">The property path used for navigating to the sub-property of the <paramref name="instance"/> that contains the <paramref name="propertyInfo"/></param>
            <param name="propertyInfo">The property whose value to get</param>
            <returns></returns>
        </member>
        <member name="M:Atom.Core.ReflectionHelpers.RaiseEvent``1(System.Object,System.String,``0)">
            <summary>
            Raises the event that is contained in the specified <paramref name="source"/> with the specified <paramref name="eventName"/>
            </summary>
            <typeparam name="TEventArgs">The type of the calendar event arguments</typeparam>
            <param name="source">The object that contains the event</param>
            <param name="eventName">The name of the event</param>
            <param name="eventArgs">The event arguments of the event</param>
        </member>
        <member name="M:Atom.Core.ReflectionHelpers.CreateGenericInstance(System.Type,System.Type[])">
            <summary>
            Creates and instance of the specified generic underlying <paramref name="type"/>.
            NOTE: In order to call this method the generic underlying type must be used!
            NOTE: In order to retrieve the generic underlying type the <see cref="M:System.Type.GetGenericTypeDefinition"/>
                  method can be used!
            </summary>
            <param name="type">The generic underlying type</param>
            <param name="genericParams">The generic type parameters</param>
            <returns></returns>
        </member>
        <member name="M:Atom.Core.ReflectionHelpers.GetValues(System.Object,System.Collections.Generic.List{System.Object},System.String,System.Reflection.PropertyInfo)">
            <summary>
            Gets the values of the specified sub-<paramref name="propertyInfo"/>/s of the specified <paramref name="value"/>.
            </summary>
            <param name="value">The value</param>
            <param name="result">The results list where all the values are placed</param>
            <param name="propertyPath">
            The current property path.
            NOTE: Every time this method is called a part of the <paramref name="propertyPath"/> is truncated till none is left!
            </param>
            <param name="propertyInfo">
            The property whose value/s to get.
            NOTE: We can reach that property by using the <paramref name="propertyPath"/> to navigate through the properties of the instance!
            </param>
        </member>
        <member name="M:Atom.Core.ReflectionHelpers.AddValues(System.Object,System.Collections.Generic.List{System.Object})">
            <summary>
            Adds the <paramref name="value"/> to the result if it's no <see cref="!:null"/>
            </summary>
            <param name="value">The potential null value</param>
            <param name="result">The results list</param>
        </member>
        <member name="T:Atom.Core.RegexExtensions">
            <summary>
            Extension methods for <see cref="T:System.Text.RegularExpressions.Regex"/>
            </summary>
        </member>
        <member name="M:Atom.Core.RegexExtensions.MatchNamedGroups(System.Text.RegularExpressions.Regex,System.String,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Searches <paramref name="inputString"/> using the <paramref name="regex"/> regular expression and returns an <see cref="!:IEnumerable&lt;KeyValuePair&lt;string, string&gt;&gt;"/> containing the matches
            </summary>
            <param name="regex">The regular expression that will be used for the matching</param>
            <param name="inputString">The string that will be searched for matches</param>
            <param name="groupNames">An <see cref="!:IEnumerable&lt;KeyValuePair&lt;string, string&gt;&gt;"/> containing the named groups names</param>
            <returns>An <see cref="!:IEnumerable&lt;string&gt;"/> that contains the group names and the matches</returns>
        </member>
        <member name="M:Atom.Core.RegexExtensions.MatchNamedGroups(System.Text.RegularExpressions.Regex,System.String,System.String,System.String)">
            <summary>
            Searches <paramref name="inputString"/> using the <paramref name="regex"/> regular expression and returns an <see cref="!:IEnumerable&lt;KeyValuePair&lt;string, string&gt;&gt;"/> containing the matches
            </summary>
            <param name="regex">The regular expression that will be used for the matching</param>
            <param name="inputString">The string that will be searched for matches</param>
            <param name="groupName">The named group name</param>
            <param name="delimiter">The delimiter</param>
            <returns>An <see cref="!:IEnumerable&lt;KeyValuePair&lt;string, string&gt;&gt;"/> that contains the group names and the matches</returns>
        </member>
        <member name="T:Atom.Core.SecureStringHelpers">
            <summary>
            Helpers for the <see cref="T:System.Security.SecureString"/> class
            </summary>
        </member>
        <member name="M:Atom.Core.SecureStringHelpers.Unsecure(System.Security.SecureString)">
            <summary>
            Unsecures a <see cref="T:System.Security.SecureString"/> to plain text
            </summary>
            <param name="secureString">The secure string</param>
            <returns></returns>
        </member>
        <member name="T:Atom.Core.StringConstants">
            <summary>
            Constants related to <see cref="T:System.String"/>s
            </summary>
        </member>
        <member name="F:Atom.Core.StringConstants.NameHeader">
            <summary>
            Header key that represents a name
            </summary>
        </member>
        <member name="T:Atom.Core.StringExtensions">
            <summary>
            Extension methods for strings
            </summary>
        </member>
        <member name="M:Atom.Core.StringExtensions.GetLetters(System.String)">
            <summary>
            A function that takes in a string and returns only its letters
            </summary>
            <param name="s">The string that must be passed in</param>
            <returns></returns>
        </member>
        <member name="M:Atom.Core.StringExtensions.ExtractUntil(System.String,System.Char)">
            <summary>
            Extracts a string from the specified <paramref name="s"/> from the start of the string until it reaches a <paramref name="stopingChar"/> 
            </summary>
            <param name="s"></param>
            <param name="stopingChar"></param>
            <returns></returns>
        </member>
        <member name="M:Atom.Core.StringExtensions.SubStringBetween(System.String,System.Char,System.Char)">
            <summary>
            A function that extracts a string from the specified <paramref name="s"/> that's between the <paramref name="startChar"/> and the <paramref name="endChar"/> characters
            </summary>
            <param name="s">The string value</param>
            <param name="startChar">The first character</param>
            <param name="endChar">The second character</param>
            <returns></returns>
        </member>
        <member name="M:Atom.Core.StringExtensions.IsNullOrEmpty(System.String)">
            <summary>
            Checks whether the string is null or empty
            </summary>
            <param name="s"></param>
            <returns>Returns true if the string is null or empty, false otherwise</returns>
        </member>
        <member name="M:Atom.Core.StringExtensions.IsNullOrWhiteSpace(System.String)">
            <summary>
            Checks whether the string is null or whitespace
            </summary>
            <param name="s"></param>
            <returns>Return true if the string is null or white space, false otherwise</returns>
        </member>
        <member name="M:Atom.Core.StringExtensions.IsEmail(System.String)">
            <summary>
            Checks if the inserted string is a valid email
            </summary>
            <param name="s">The string to check</param>
            <returns></returns>
        </member>
        <member name="M:Atom.Core.StringExtensions.IsPhoneNumber(System.String)">
            <summary>
            Checks if the <paramref name="s"/> is a valid phone number
            </summary>
            <param name="s">The value to check</param>
            <returns></returns>
        </member>
        <member name="M:Atom.Core.StringExtensions.IsE164PhoneNumber(System.String)">
            <summary>
            Checks if the <paramref name="s"/> is a valid E.164 phone number
            </summary>
            <param name="s">The string</param>
            <returns></returns>
        </member>
        <member name="M:Atom.Core.StringExtensions.ApplySpacingToPascalCaseString(System.String)">
            <summary>
            Applies spacing to a Pascal case string.
            Ex. UnitedStates -> United States
            </summary>
            <param name="s">The string</param>
            <returns></returns>
        </member>
        <member name="M:Atom.Core.StringExtensions.IsUrl(System.String)">
            <summary>
            Checks if the specified <paramref name="s"/> is a valid Url
            </summary>
            <param name="s">The string</param>
            <returns></returns>
        </member>
        <member name="M:Atom.Core.StringExtensions.GetLastPart(System.String,System.Char)">
            <summary>
            Returns the last part of the specified string
            </summary>
            <param name="s">The string</param>
            <param name="separator">The string separator</param>
            <returns></returns>
        </member>
        <member name="M:Atom.Core.StringExtensions.ToBool(System.String)">
            <summary>
            Converts the given <see cref="T:System.String"/> to a <see cref="T:System.Boolean"/>
            </summary>
            <param name="s">The string to convert</param>
            <returns></returns>
        </member>
        <member name="M:Atom.Core.StringExtensions.ToNumber(System.String,System.Type)">
            <summary>
            Converts the given <see cref="T:System.String"/> to a number of the specified <paramref name="numericType"/>
            </summary>
            <param name="s">The string to converter</param>
            <param name="numericType">The numeric type</param>
            <returns></returns>
        </member>
        <member name="M:Atom.Core.StringExtensions.ToNumber``1(System.String)">
            <summary>
            COnverts the given <see cref="T:System.String"/> to a number of the specified <typeparamref name="T"/>
            </summary>
            <typeparam name="T">The numeric type</typeparam>
            <param name="s">The string to convert</param>
            <returns></returns>
        </member>
        <member name="M:Atom.Core.StringExtensions.ToSByte(System.String)">
            <summary>
            Converts the given <see cref="T:System.String"/> to a <see cref="T:System.SByte"/>
            </summary>
            <param name="s">The string to convert</param>
            <returns></returns>
        </member>
        <member name="M:Atom.Core.StringExtensions.ToNullableSByte(System.String)">
            <summary>
            Converts the given <see cref="T:System.String"/> to a <see cref="!:sbyte?"/>
            </summary>
            <param name="s">The string to convert</param>
            <returns></returns>
        </member>
        <member name="M:Atom.Core.StringExtensions.ToByte(System.String)">
            <summary>
            Converts the given <see cref="T:System.String"/> to a <see cref="T:System.Byte"/>
            </summary>
            <param name="s">The string to convert</param>
            <returns></returns>
        </member>
        <member name="M:Atom.Core.StringExtensions.ToNullableByte(System.String)">
            <summary>
            Converts the given <see cref="T:System.String"/> to a <see cref="!:byte?"/>
            </summary>
            <param name="s">The string to convert</param>
            <returns></returns>
        </member>
        <member name="M:Atom.Core.StringExtensions.ToShort(System.String)">
            <summary>
            Converts the given <see cref="T:System.String"/> to a <see cref="T:System.Int16"/>
            </summary>
            <param name="s">The string to convert</param>
            <returns></returns>
        </member>
        <member name="M:Atom.Core.StringExtensions.ToNullableShort(System.String)">
            <summary>
            Converts the given <see cref="T:System.String"/> to a <see cref="!:short?"/>
            </summary>
            <param name="s">The string to convert</param>
            <returns></returns>
        </member>
        <member name="M:Atom.Core.StringExtensions.ToUnsignedShort(System.String)">
            <summary>
            Converts the given <see cref="T:System.String"/> to a <see cref="T:System.UInt16"/>
            </summary>
            <param name="s">The string to convert</param>
            <returns></returns>
        </member>
        <member name="M:Atom.Core.StringExtensions.ToNullableUnsignedShort(System.String)">
            <summary>
            Converts the given <see cref="T:System.String"/> to a <see cref="!:ushort?"/>
            </summary>
            <param name="s">The string to convert</param>
            <returns></returns>
        </member>
        <member name="M:Atom.Core.StringExtensions.ToInt(System.String)">
            <summary>
            Converts the given <see cref="T:System.String"/> to an <see cref="T:System.Int32"/>
            </summary>
            <remarks>
                An Int32 can only be up to 9 digits long!
            </remarks>
            <param name="s">The string to convert</param>
            <returns></returns>
        </member>
        <member name="M:Atom.Core.StringExtensions.ToNullableInt(System.String)">
            <summary>
            Converts the given <see cref="T:System.String"/> to a <see cref="!:int?"/>
            </summary>
            <param name="s">The string to convert</param>
            <returns></returns>
        </member>
        <member name="M:Atom.Core.StringExtensions.ToUnsignedInt(System.String)">
            <summary>
            Converts the given <see cref="T:System.String"/> to an <see cref="T:System.UInt32"/>
            </summary>
            <remarks>
                An Int32 can only be up to 9 digits long!
            </remarks>
            <param name="s">The string to convert</param>
            <returns></returns>
        </member>
        <member name="M:Atom.Core.StringExtensions.ToNullableUnsignedInt(System.String)">
            <summary>
            Converts the given <see cref="T:System.String"/> to a <see cref="!:uint?"/>
            </summary>
            <param name="s">The string to convert</param>
            <returns></returns>
        </member>
        <member name="M:Atom.Core.StringExtensions.ToLong(System.String)">
            <summary>
            Converts the given <see cref="T:System.String"/> to a <see cref="T:System.Int64"/>
            </summary>
            <param name="s">The string to convert</param>
            <returns></returns>
        </member>
        <member name="M:Atom.Core.StringExtensions.ToNullableLong(System.String)">
            <summary>
            Converts the given <see cref="T:System.String"/> to a <see cref="!:long?"/>
            </summary>
            <param name="s">The string to convert</param>
            <returns></returns>
        </member>
        <member name="M:Atom.Core.StringExtensions.ToUnsignedLong(System.String)">
            <summary>
            Converts the given <see cref="T:System.String"/> to a <see cref="T:System.UInt64"/>
            </summary>
            <param name="s">The string to convert</param>
            <returns></returns>
        </member>
        <member name="M:Atom.Core.StringExtensions.ToNullableUnsignedLong(System.String)">
            <summary>
            Converts the given <see cref="T:System.String"/> to a <see cref="!:ulong?"/>
            </summary>
            <param name="s">The string to convert</param>
            <returns></returns>
        </member>
        <member name="M:Atom.Core.StringExtensions.ToFloat(System.String)">
            <summary>
            Converts the given <see cref="T:System.String"/> to a <see cref="T:System.Single"/>
            </summary>
            <param name="s">The string to convert</param>
            <returns></returns>
        </member>
        <member name="M:Atom.Core.StringExtensions.ToNullableFloat(System.String)">
            <summary>
            Converts the given <see cref="T:System.String"/> to a <see cref="!:float?"/>
            </summary>
            <param name="s">The string to convert</param>
            <returns></returns>
        </member>
        <member name="M:Atom.Core.StringExtensions.ToDouble(System.String)">
            <summary>
            Converts the given <see cref="T:System.String"/> to a <see cref="T:System.Double"/>
            </summary>
            <param name="s">The string to convert</param>
            <returns></returns>
        </member>
        <member name="M:Atom.Core.StringExtensions.ToNullableDouble(System.String)">
            <summary>
            Converts the given <see cref="T:System.String"/> to a <see cref="!:double?"/>
            </summary>
            <param name="s">The string to convert</param>
            <returns></returns>
        </member>
        <member name="M:Atom.Core.StringExtensions.ToDecimal(System.String)">
            <summary>
            Converts the given <see cref="T:System.String"/> to a <see cref="T:System.Decimal"/>
            </summary>
            <param name="s">The string to convert</param>
            <returns></returns>
        </member>
        <member name="M:Atom.Core.StringExtensions.ToNullableDecimal(System.String)">
            <summary>
            Converts the given <see cref="T:System.String"/> to a <see cref="!:decimal?"/>
            </summary>
            <param name="s">The string to convert</param>
            <returns></returns>
        </member>
        <member name="M:Atom.Core.StringExtensions.ExtractNumber(System.String)">
            <summary>
            Extracts the number that is contained in the given <paramref name="s"/>
            </summary>
            <param name="s">The string to extract the number from</param>
            <returns></returns>
        </member>
        <member name="M:Atom.Core.StringExtensions.IsHex(System.String)">
            <summary>
            Checks if the specified <paramref name="s"/> is a valid hex number representation
            </summary>
            <param name="s">The string to check</param>
            <returns></returns>
        </member>
        <member name="M:Atom.Core.StringExtensions.IsHexColor(System.String)">
            <summary>
            Checks if the specified <paramref name="s"/> is a valid hex color representation
            </summary>
            <param name="s">The string to check</param>
            <returns></returns>
        </member>
        <member name="M:Atom.Core.StringExtensions.Split(System.String,System.String)">
            <summary>
            Splits the specified <paramref name="s"/> using the specified <paramref name="separator"/>
            </summary>
            <param name="s">The string to split</param>
            <param name="separator">The string to use as the separator</param>
            <returns></returns>
        </member>
        <member name="M:Atom.Core.StringExtensions.NotNullOrEmpty(System.String)">
            <summary>
            Returns the specified <paramref name="s"/> if it's not null or empty,
            otherwise it throws an <see cref="T:System.ArgumentNullException"/>
            </summary>
            <param name="s">The string</param>
            <returns></returns>
        </member>
        <member name="M:Atom.Core.StringExtensions.GetWordAtPosition(System.String,System.Int32,System.Int32@,System.Int32@)">
            <summary>
            Gets the word contained in the specified <paramref name="s"/> that has 
            a character at the specified <paramref name="position"/>
            </summary>
            <param name="s">The string</param>
            <param name="position">The character position</param>
            <param name="start">The start index of the word</param>
            <param name="end">The end index of the word</param>
            <returns></returns>
        </member>
        <member name="M:Atom.Core.StringExtensions.GetAllIndexesOf(System.String,System.String)">
            <summary>
            Gets all the indexes of the specified <paramref name="s"/> where the specified <paramref name="value"/>
            is contained
            </summary>
            <param name="s">The strings</param>
            <param name="value">The sub string</param>
            <returns></returns>
        </member>
        <member name="M:Atom.Core.StringExtensions.GetLineText(System.String,System.Int32)">
            <summary>
            Gets the text of the specified <paramref name="s"/> at the line with the specified <paramref name="index"/>
            </summary>
            <param name="s">The string</param>
            <param name="index">The index of the line</param>
            <returns></returns>
        </member>
        <member name="M:Atom.Core.StringExtensions.GetLineLength(System.String,System.Int32)">
            <summary>
            Gets the length of the text of the specified <paramref name="s"/> at the line with the specified <paramref name="index"/>
            </summary>
            <param name="s">The string</param>
            <param name="index">The index of line</param>
            <returns></returns>
        </member>
        <member name="M:Atom.Core.StringExtensions.IsIpAddress(System.String)">
            <summary>
            Checks whether the specified <paramref name="s"/> is a valid IP address
            </summary>
            <param name="s">The string</param>
            <returns></returns>
        </member>
        <member name="M:Atom.Core.StringExtensions.IsDouble(System.String)">
            <summary>
            Checks if the specified <paramref name="s"/> is a number or not
            </summary>
            <param name="s">The string</param>
            <returns></returns>
        </member>
        <member name="M:Atom.Core.StringExtensions.IsInteger(System.String)">
            <summary>
            Checks if the specified <paramref name="s"/> is a signed integer or not
            </summary>
            <param name="s">The string</param>
            <returns></returns>
        </member>
        <member name="M:Atom.Core.StringExtensions.IsFileName(System.String)">
            <summary>
            Checks if the specified <paramref name="s"/> is a valid file name
            </summary>
            <param name="s">The string to check</param>
            <returns></returns>
        </member>
        <member name="T:Atom.Core.StringHelpers">
            <summary>
            Helper methods for <see cref="T:System.String"/>s
            </summary>
        </member>
        <member name="M:Atom.Core.StringHelpers.GenerateUniqueName(System.String)">
            <summary>
            Generates a unique name that starts with the specified <paramref name="prefix"/>
            </summary>
            <param name="prefix">The prefix</param>
            <returns></returns>
        </member>
        <member name="M:Atom.Core.StringHelpers.FirstCharToUpper(System.String)">
            <summary>
            Returns the specified <paramref name="s"/> with the first char converted to upper case
            </summary>
            <param name="s">The string</param>
            <returns></returns>
        </member>
        <member name="M:Atom.Core.StringHelpers.FirstCharToLower(System.String)">
            <summary>
            Returns the specified <paramref name="s"/> with the first char converted to lower case
            </summary>
            <param name="s"></param>
            <returns></returns>
        </member>
        <member name="M:Atom.Core.StringHelpers.SplitWords(System.String)">
            <summary>
            Splits the specified <paramref name="s"/> to words based on the upper case letter.
            Ex.: ThisIsATest => This, Is, A, Test
            </summary>
            <param name="s">The string</param>
            <returns></returns>
        </member>
        <member name="M:Atom.Core.StringHelpers.ExtractVersion(System.String)">
            <summary>
            Extracts the <see cref="T:System.Version"/> from the specified <paramref name="s"/>
            </summary>
            <param name="s">The version string</param>
            <returns></returns>
        </member>
        <member name="T:Atom.Core.BaseTaskManager">
            <summary>
            Handles anything to do with Tasks
            </summary>
        </member>
        <member name="M:Atom.Core.BaseTaskManager.LockTaskAsync(System.Linq.Expressions.Expression{System.Func{System.Boolean}},System.Func{System.Threading.Tasks.Task})">
            <summary>
            Runs the task if the updating flag is not set.
            If the flag is true (indicating the task is already running) then the task is not run.
            If the flag is false (indicating no running task) then the task is run.
            Once the task is finished if it was run, then the flag is reset to false.
            NOTE: This method doesn't queue tasks, it only prevents them from running!
            </summary>
            <param name="activeFlag">The boolean property flag defining if the task is already running</param>
            <param name="task">The task to run if it's not already running</param>
            <returns></returns>
        </member>
        <member name="M:Atom.Core.BaseTaskManager.LockTaskAsync``1(System.Linq.Expressions.Expression{System.Func{System.Boolean}},System.Func{System.Threading.Tasks.Task{``0}},``0)">
            <summary>
            Runs the task if the updating flag is not set.
            If the flag is true (indicating the task is already running) then the task is not run.
            If the flag is false (indicating no running task) then the task is run.
            Once the task is finished if it was run, then the flag is reset to false
            NOTE: This method doesn't queue tasks, it only prevents them from running!
            </summary>
            <typeparam name="T">The type of the return value of the task</typeparam>
            <param name="activeFlag">The boolean property flag defining if the task is already running</param>
            <param name="task">The task to run if it's not already running</param>
            <param name="defaultValue">The default value to return if the task is already running</param>
            <returns></returns>
        </member>
        <member name="M:Atom.Core.BaseTaskManager.RunAndForget(System.Func{System.Threading.Tasks.Task},System.String,System.String,System.Int32)">
            <summary>
            Queues the specified work to run on the thread pool and returns a proxy for the
            task returned by function.
            </summary>
            <param name="function">The work to execute asynchronously</param>
            <param name="origin">The method/function this message was logged in</param>
            <param name="filePath">The code filename that this message was logged from</param>
            <param name="lineNumber">The line of code in the filename this message was logged from</param>
            <remarks>
            The passed in Task can't be awaited as it is not required to!
            Any errors that may occurre are being logged by the logger
            </remarks>
            <returns>A task that represents a proxy for the task returned by function.</returns>
            <exception cref="T:System.ArgumentNullException">The function parameter was null.</exception>
        </member>
        <member name="M:Atom.Core.BaseTaskManager.Run(System.Func{System.Threading.Tasks.Task},System.String,System.String,System.Int32)">
            <summary>
            Queues the specified work to run on the thread pool and returns a proxy for the
            task returned by function.
            </summary>
            <param name="function">The work to execute asynchronously</param>
            <param name="origin">The method/function this message was logged in</param>
            <param name="filePath">The code filename that this message was logged from</param>
            <param name="lineNumber">The line of code in the filename this message was logged from</param>
            <returns>A task that represents a proxy for the task returned by function.</returns>
            <exception cref="T:System.ArgumentNullException">The function parameter was null.</exception>
        </member>
        <member name="M:Atom.Core.BaseTaskManager.Run``1(System.Func{System.Threading.Tasks.Task{``0}},System.Threading.CancellationToken,System.String,System.String,System.Int32)">
            <summary>
            Queues the specified work to run on the thread pool and returns a proxy for the
            Task(TResult) returned by function.
            </summary>
            <typeparam name="TResult">The type of the result returned by the proxy task.</typeparam>
            <param name="function">The work to execute asynchronously</param>
            <param name="cancellationToken">A cancellation token that should be used to cancel the work</param>
            <param name="origin">The method/function this message was logged in</param>
            <param name="filePath">The code filename that this message was logged from</param>
            <param name="lineNumber">The line of code in the filename this message was logged from</param>
            <returns>A Task(TResult) that represents a proxy for the Task(TResult) returned by function.</returns>
            <exception cref="T:System.ArgumentNullException">The function parameter was null.</exception>
            <exception cref="T:System.Threading.Tasks.TaskCanceledException">The task has been canceled.</exception>
            <exception cref="T:System.ObjectDisposedException">The System.Threading.CancellationTokenSource associated with cancellationToken was disposed.</exception>
        </member>
        <member name="M:Atom.Core.BaseTaskManager.Run``1(System.Func{System.Threading.Tasks.Task{``0}},System.String,System.String,System.Int32)">
            <summary>
            Queues the specified work to run on the thread pool and returns a proxy for the
            Task(TResult) returned by function.
            </summary>
            <typeparam name="TResult">The type of the result returned by the proxy task.</typeparam>
            <param name="function">The work to execute asynchronously</param>
            <param name="origin">The method/function this message was logged in</param>
            <param name="filePath">The code filename that this message was logged from</param>
            <param name="lineNumber">The line of code in the filename this message was logged from</param>
            <returns>A Task(TResult) that represents a proxy for the Task(TResult) returned by function.</returns>
            <exception cref="T:System.ArgumentNullException">The function parameter was null.</exception>
        </member>
        <member name="M:Atom.Core.BaseTaskManager.Run``1(System.Func{``0},System.Threading.CancellationToken,System.String,System.String,System.Int32)">
            <summary>
            Queues the specified work to run on the thread pool and returns a Task(TResult)
            object that represents that work. A cancellation token allows the work to be
            canceled.
            </summary>
            <typeparam name="TResult">The result type of the task.</typeparam>
            <param name="function">The work to execute asynchronously</param>
            <param name="cancellationToken">A cancellation token that should be used to cancel the work</param>
            <param name="origin">The method/function this message was logged in</param>
            <param name="filePath">The code filename that this message was logged from</param>
            <param name="lineNumber">The line of code in the filename this message was logged from</param>
            <returns>A Task(TResult) that represents the work queued to execute in the thread pool.</returns>
            <exception cref="T:System.ArgumentNullException">The function parameter was null.</exception>
            <exception cref="T:System.Threading.Tasks.TaskCanceledException">The task has been canceled.</exception>
            <exception cref="T:System.ObjectDisposedException">The System.Threading.CancellationTokenSource associated with cancellationToken was disposed.</exception>
        </member>
        <member name="M:Atom.Core.BaseTaskManager.Run``1(System.Func{``0},System.String,System.String,System.Int32)">
            <summary>
            Queues the specified work to run on the thread pool and returns a System.Threading.Tasks.Task`1
            object that represents that work.
            </summary>
            <typeparam name="TResult">The return type of the task.</typeparam>
            <param name="function">The work to execute asynchronously.</param>
            <param name="origin">The method/function this message was logged in</param>
            <param name="filePath">The code filename that this message was logged from</param>
            <param name="lineNumber">The line of code in the filename this message was logged from</param>
            <returns>A task object that represents the work queued to execute in the thread pool.</returns>
            <exception cref="T:System.ArgumentNullException">The function parameter was null.</exception>
        </member>
        <member name="M:Atom.Core.BaseTaskManager.Run(System.Func{System.Threading.Tasks.Task},System.Threading.CancellationToken,System.String,System.String,System.Int32)">
            <summary>
            Queues the specified work to run on the thread pool and returns a proxy for the
            task returned by function.
            </summary>
            <param name="function">The work to execute asynchronously.</param>
            <param name="cancellationToken">A cancellation token that should be used to cancel the work.</param>
            <param name="origin">The method/function this message was logged in</param>
            <param name="filePath">The code filename that this message was logged from</param>
            <param name="lineNumber">The line of code in the filename this message was logged from</param>
            <returns>A task that represents a proxy for the task returned by function.</returns>
            <exception cref="T:System.ArgumentNullException">The function parameter was null.</exception>
            <exception cref="T:System.Threading.Tasks.TaskCanceledException">The task has been canceled.</exception>
            <exception cref="T:System.ObjectDisposedException">The System.Threading.CancellationTokenSource associated with cancellationToken was disposed.</exception>
        </member>
        <member name="M:Atom.Core.BaseTaskManager.Run(System.Action,System.Threading.CancellationToken,System.String,System.String,System.Int32)">
            <summary>
            Queues the specified work to run on the thread pool and returns a System.Threading.Tasks.Task
            object that represents that work. A cancellation token allows the work to be
            canceled.
            </summary>
            <param name="action">The work to execute asynchronously</param>
            <param name="cancellationToken">A cancellation token that can be used to cancel the work</param>
            <param name="origin">The method/function this message was logged in</param>
            <param name="filePath">The code filename that this message was logged from</param>
            <param name="lineNumber">The line of code in the filename this message was logged from</param>
            <returns>A task that represents the work queued to execute in the thread pool.</returns>
            <exception cref="T:System.ArgumentNullException">The action parameter was null.</exception>
            <exception cref="T:System.Threading.Tasks.TaskCanceledException">The task has been canceled.</exception>
            <exception cref="T:System.ObjectDisposedException">The System.Threading.CancellationTokenSource associated with cancellationToken was disposed.</exception>
        </member>
        <member name="M:Atom.Core.BaseTaskManager.Run(System.Action,System.String,System.String,System.Int32)">
            <summary>
            Queues the specified work to run on the thread pool and returns a System.Threading.Tasks.Task
            object that represents that work.
            </summary>
            <param name="action">The work to execute asynchronously</param>
            <param name="origin">The method/function this message was logged in</param>
            <param name="filePath">The code filename that this message was logged from</param>
            <param name="lineNumber">The line of code in the filename this message was logged from</param>
            <returns>A task that represents the work queued to execute in the ThreadPool.</returns>
            <exception cref="T:System.ArgumentNullException">The action parameter was null.</exception>
        </member>
        <member name="M:Atom.Core.BaseTaskManager.LogError(System.Exception,System.String,System.String,System.Int32)">
            <summary>
            Logs the given error to the log factory
            </summary>
            <param name="ex">The exception to log</param>
            <param name="origin">The method/function this message was logged in</param>
            <param name="filePath">The code filename that this message was logged from</param>
            <param name="lineNumber">The line of code in the filename this message was logged from</param>
        </member>
        <member name="T:Atom.Core.TasksHelpers">
            <summary>
            Helper methods associated with <see cref="T:System.Threading.Tasks.Task"/>
            </summary>
        </member>
        <member name="M:Atom.Core.TasksHelpers.RunAndForget(System.Func{System.Threading.Tasks.Task})">
            <summary>
             Runs a TPL Task fire-and-forget style, the right way - in the
            background, separate from the current thread, with no risk
            of it trying to rejoin the current thread.
            </summary>
            <param name="taskDelegate">The task to run</param>
        </member>
        <member name="T:Atom.Core.Translator`1">
            <summary>
            The base for all the translators.
            A translator class takes in a <typeparamref name="TClass"/> and translates it's property values based on custom translation maps
            </summary>
            <typeparam name="TClass">The type of the model</typeparam>
        </member>
        <member name="F:Atom.Core.Translator`1.mObjectTranslationMaps">
            <summary>
            The member of the <see cref="P:Atom.Core.Translator`1.ObjectTranslationMaps"/> property used for lazy-loading
            </summary>
        </member>
        <member name="P:Atom.Core.Translator`1.Atom#Core#IClonableTranslator{TClass}#TranslationMaps">
            <summary>
            The translation maps.
            NOTE: This method should create a copy of the original translation maps to prevent its external modification
            </summary>
        </member>
        <member name="P:Atom.Core.Translator`1.ObjectTranslationMaps">
            <summary>
            The object mapping of the <typeparamref name="TClass"/>
            </summary>
        </member>
        <member name="M:Atom.Core.Translator`1.CopyMapsFrom(Atom.Core.IClonableTranslator{`0})">
            <summary>
            Copies the maps from the specified <paramref name="translator"/>
            </summary>
            <param name="translator">The translator</param>
        </member>
        <member name="M:Atom.Core.Translator`1.Translate(System.Linq.Expressions.Expression{System.Func{`0,System.Object}},`0)">
            <summary>
            Translates the given <paramref name="model"/> and yield returns the results
            </summary>
            <param name="propertySelector">Expression that selects a property from the <typeparamref name="TClass"/></param>
            <param name="model">The model to translate</param>
            <returns></returns>
        </member>
        <member name="M:Atom.Core.Translator`1.UnsafeTranslate(System.Reflection.PropertyInfo,`0)">
            <summary>
            Translates the given <paramref name="model"/> and yield returns the results.
            NOTE: This method should only be used by implementations related to <see cref="N:System.Reflection"/>!
            </summary>
            <param name="propertyInfo">The property of the <typeparamref name="TClass"/> whose value to translate</param>
            <param name="model">The model to translate</param>
            <returns></returns>
        </member>
        <member name="M:Atom.Core.Translator`1.TranslateString(System.Linq.Expressions.Expression{System.Func{`0,System.Object}},`0)">
            <summary>
            Translates the given <paramref name="model"/> and tiled returns the results
            after converting the to <see cref="T:System.String"/>
            </summary>
            <param name="propertySelector">Expression that selects a property from the <typeparamref name="TClass"/></param>
            <param name="model">The model to translate</param>
            <returns></returns>
        </member>
        <member name="M:Atom.Core.Translator`1.UnsafeTranslateString(System.Reflection.PropertyInfo,`0)">
            <summary>
            Translates the given <paramref name="model"/> and tiled returns the results
            after converting the to <see cref="T:System.String"/>.
            NOTE: This method should only be used by implementations related to <see cref="N:System.Reflection"/>!
            </summary>
            <param name="propertyInfo">The property of the <typeparamref name="TClass"/> whose value to translate</param>
            <param name="model">The model to translate</param>
            <returns></returns>
        </member>
        <member name="M:Atom.Core.Translator`1.SetTranslator``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Func{``0,System.Object})">
            <summary>
            Sets a translator for the target property of the <typeparamref name="TClass"/>
            </summary>
            <param name="propertySelector">Expression that selects a property from the <typeparamref name="TClass"/></param>
            <param name="translation">The translation</param>
            <returns></returns>
        </member>
        <member name="M:Atom.Core.Translator`1.UnsafeSetTranslator(System.Reflection.PropertyInfo,System.Func{System.Object,System.Object})">
            <summary>
            Sets a translator of the specified <paramref name="propertyInfo"/>.
            NOTE: This method should only be used by implementations related to <see cref="N:System.Reflection"/>!
            </summary>
            <param name="propertyInfo">The property info</param>
            <param name="translation">The translation</param>
            <returns></returns>
        </member>
        <member name="M:Atom.Core.Translator`1.SetStandardTranslator``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Func{`0,``0,System.Object})">
            <summary>
            Sets a translator for the target property of the <typeparamref name="TClass"/>
            </summary>
            <param name="propertySelector">Expression that selects a property from the <typeparamref name="TClass"/></param>
            <param name="translation">The translation</param>
            <returns></returns>
        </member>
        <member name="M:Atom.Core.Translator`1.UnsafeSetStandardTranslator(System.Reflection.PropertyInfo,System.Func{System.Object,System.Object,System.Object})">
            <summary>
            Sets a translator for the specified <paramref name="propertyInfo"/>.
            NOTE: This method should only be used by implementations related to <see cref="N:System.Reflection"/>!
            </summary>
            <param name="propertyInfo">The property info</param>
            <param name="translation">
            The translation.
            NOTE: The first parameter is the instance of the model!
            NOTE: The second parameter is the value of the <paramref name="propertyInfo"/> of the model!
            </param>
            <returns></returns>
        </member>
        <member name="M:Atom.Core.Translator`1.Atom#Core#ITranslator{TClass}#SetTranslator``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Func{``0,System.Object})">
            <summary>
            Sets a translator for the target property of the <typeparamref name="TClass"/>
            </summary>
            <param name="propertySelector">Expression that selects a property from the <typeparamref name="TClass"/></param>
            <param name="translation">The translation</param>
            <returns></returns>
        </member>
        <member name="M:Atom.Core.Translator`1.Atom#Core#ITranslator{TClass}#SetStandardTranslator``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Func{`0,``0,System.Object})">
            <summary>
            Sets a translator for the target property of the <typeparamref name="TClass"/>
            </summary>
            <param name="propertySelector">Expression that selects a property from the <typeparamref name="TClass"/></param>
            <param name="translation">The translation</param>
            <returns></returns>
        </member>
        <member name="M:Atom.Core.Translator`1.Atom#Core#ITranslator#UnsafeTranslate(System.Reflection.PropertyInfo,System.Object)">
            <summary>
            Translates the given <paramref name="model"/> and yield returns the results.
            NOTE: This method should only be used by implementations related to <see cref="N:System.Reflection"/>!
            </summary>
            <param name="propertyInfo">The property of the <typeparamref name="TClass"/> whose value to translate</param>
            <param name="model">The model to translate</param>
            <returns></returns>
        </member>
        <member name="M:Atom.Core.Translator`1.Atom#Core#ITranslator#UnsafeTranslateString(System.Reflection.PropertyInfo,System.Object)">
            <summary>
            Translates the given <paramref name="model"/> and tiled returns the results
            after converting the to <see cref="T:System.String"/>.
            NOTE: This method should only be used by implementations related to <see cref="N:System.Reflection"/>!
            </summary>
            <param name="propertyInfo">The property of the <typeparamref name="TClass"/> whose value to translate</param>
            <param name="model">The model to translate</param>
            <returns></returns>
        </member>
        <member name="M:Atom.Core.Translator`1.Atom#Core#ITranslator#UnsafeSetTranslator(System.Reflection.PropertyInfo,System.Func{System.Object,System.Object})">
            <summary>
            Sets a translator of the specified <paramref name="propertyInfo"/>.
            NOTE: This method should only be used by implementations related to <see cref="N:System.Reflection"/>!
            </summary>
            <param name="propertyInfo">The property info</param>
            <param name="translation">The translation</param>
        </member>
        <member name="M:Atom.Core.Translator`1.Atom#Core#ITranslator#UnsafeSetStandardTranslator(System.Reflection.PropertyInfo,System.Func{System.Object,System.Object,System.Object})">
            <summary>
            Sets a translator for the specified <paramref name="propertyInfo"/>.
            NOTE: This method should only be used by implementations related to <see cref="N:System.Reflection"/>!
            </summary>
            <param name="propertyInfo">The property info</param>
            <param name="translation">
            The translation.
            NOTE: The first parameter is the instance of the model!
            NOTE: The second parameter is the value of the <paramref name="propertyInfo"/> of the model!
            </param>
            <returns></returns>
        </member>
        <member name="M:Atom.Core.Translator`1.SetBooleanTranslator(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Object,System.Object)">
            <summary>
            Sets a <see cref="T:System.Boolean"/> translator for the target property of the <typeparamref name="TClass"/>
            </summary>
            <param name="propertySelector">Expression that selects a property from the <typeparamref name="TClass"/></param>
            <param name="trueValueTranslation">The value to translated to a <see cref="!:true"/> value</param>
            <param name="falseValueTranslation">The value to translated to a <see cref="!:false"/> value</param>
            <returns></returns>
        </member>
        <member name="M:Atom.Core.Translator`1.SetBooleanTranslator(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.String,System.String)">
            <summary>
            Sets a <see cref="T:System.Boolean"/> translator for the target property of the <typeparamref name="TClass"/>
            </summary>
            <param name="propertySelector">Expression that selects a property from the <typeparamref name="TClass"/></param>
            <param name="trueValueTranslation">The value to translated to a <see cref="!:true"/> value</param>
            <param name="falseValueTranslation">The value to translated to a <see cref="!:false"/> value</param>
            <returns></returns>
        </member>
        <member name="M:Atom.Core.Translator`1.SetBooleanTranslator(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Boolean}}},System.Object,System.Object)">
            <summary>
            Sets a <see cref="!:bool?"/> translator for the target property of the <typeparamref name="TClass"/>
            </summary>
            <param name="propertySelector">Expression that selects a property from the <typeparamref name="TClass"/></param>
            <param name="trueValueTranslation">The value to translated to a <see cref="!:true"/> value</param>
            <param name="falseValueTranslation">The value to translated to a <see cref="!:false"/> value</param>
            <returns></returns>
        </member>
        <member name="M:Atom.Core.Translator`1.SetBooleanTranslator(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Boolean}}},System.String,System.String)">
            <summary>
            Sets a <see cref="!:bool?"/> translator for the target property of the <typeparamref name="TClass"/>
            </summary>
            <param name="propertySelector">Expression that selects a property from the <typeparamref name="TClass"/></param>
            <param name="trueValueTranslation">The value to translated to a <see cref="!:true"/> value</param>
            <param name="falseValueTranslation">The value to translated to a <see cref="!:false"/> value</param>
            <returns></returns>
        </member>
        <member name="M:Atom.Core.Translator`1.SetLocalDateTimeTranslator(System.Linq.Expressions.Expression{System.Func{`0,System.DateTimeOffset}},System.String)">
            <summary>
            Sets a <see cref="T:System.DateTimeOffset"/> translator that translates the date time offset to the local date time
            and returns a string using the specified <paramref name="format"/>
            </summary>
            <param name="propertySelector">Expression that selects a property from the <typeparamref name="TClass"/></param>
            <param name="format">The date format</param>
            <returns></returns>
        </member>
        <member name="M:Atom.Core.Translator`1.SetLocalDateTimeTranslator(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.DateTimeOffset}}},System.String)">
            <summary>
            Sets a <see cref="!:DateTimeOffset?"/> translator that translates the date time offset to the local date time
            and returns a string using the specified <paramref name="format"/>
            </summary>
            <param name="propertySelector">Expression that selects a property from the <typeparamref name="TClass"/></param>
            <param name="format">The date format</param>
            <returns></returns>
        </member>
        <member name="M:Atom.Core.Translator`1.SetLocalizedCurrenyTranslator(System.Linq.Expressions.Expression{System.Func{`0,System.Byte}})">
            <summary>
            Sets a <see cref="T:System.Byte"/> translator that translates the value to a localized currency string value
            </summary>
            <param name="propertySelector">Expression that selects a property from the <typeparamref name="TClass"/></param>
            <returns></returns>
        </member>
        <member name="M:Atom.Core.Translator`1.SetLocalizedCurrenyTranslator(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Byte}}})">
            <summary>
            Sets a <see cref="!:byte?"/> translator that translates the value to a localized currency string value.
            NOTE: <see cref="!:null"/> is returned if the value is also null!
            </summary>
            <param name="propertySelector">Expression that selects a property from the <typeparamref name="TClass"/></param>
            <returns></returns>
        </member>
        <member name="M:Atom.Core.Translator`1.SetLocalizedCurrenyTranslator(System.Linq.Expressions.Expression{System.Func{`0,System.SByte}})">
            <summary>
            Sets a <see cref="T:System.SByte"/> translator that translates the value to a localized currency string value
            </summary>
            <param name="propertySelector">Expression that selects a property from the <typeparamref name="TClass"/></param>
            <returns></returns>
        </member>
        <member name="M:Atom.Core.Translator`1.SetLocalizedCurrenyTranslator(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.SByte}}})">
            <summary>
            Sets a <see cref="!:sbyte?"/> translator that translates the value to a localized currency string value.
            NOTE: <see cref="!:null"/> is returned if the value is also null!
            </summary>
            <param name="propertySelector">Expression that selects a property from the <typeparamref name="TClass"/></param>
            <returns></returns>
        </member>
        <member name="M:Atom.Core.Translator`1.SetLocalizedCurrenyTranslator(System.Linq.Expressions.Expression{System.Func{`0,System.Int16}})">
            <summary>
            Sets a <see cref="T:System.Int16"/> translator that translates the value to a localized currency string value
            </summary>
            <param name="propertySelector">Expression that selects a property from the <typeparamref name="TClass"/></param>
            <returns></returns>
        </member>
        <member name="M:Atom.Core.Translator`1.SetLocalizedCurrenyTranslator(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Int16}}})">
            <summary>
            Sets a <see cref="!:short?"/> translator that translates the value to a localized currency string value.
            NOTE: <see cref="!:null"/> is returned if the value is also null!
            </summary>
            <param name="propertySelector">Expression that selects a property from the <typeparamref name="TClass"/></param>
            <returns></returns>
        </member>
        <member name="M:Atom.Core.Translator`1.SetLocalizedCurrenyTranslator(System.Linq.Expressions.Expression{System.Func{`0,System.UInt16}})">
            <summary>
            Sets a <see cref="T:System.UInt16"/> translator that translates the value to a localized currency string value
            </summary>
            <param name="propertySelector">Expression that selects a property from the <typeparamref name="TClass"/></param>
            <returns></returns>
        </member>
        <member name="M:Atom.Core.Translator`1.SetLocalizedCurrenyTranslator(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.UInt16}}})">
            <summary>
            Sets a <see cref="!:ushort?"/> translator that translates the value to a localized currency string value.
            NOTE: <see cref="!:null"/> is returned if the value is also null!
            </summary>
            <param name="propertySelector">Expression that selects a property from the <typeparamref name="TClass"/></param>
            <returns></returns>
        </member>
        <member name="M:Atom.Core.Translator`1.SetLocalizedCurrenyTranslator(System.Linq.Expressions.Expression{System.Func{`0,System.Int32}})">
            <summary>
            Sets a <see cref="T:System.Int32"/> translator that translates the value to a localized currency string value
            </summary>
            <param name="propertySelector">Expression that selects a property from the <typeparamref name="TClass"/></param>
            <returns></returns>
        </member>
        <member name="M:Atom.Core.Translator`1.SetLocalizedCurrenyTranslator(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Int32}}})">
            <summary>
            Sets a <see cref="!:int?"/> translator that translates the value to a localized currency string value.
            NOTE: <see cref="!:null"/> is returned if the value is also null!
            </summary>
            <param name="propertySelector">Expression that selects a property from the <typeparamref name="TClass"/></param>
            <returns></returns>
        </member>
        <member name="M:Atom.Core.Translator`1.SetLocalizedCurrenyTranslator(System.Linq.Expressions.Expression{System.Func{`0,System.UInt32}})">
            <summary>
            Sets a <see cref="T:System.UInt32"/> translator that translates the value to a localized currency string value
            </summary>
            <param name="propertySelector">Expression that selects a property from the <typeparamref name="TClass"/></param>
            <returns></returns>
        </member>
        <member name="M:Atom.Core.Translator`1.SetLocalizedCurrenyTranslator(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.UInt32}}})">
            <summary>
            Sets a <see cref="!:uint?"/> translator that translates the value to a localized currency string value.
            NOTE: <see cref="!:null"/> is returned if the value is also null!
            </summary>
            <param name="propertySelector">Expression that selects a property from the <typeparamref name="TClass"/></param>
            <returns></returns>
        </member>
        <member name="M:Atom.Core.Translator`1.SetLocalizedCurrenyTranslator(System.Linq.Expressions.Expression{System.Func{`0,System.Int64}})">
            <summary>
            Sets a <see cref="T:System.Int64"/> translator that translates the value to a localized currency string value
            </summary>
            <param name="propertySelector">Expression that selects a property from the <typeparamref name="TClass"/></param>
            <returns></returns>
        </member>
        <member name="M:Atom.Core.Translator`1.SetLocalizedCurrenyTranslator(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Int64}}})">
            <summary>
            Sets a <see cref="!:long?"/> translator that translates the value to a localized currency string value.
            NOTE: <see cref="!:null"/> is returned if the value is also null!
            </summary>
            <param name="propertySelector">Expression that selects a property from the <typeparamref name="TClass"/></param>
            <returns></returns>
        </member>
        <member name="M:Atom.Core.Translator`1.SetLocalizedCurrenyTranslator(System.Linq.Expressions.Expression{System.Func{`0,System.UInt64}})">
            <summary>
            Sets a <see cref="T:System.UInt64"/> translator that translates the value to a localized currency string value
            </summary>
            <param name="propertySelector">Expression that selects a property from the <typeparamref name="TClass"/></param>
            <returns></returns>
        </member>
        <member name="M:Atom.Core.Translator`1.SetLocalizedCurrenyTranslator(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.UInt64}}})">
            <summary>
            Sets a <see cref="!:ulong?"/> translator that translates the value to a localized currency string value.
            NOTE: <see cref="!:null"/> is returned if the value is also null!
            </summary>
            <param name="propertySelector">Expression that selects a property from the <typeparamref name="TClass"/></param>
            <returns></returns>
        </member>
        <member name="M:Atom.Core.Translator`1.SetLocalizedCurrenyTranslator(System.Linq.Expressions.Expression{System.Func{`0,System.Single}})">
            <summary>
            Sets a <see cref="T:System.Single"/> translator that translates the value to a localized currency string value
            </summary>
            <param name="propertySelector">Expression that selects a property from the <typeparamref name="TClass"/></param>
            <returns></returns>
        </member>
        <member name="M:Atom.Core.Translator`1.SetLocalizedCurrenyTranslator(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Single}}})">
            <summary>
            Sets a <see cref="!:float?"/> translator that translates the value to a localized currency string value.
            NOTE: <see cref="!:null"/> is returned if the value is also null!
            </summary>
            <param name="propertySelector">Expression that selects a property from the <typeparamref name="TClass"/></param>
            <returns></returns>
        </member>
        <member name="M:Atom.Core.Translator`1.SetLocalizedCurrenyTranslator(System.Linq.Expressions.Expression{System.Func{`0,System.Double}})">
            <summary>
            Sets a <see cref="T:System.Double"/> translator that translates the value to a localized currency string value
            </summary>
            <param name="propertySelector">Expression that selects a property from the <typeparamref name="TClass"/></param>
            <returns></returns>
        </member>
        <member name="M:Atom.Core.Translator`1.SetLocalizedCurrenyTranslator(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Double}}})">
            <summary>
            Sets a <see cref="!:double?"/> translator that translates the value to a localized currency string value.
            NOTE: <see cref="!:null"/> is returned if the value is also null!
            </summary>
            <param name="propertySelector">Expression that selects a property from the <typeparamref name="TClass"/></param>
            <returns></returns>
        </member>
        <member name="M:Atom.Core.Translator`1.SetLocalizedCurrenyTranslator(System.Linq.Expressions.Expression{System.Func{`0,System.Decimal}})">
            <summary>
            Sets a <see cref="T:System.Decimal"/> translator that translates the value to a localized currency string value
            </summary>
            <param name="propertySelector">Expression that selects a property from the <typeparamref name="TClass"/></param>
            <returns></returns>
        </member>
        <member name="M:Atom.Core.Translator`1.SetLocalizedCurrenyTranslator(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Decimal}}})">
            <summary>
            Sets a <see cref="!:decimal?"/> translator that translates the value to a localized currency string value.
            NOTE: <see cref="!:null"/> is returned if the value is also null!
            </summary>
            <param name="propertySelector">Expression that selects a property from the <typeparamref name="TClass"/></param>
            <returns></returns>
        </member>
        <member name="M:Atom.Core.Translator`1.SetPercentageTranslator(System.Linq.Expressions.Expression{System.Func{`0,System.Byte}})">
            <summary>
            Sets a <see cref="T:System.Byte"/> translator that translates the value to a percentage string value
            </summary>
            <param name="propertySelector">Expression that selects a property from the <typeparamref name="TClass"/></param>
            <returns></returns>
        </member>
        <member name="M:Atom.Core.Translator`1.SetPercentageTranslator(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Byte}}})">
            <summary>
            Sets a <see cref="!:byte?"/> translator that translates the value to a percentage string value.
            NOTE: <see cref="!:null"/> is returned if the value is also null!
            </summary>
            <param name="propertySelector">Expression that selects a property from the <typeparamref name="TClass"/></param>
            <returns></returns>
        </member>
        <member name="M:Atom.Core.Translator`1.SetPercentageTranslator(System.Linq.Expressions.Expression{System.Func{`0,System.SByte}})">
            <summary>
            Sets a <see cref="T:System.SByte"/> translator that translates the value to a percentage string value
            </summary>
            <param name="propertySelector">Expression that selects a property from the <typeparamref name="TClass"/></param>
            <returns></returns>
        </member>
        <member name="M:Atom.Core.Translator`1.SetPercentageTranslator(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.SByte}}})">
            <summary>
            Sets a <see cref="!:sbyte?"/> translator that translates the value to a percentage string value.
            NOTE: <see cref="!:null"/> is returned if the value is also null!
            </summary>
            <param name="propertySelector">Expression that selects a property from the <typeparamref name="TClass"/></param>
            <returns></returns>
        </member>
        <member name="M:Atom.Core.Translator`1.SetPercentageTranslator(System.Linq.Expressions.Expression{System.Func{`0,System.Int16}})">
            <summary>
            Sets a <see cref="T:System.Int16"/> translator that translates the value to a percentage string value
            </summary>
            <param name="propertySelector">Expression that selects a property from the <typeparamref name="TClass"/></param>
            <returns></returns>
        </member>
        <member name="M:Atom.Core.Translator`1.SetPercentageTranslator(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Int16}}})">
            <summary>
            Sets a <see cref="!:short?"/> translator that translates the value to a percentage string value.
            NOTE: <see cref="!:null"/> is returned if the value is also null!
            </summary>
            <param name="propertySelector">Expression that selects a property from the <typeparamref name="TClass"/></param>
            <returns></returns>
        </member>
        <member name="M:Atom.Core.Translator`1.SetPercentageTranslator(System.Linq.Expressions.Expression{System.Func{`0,System.UInt16}})">
            <summary>
            Sets a <see cref="T:System.UInt16"/> translator that translates the value to a percentage string value
            </summary>
            <param name="propertySelector">Expression that selects a property from the <typeparamref name="TClass"/></param>
            <returns></returns>
        </member>
        <member name="M:Atom.Core.Translator`1.SetPercentageTranslator(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.UInt16}}})">
            <summary>
            Sets a <see cref="!:ushort?"/> translator that translates the value to a percentage string value.
            NOTE: <see cref="!:null"/> is returned if the value is also null!
            </summary>
            <param name="propertySelector">Expression that selects a property from the <typeparamref name="TClass"/></param>
            <returns></returns>
        </member>
        <member name="M:Atom.Core.Translator`1.SetPercentageTranslator(System.Linq.Expressions.Expression{System.Func{`0,System.Int32}})">
            <summary>
            Sets a <see cref="T:System.Int32"/> translator that translates the value to a percentage string value
            </summary>
            <param name="propertySelector">Expression that selects a property from the <typeparamref name="TClass"/></param>
            <returns></returns>
        </member>
        <member name="M:Atom.Core.Translator`1.SetPercentageTranslator(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Int32}}})">
            <summary>
            Sets a <see cref="!:int?"/> translator that translates the value to a percentage string value.
            NOTE: <see cref="!:null"/> is returned if the value is also null!
            </summary>
            <param name="propertySelector">Expression that selects a property from the <typeparamref name="TClass"/></param>
            <returns></returns>
        </member>
        <member name="M:Atom.Core.Translator`1.SetPercentageTranslator(System.Linq.Expressions.Expression{System.Func{`0,System.UInt32}})">
            <summary>
            Sets a <see cref="T:System.UInt32"/> translator that translates the value to a percentage string value
            </summary>
            <param name="propertySelector">Expression that selects a property from the <typeparamref name="TClass"/></param>
            <returns></returns>
        </member>
        <member name="M:Atom.Core.Translator`1.SetPercentageTranslator(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.UInt32}}})">
            <summary>
            Sets a <see cref="!:uint?"/> translator that translates the value to a percentage string value.
            NOTE: <see cref="!:null"/> is returned if the value is also null!
            </summary>
            <param name="propertySelector">Expression that selects a property from the <typeparamref name="TClass"/></param>
            <returns></returns>
        </member>
        <member name="M:Atom.Core.Translator`1.SetPercentageTranslator(System.Linq.Expressions.Expression{System.Func{`0,System.Int64}})">
            <summary>
            Sets a <see cref="T:System.Int64"/> translator that translates the value to a percentage string value
            </summary>
            <param name="propertySelector">Expression that selects a property from the <typeparamref name="TClass"/></param>
            <returns></returns>
        </member>
        <member name="M:Atom.Core.Translator`1.SetPercentageTranslator(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Int64}}})">
            <summary>
            Sets a <see cref="!:long?"/> translator that translates the value to a percentage string value.
            NOTE: <see cref="!:null"/> is returned if the value is also null!
            </summary>
            <param name="propertySelector">Expression that selects a property from the <typeparamref name="TClass"/></param>
            <returns></returns>
        </member>
        <member name="M:Atom.Core.Translator`1.SetPercentageTranslator(System.Linq.Expressions.Expression{System.Func{`0,System.UInt64}})">
            <summary>
            Sets a <see cref="T:System.UInt64"/> translator that translates the value to a percentage string value
            </summary>
            <param name="propertySelector">Expression that selects a property from the <typeparamref name="TClass"/></param>
            <returns></returns>
        </member>
        <member name="M:Atom.Core.Translator`1.SetPercentageTranslator(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.UInt64}}})">
            <summary>
            Sets a <see cref="!:ulong?"/> translator that translates the value to a percentage string value.
            NOTE: <see cref="!:null"/> is returned if the value is also null!
            </summary>
            <param name="propertySelector">Expression that selects a property from the <typeparamref name="TClass"/></param>
            <returns></returns>
        </member>
        <member name="M:Atom.Core.Translator`1.SetPercentageTranslator(System.Linq.Expressions.Expression{System.Func{`0,System.Single}})">
            <summary>
            Sets a <see cref="T:System.Single"/> translator that translates the value to a percentage string value
            </summary>
            <param name="propertySelector">Expression that selects a property from the <typeparamref name="TClass"/></param>
            <returns></returns>
        </member>
        <member name="M:Atom.Core.Translator`1.SetPercentageTranslator(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Single}}})">
            <summary>
            Sets a <see cref="!:float?"/> translator that translates the value to a percentage string value.
            NOTE: <see cref="!:null"/> is returned if the value is also null!
            </summary>
            <param name="propertySelector">Expression that selects a property from the <typeparamref name="TClass"/></param>
            <returns></returns>
        </member>
        <member name="M:Atom.Core.Translator`1.SetPercentageTranslator(System.Linq.Expressions.Expression{System.Func{`0,System.Double}})">
            <summary>
            Sets a <see cref="T:System.Double"/> translator that translates the value to a percentage string value
            </summary>
            <param name="propertySelector">Expression that selects a property from the <typeparamref name="TClass"/></param>
            <returns></returns>
        </member>
        <member name="M:Atom.Core.Translator`1.SetPercentageTranslator(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Double}}})">
            <summary>
            Sets a <see cref="!:double?"/> translator that translates the value to a percentage string value.
            NOTE: <see cref="!:null"/> is returned if the value is also null!
            </summary>
            <param name="propertySelector">Expression that selects a property from the <typeparamref name="TClass"/></param>
            <returns></returns>
        </member>
        <member name="M:Atom.Core.Translator`1.SetPercentageTranslator(System.Linq.Expressions.Expression{System.Func{`0,System.Decimal}})">
            <summary>
            Sets a <see cref="T:System.Decimal"/> translator that translates the value to a percentage string value
            </summary>
            <param name="propertySelector">Expression that selects a property from the <typeparamref name="TClass"/></param>
            <returns></returns>
        </member>
        <member name="M:Atom.Core.Translator`1.SetPercentageTranslator(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Decimal}}})">
            <summary>
            Sets a <see cref="!:decimal?"/> translator that translates the value to a percentage string value.
            NOTE: <see cref="!:null"/> is returned if the value is also null!
            </summary>
            <param name="propertySelector">Expression that selects a property from the <typeparamref name="TClass"/></param>
            <returns></returns>
        </member>
        <member name="M:Atom.Core.Translator`1.SetEnumerableAggragationTranslator``1(System.Linq.Expressions.Expression{System.Func{`0,System.Collections.Generic.IEnumerable{``0}}},System.String)">
            <summary>
            Sets an <see cref="T:System.Collections.Generic.IEnumerable`1"/> translator that aggregates the values of the enumerable
            using the specified <paramref name="separator"/> after calling their <see cref="M:System.Object.ToString"/>
            method!
            </summary>
            <typeparam name="TKey">The type of the items of the enumerable</typeparam>
            <param name="propertySelector">Expression that selects a property from the <typeparamref name="TClass"/></param>
            <param name="separator">The separator</param>
            <returns></returns>
        </member>
        <member name="M:Atom.Core.Translator`1.SetEnumerableAggragationTranslator``1(System.Linq.Expressions.Expression{System.Func{`0,System.Collections.Generic.IEnumerable{``0}}},System.Func{``0,System.String},System.String)">
            <summary>
            Sets an <see cref="T:System.Collections.Generic.IEnumerable`1"/> translator that aggregates the values of the enumerable
            using the specified <paramref name="separator"/> after calling their <see cref="M:System.Object.ToString"/>
            method!
            </summary>
            <typeparam name="TKey">The type of the items of the enumerable</typeparam>
            <param name="propertySelector">Expression that selects a property from the <typeparamref name="TClass"/></param>
            <param name="extractor">The string extractor that is used to convert an item to a string</param>
            <param name="separator">The separator</param>
            <returns></returns>
        </member>
        <member name="M:Atom.Core.Translator`1.TranslatePropertyValue(System.Reflection.PropertyInfo,`0)">
            <summary>
            Translates the value of the given <paramref name="propertyInfo"/> of the specified <paramref name="model"/>.
            NOTE: This method should always get overridden when adding new property maps in order to add and use the new translators
                  by using the type of the value
            </summary>
            <example>
            if (propertyInfo.PropertyType == typeof(object))
                return TranslateOrDefault(ObjectTranslationMaps, propertyInfo.Name, propertyInfo.GetValue(model));
            </example>
            <param name="propertyInfo"></param>
            <param name="model"></param>
            <returns></returns>
        </member>
        <member name="M:Atom.Core.Translator`1.TranslateOrDefault(System.Collections.Generic.IEnumerable{Atom.Core.BasePropertyTranslationMap},System.String,System.Object,System.Object)">
            <summary>
            Translates the given value if there is a translation map for the given property,
            otherwise it returns the given value
            </summary>
            <param name="translationMaps">The translation maps</param>
            <param name="propertyName">The given property</param>
            <param name="instance">The instance of the object that contains the <paramref name="value"/></param>
            <param name="value">The given value</param>
            <returns></returns>
        </member>
        <member name="T:Atom.Core.ITranslator">
            <summary>
            Provides abstractions for a translator when a the type of the translated models is unknown
            </summary>
        </member>
        <member name="M:Atom.Core.ITranslator.UnsafeTranslate(System.Reflection.PropertyInfo,System.Object)">
            <summary>
            Translates the given <paramref name="model"/> and yield returns the results.
            NOTE: This method should only be used by implementations related to <see cref="N:System.Reflection"/>!
            </summary>
            <param name="propertyInfo">The property info of the related property whose value to translate</param>
            <param name="model">The model to translate</param>
            <returns></returns>
        </member>
        <member name="M:Atom.Core.ITranslator.UnsafeTranslateString(System.Reflection.PropertyInfo,System.Object)">
            <summary>
            Translates the given <paramref name="model"/> and tiled returns the results
            after converting the to <see cref="T:System.String"/>.
            NOTE: This method should only be used by implementations related to <see cref="N:System.Reflection"/>!
            </summary>
            <param name="propertyInfo">The property info of the related property whose value to translate</param>
            <param name="model">The model to translate</param>
            <returns></returns>
        </member>
        <member name="M:Atom.Core.ITranslator.UnsafeSetTranslator(System.Reflection.PropertyInfo,System.Func{System.Object,System.Object})">
            <summary>
            Sets a translator of the specified <paramref name="propertyInfo"/>.
            NOTE: This method should only be used by implementations related to <see cref="N:System.Reflection"/>!
            </summary>
            <param name="propertyInfo">The property info</param>
            <param name="translation">The translation</param>
        </member>
        <member name="M:Atom.Core.ITranslator.UnsafeSetStandardTranslator(System.Reflection.PropertyInfo,System.Func{System.Object,System.Object,System.Object})">
            <summary>
            Sets a translator for the specified <paramref name="propertyInfo"/>.
            NOTE: This method should only be used by implementations related to <see cref="N:System.Reflection"/>!
            </summary>
            <param name="propertyInfo">The property info</param>
            <param name="translation">
            The translation.
            NOTE: The first parameter is the instance of the model!
            NOTE: The second parameter is the value of the <paramref name="propertyInfo"/> of the model!
            </param>
            <returns></returns>
        </member>
        <member name="T:Atom.Core.ITranslator`1">
            <summary>
            Provides abstractions for a translator
            </summary>
            <typeparam name="TClass"></typeparam>
        </member>
        <member name="M:Atom.Core.ITranslator`1.Translate(System.Linq.Expressions.Expression{System.Func{`0,System.Object}},`0)">
            <summary>
            Translates the given <paramref name="model"/> and yield returns the results
            </summary>
            <param name="propertySelector">Expression that selects a property from the <typeparamref name="TClass"/></param>
            <param name="model">The model to translate</param>
            <returns></returns>
        </member>
        <member name="M:Atom.Core.ITranslator`1.UnsafeTranslate(System.Reflection.PropertyInfo,`0)">
            <summary>
            Translates the given <paramref name="model"/> and yield returns the results.
            NOTE: This method should only be used by implementations related to <see cref="N:System.Reflection"/>!
            </summary>
            <param name="propertyInfo">The property of the <typeparamref name="TClass"/> whose value to translate</param>
            <param name="model">The model to translate</param>
            <returns></returns>
        </member>
        <member name="M:Atom.Core.ITranslator`1.TranslateString(System.Linq.Expressions.Expression{System.Func{`0,System.Object}},`0)">
            <summary>
            Translates the given <paramref name="model"/> and tiled returns the results
            after converting the to <see cref="T:System.String"/>
            </summary>
            <param name="propertySelector">Expression that selects a property from the <typeparamref name="TClass"/></param>
            <param name="model">The model to translate</param>
            <returns></returns>
        </member>
        <member name="M:Atom.Core.ITranslator`1.UnsafeTranslateString(System.Reflection.PropertyInfo,`0)">
            <summary>
            Translates the given <paramref name="model"/> and tiled returns the results
            after converting the to <see cref="T:System.String"/>.
            NOTE: This method should only be used by implementations related to <see cref="N:System.Reflection"/>!
            </summary>
            <param name="propertyInfo">The property of the <typeparamref name="TClass"/> whose value to translate</param>
            <param name="model">The model to translate</param>
            <returns></returns>
        </member>
        <member name="M:Atom.Core.ITranslator`1.SetTranslator``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Func{``0,System.Object})">
            <summary>
            Sets a translator for the target property of the <typeparamref name="TClass"/>
            </summary>
            <param name="propertySelector">Expression that selects a property from the <typeparamref name="TClass"/></param>
            <param name="translation">The translation</param>
            <returns></returns>
        </member>
        <member name="M:Atom.Core.ITranslator`1.SetStandardTranslator``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Func{`0,``0,System.Object})">
            <summary>
            Sets a translator for the target property of the <typeparamref name="TClass"/>
            </summary>
            <param name="propertySelector">Expression that selects a property from the <typeparamref name="TClass"/></param>
            <param name="translation">The translation</param>
            <returns></returns>
        </member>
        <member name="T:Atom.Core.IClonableTranslator`1">
            <summary>
            Provides abstractions for a translator that gives access to its translation maps
            </summary>
            <typeparam name="TClass"></typeparam>
        </member>
        <member name="P:Atom.Core.IClonableTranslator`1.TranslationMaps">
            <summary>
            The translation maps.
            NOTE: This method should create a copy of the original translation maps to prevent its external modification!
            </summary>
        </member>
        <member name="T:Atom.Core.TypeBuilderHelpers">
            <summary>
            Helper methods for <see cref="T:System.Reflection.Emit.TypeBuilder"/>
            </summary>
        </member>
        <member name="M:Atom.Core.TypeBuilderHelpers.CompileResultType(System.String,System.Collections.Generic.IDictionary{System.String,System.Type})">
            <summary>
            Creates and returns a <see cref="T:System.Type"/> for a class
            that contains the specified <paramref name="properties"/>
            </summary>
            <param name="name">The name of the type</param>
            <param name="properties">The properties the type should contain</param>
            <returns></returns>
        </member>
        <member name="M:Atom.Core.TypeBuilderHelpers.CreatePassThroughConstructors(System.Reflection.Emit.TypeBuilder,System.Type)">
            <summary>
            Creates one constructor for each public constructor in the base class. Each constructor simply
            forwards its arguments to the base constructor, and matches the base constructor's signature.
            Supports optional values, and custom attributes on constructors and parameters.
            Does not support variadic constructors
            </summary>
        </member>
        <member name="M:Atom.Core.TypeBuilderHelpers.CreateProperty(System.Reflection.Emit.TypeBuilder,System.String,System.Type)">
            <summary>
            Attaches a property to a type defined by the specified <paramref name="tb"/> with 
            the specified <paramref name="propertyName"/> and the specified <paramref name="propertyType"/>
            </summary>
            <param name="tb">The type builder</param>
            <param name="propertyName">The name of the property</param>
            <param name="propertyType">The type of the property</param>
        </member>
        <member name="M:Atom.Core.TypeBuilderHelpers.GetTypeBuilder(System.String)">
            <summary>
            Gets the type builder
            </summary>
            <param name="name">The name of the type</param>
            <returns></returns>
        </member>
        <member name="M:Atom.Core.TypeBuilderHelpers.BuildCustomAttributes(System.Collections.Generic.IEnumerable{System.Reflection.CustomAttributeData})">
            <summary>
            
            </summary>
            <param name="customAttributes">The custom attributes</param>
            <returns></returns>
        </member>
        <member name="T:Atom.Core.TypeExtensions">
            <summary>
            Extension methods for <see cref="T:System.Type"/>
            </summary>
        </member>
        <member name="M:Atom.Core.TypeExtensions.GetProperties(System.Type,System.String[])">
            <summary>
            Gets the properties with the specified <paramref name="propertyNames"/> of the specified <paramref name="type"/>.
            NOTE: The properties are returned in the order where the property names are requested!
            </summary>
            <param name="type">The type</param>
            <param name="propertyNames">The name of the properties</param>
            <returns></returns>
        </member>
        <member name="M:Atom.Core.TypeExtensions.GetOrderedProperties(System.Type)">
            <summary>
            Gets the properties of the specified <paramref name="type"/> ordered based on their declaration type.
            NOTE: The base type properties appear first!
            </summary>
            <param name="type">The type</param>
            <returns></returns>
        </member>
        <member name="M:Atom.Core.TypeExtensions.IsGenericIEnumerable(System.Type)">
            <summary>
            Checks whether the specified <paramref name="type"/> implements the <see cref="T:System.Collections.Generic.IEnumerable`1"/>
            or it's it self the <see cref="T:System.Collections.Generic.IEnumerable`1"/>
            </summary>
            <param name="type">The type</param>
            <returns></returns>
        </member>
        <member name="M:Atom.Core.TypeExtensions.IsEnumerable(System.Type)">
            <summary>
            Checks whether the specified <paramref name="type"/> implements the <see cref="T:System.Collections.IEnumerable"/>
            or it's it self the <see cref="T:System.Collections.IEnumerable"/>
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:Atom.Core.TypeExtensions.IsNullable(System.Type)">
            <summary>
            Checks if the specified <paramref name="type"/> is a <see cref="T:System.Nullable`1"/>
            </summary>
            <param name="type">The type</param>
            <returns></returns>
        </member>
        <member name="M:Atom.Core.TypeExtensions.CanHaveNullValue(System.Type)">
            <summary>
            Checks whether a <see cref="!:null"/> can be assigned to the specified <paramref name="type"/>
            </summary>
            <param name="type">The type</param>
            <returns></returns>
        </member>
        <member name="M:Atom.Core.TypeExtensions.IsNumber(System.Type)">
            <summary>
            Checks if the specified <paramref name="type"/> is a type that represents a number
            </summary>
            <param name="type">The type</param>
            <returns></returns>
        </member>
        <member name="M:Atom.Core.TypeExtensions.IsDate(System.Type)">
            <summary>
            Checks if the specified <paramref name="type"/> is a type that represents a date
            </summary>
            <param name="type">The type</param>
            <returns></returns>
        </member>
        <member name="M:Atom.Core.TypeExtensions.IsEnum(System.Type)">
            <summary>
            Checks if the specified <paramref name="type"/> is an enum or a nullable enum
            </summary>
            <param name="type">The type</param>
            <returns></returns>
        </member>
        <member name="M:Atom.Core.TypeExtensions.HasParameterlessConstructor(System.Type)">
            <summary>
            Checks whether the specified <paramref name="type"/> has a parameterless constructor or not
            </summary>
            <param name="type">The type</param>
            <returns></returns>
        </member>
        <member name="M:Atom.Core.TypeExtensions.GetPrivateFields(System.Type)">
            <summary>
            Gets the private fields that are declared in the specified <paramref name="type"/>
            and at its base types
            </summary>
            <param name="type">The type</param>
            <returns></returns>
        </member>
        <member name="M:Atom.Core.TypeExtensions.GetPrivateField(System.Type,System.String)">
            <summary>
            Gets the private field with the specified <paramref name="name"/>
            that is declared at the specified <paramref name="type"/> or at
            one of its base types
            </summary>
            <param name="type">The type</param>
            <param name="name">The name</param>
            <returns></returns>
        </member>
        <member name="T:Atom.Core.TypeHelpers">
            <summary>
            Helper methods for <see cref="T:System.Type"/>
            </summary>
        </member>
        <member name="P:Atom.Core.TypeHelpers.NumericTypes">
            <summary>
            The numeric types
            </summary>
        </member>
        <member name="P:Atom.Core.TypeHelpers.IntegralNumericTypes">
            <summary>
            The integral numeric types
            </summary>
        </member>
        <member name="P:Atom.Core.TypeHelpers.FloatingPointNumericTypes">
            <summary>
            The floating point numeric types
            </summary>
        </member>
        <member name="M:Atom.Core.TypeHelpers.GetNonEnumerableType(System.Type)">
            <summary>
            Gets the T from the <see cref="T:System.Collections.Generic.IEnumerable`1"/> of the specified <paramref name="type"/>
            when it implements the <see cref="T:System.Collections.Generic.IEnumerable`1"/> interface
            </summary>
            <param name="type">The type that implements the <see cref="T:System.Collections.Generic.IEnumerable`1"/> interface</param>
            <returns></returns>
        </member>
        <member name="M:Atom.Core.TypeHelpers.GetNonNullableType(System.Type)">
            <summary>
            Gets the T from the <see cref="T:System.Nullable`1"/> of the specified <paramref name="type"/>
            when the <paramref name="type"/> is nullable, otherwise it returns the type
            </summary>
            <param name="type">The type</param>
            <returns></returns>
        </member>
        <member name="M:Atom.Core.TypeHelpers.GetNullableType(System.Type)">
            <summary>
            Uses the specified <paramref name="type"/> to create the <see cref="T:System.Nullable`1"/>
            when the <paramref name="type"/> is a value type, otherwise it returns the <paramref name="type"/>
            </summary>
            <param name="type">The type whose nullable equivalent to get</param>
            <returns></returns>
        </member>
        <member name="M:Atom.Core.TypeHelpers.GetDefaultValue(System.Type)">
            <summary>
            Gets the default value of the specified <paramref name="type"/>
            </summary>
            <param name="type">The type whose default value to get</param>
            <returns></returns>
        </member>
        <member name="M:Atom.Core.TypeHelpers.ConvertNumber(System.Object,System.Type)">
            <summary>
            Converts the specified <paramref name="number"/> from its current type to
            the specified <paramref name="type"/>
            </summary>
            <param name="number">The number</param>
            <param name="type">The numeric type to convert the number</param>
            <returns></returns>
        </member>
        <member name="M:Atom.Core.TypeHelpers.AddNumbers(System.Type,System.Object,System.Object)">
            <summary>
            Adds the specified <paramref name="number1"/> to the specified <paramref name="number2"/>
            and returns a number of type <paramref name="type"/>
            </summary>
            <param name="type">The type of the numbers</param>
            <param name="number1">The first number</param>
            <param name="number2">The second number</param>
            <returns></returns>
        </member>
        <member name="M:Atom.Core.TypeHelpers.SubtractNumbers(System.Type,System.Object,System.Object)">
            <summary>
            Subtracts the specified <paramref name="subtracter"/> from the specified <paramref name="subtrahend"/>
            and returns a number of type <paramref name="type"/>
            </summary>
            <param name="type">The type of the numbers</param>
            <param name="subtrahend">The subtrahend</param>
            <param name="subtracter">The subtracter</param>
            <returns></returns>
        </member>
        <member name="M:Atom.Core.TypeHelpers.MultiplyNumbers(System.Type,System.Object,System.Object)">
            <summary>
            Multiplies the specified <paramref name="number1"/> with the specified <paramref name="number2"/>
            and returns a number of type <paramref name="type"/>
            </summary>
            <param name="type">The type of the numbers</param>
            <param name="number1">The first number</param>
            <param name="number2">The second number</param>
            <returns></returns>
        </member>
        <member name="M:Atom.Core.TypeHelpers.DivideNumbers(System.Type,System.Object,System.Object)">
            <summary>
            Divides the specified <paramref name="numerator"/> with the specified <paramref name="denominator"/>
            and returns a number of type <paramref name="type"/>
            </summary>
            <param name="type">The type of the numbers</param>
            <param name="numerator">The numerator</param>
            <param name="denominator">The denominator</param>
            <returns></returns>
        </member>
        <member name="M:Atom.Core.TypeHelpers.AbsoluteNumber(System.Type,System.Object)">
            <summary>
            Gets the absolute representation of the specified <paramref name="number"/>
            and returns a number of type <paramref name="type"/>
            </summary>
            <param name="type">The type of the numbers</param>
            <param name="number">The number</param>
            <returns></returns>
        </member>
        <member name="M:Atom.Core.TypeHelpers.MinNumber(System.Type,System.Object,System.Object)">
            <summary>
            Gets the minimum value of the specified numbers and returns a number 
            of type <paramref name="type"/>.
            NOTE: When both numbers are <see cref="!:null"/> then <see cref="!:null"/> is returned, otherwise the
                  <see cref="!:null"/> number is casted to a 0!
            </summary>
            <param name="type">The type of the numbers</param>
            <param name="number1">The first number</param>
            <param name="number2">The second number</param>
            <returns></returns>
        </member>
        <member name="M:Atom.Core.TypeHelpers.MaxNumber(System.Type,System.Object,System.Object)">
            <summary>
            Gets the maximum value of the specified numbers and returns a number 
            of type <paramref name="type"/>.
            NOTE: When both numbers are <see cref="!:null"/> then <see cref="!:null"/> is returned, otherwise the
                  <see cref="!:null"/> number is casted to a 0!
            </summary>
            <param name="type">The type of the numbers</param>
            <param name="number1">The first number</param>
            <param name="number2">The second number</param>
            <returns></returns>
        </member>
        <member name="T:Atom.Core.UriExtensions">
            <summary>
            Extension methods for <see cref="T:System.Uri"/>
            </summary>
        </member>
        <member name="M:Atom.Core.UriExtensions.ToMemoryStream(System.Uri)">
            <summary>
            Downloads the data related to the specified <paramref name="uri"/> and
            converts them to a <see cref="T:System.IO.MemoryStream"/>
            </summary>
            <param name="uri">The uri</param>
            <returns></returns>
        </member>
        <member name="M:Atom.Core.UriExtensions.OpenInBrowser(System.Uri)">
            <summary>
            Opens the link specified by the <paramref name="uri"/> to a browser
            </summary>
            <param name="uri">The uri</param>
        </member>
        <member name="T:Atom.Core.BaseViewModel">
            <summary>
            A standard view model that fires the property changed when needed
            </summary>
        </member>
        <member name="F:Atom.Core.BaseViewModel.DependencyMap">
            <summary>
            The dictionary where we are going to keep the dependencies of the properties.
            Required in order to use the attribute
            </summary>
        </member>
        <member name="M:Atom.Core.BaseViewModel.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Atom.Core.BaseViewModel.SetPropertyValue``1(``0@,``0,System.Action{``0})">
            <summary>
            Sets the property value if it has changes and fires the changed event if that exists
            </summary>
            <typeparam name="T">The type of the property</typeparam>
            <param name="currentValue">Its current value</param>
            <param name="newValue">The new value we want to set</param>
            <param name="eventTrigger">The event trigger that fires the notification event</param>
        </member>
        <member name="M:Atom.Core.BaseViewModel.Dispose">
            <summary>
            Disposes the view model
            </summary>
        </member>
        <member name="M:Atom.Core.BaseViewModel.RunCommandAsync(System.Linq.Expressions.Expression{System.Func{System.Boolean}},System.Func{System.Threading.Tasks.Task})">
            <summary>
            Runs a command if the updating flag is not set.
            If the flag is true (indicating the function is already running) then the action is not run.
            If the flag is false (indicating no running function) then the action is run.
            Once the action is finished if it was run, then the flag is reset to false
            </summary>
            <param name="updatingFlag">The boolean property flag defining if the command is already running</param>
            <param name="action">The action to run if the command is not already running</param>
            <returns></returns>
        </member>
        <member name="M:Atom.Core.BaseViewModel.RunCommandAsync``1(System.Linq.Expressions.Expression{System.Func{System.Boolean}},System.Func{System.Threading.Tasks.Task{``0}},``0)">
            <summary>
            Runs a command if the updating flag is not set.
            If the flag is true (indicating the function is already running) then the action is not run.
            If the flag is false (indicating no running function) then the action is run.
            Once the action is finished if it was run, then the flag is reset to false
            </summary>
            <param name="updatingFlag">The boolean property flag defining if the command is already running</param>
            <param name="action">The action to run if the command is not already running</param>
            <param name="defaultValue">The default value</param>
            <typeparam name="T">The type of the value that the task should return</typeparam>
            <returns></returns>
        </member>
        <member name="E:Atom.Core.BaseViewModel.PropertyChanged">
            <summary>
            The event fires when ever a property changes
            </summary>
        </member>
        <member name="M:Atom.Core.BaseViewModel.OnPropertyChanged(System.String)">
            <summary>
            Fires the <see cref="E:Atom.Core.BaseViewModel.PropertyChanged"/> event
            </summary>
            <param name="propertyName">The name of the property that we want to fire a <see cref="E:Atom.Core.BaseViewModel.PropertyChanged"/> event upon</param>
        </member>
        <member name="T:Atom.Core.DependsOnPropertyAttribute">
            <summary>
            Attribute that is used to signify a property of a child that is dependent on one
            or multiple properties of the ancestor class so that the property changed event
            gets fired
            </summary>
        </member>
        <member name="M:Atom.Core.DependsOnPropertyAttribute.#ctor(System.String)">
            <summary>
            The name of the property this property is linked to
            </summary>
        </member>
        <member name="T:Atom.Core.XMLHelpers">
            <summary>
            Helper methods associated with the XML model
            </summary>
        </member>
        <member name="P:Atom.Core.XMLHelpers.DefaultSettings">
            <summary>
            The default XML writer settings
            </summary>
        </member>
        <member name="M:Atom.Core.XMLHelpers.ToXml(System.Object,System.Xml.Serialization.XmlSerializerNamespaces,System.Xml.XmlWriterSettings)">
            <summary>
            Serializes the specified <paramref name="obj"/> to an XML string, using the specified <paramref name="namespaces"/> and the specified <paramref name="settings"/>
            </summary>
            <param name="obj">The object to serialize</param>
            <param name="namespaces">The name spaces</param>
            <param name="settings">The settings</param>
        </member>
        <member name="M:Atom.Core.XMLHelpers.ToXml(System.Object,System.Xml.XmlWriterSettings)">
            <summary>
            Serializes the specified <paramref name="obj"/> to an XML string using the specified <paramref name="settings"/>
            </summary>
            <param name="obj">The object to serialize</param>
            <param name="settings">The settings</param>
        </member>
        <member name="M:Atom.Core.XMLHelpers.FromXml``1(System.String)">
            <summary>
            Deserializes the specified <paramref name="xml"/> to an object of the
            specified type
            </summary>
            <param name="xml">The XML</param>
        </member>
        <member name="M:Atom.Core.XMLHelpers.FromXml(System.String,System.Type)">
            <summary>
            Deserializes the specified <paramref name="xml"/> to an object
            of the specified <paramref name="type"/>
            </summary>
        </member>
        <member name="M:Atom.Core.XMLHelpers.ToXmlFile(System.Object,System.String,System.Xml.Serialization.XmlSerializerNamespaces,System.Xml.XmlWriterSettings)">
            <summary>
            Serializes the specified <paramref name="obj"/> to XML and saves it to the specified <paramref name="filePath"/>
            using the specified <paramref name="settings"/> and the specified <paramref name="namespaces"/>
            </summary>
            <param name="obj">The object to serialize</param>
            <param name="filePath">The file path</param>
            <param name="namespaces">The namespaces</param>
            <param name="settings">The settings</param>
        </member>
        <member name="M:Atom.Core.XMLHelpers.ToXmlFile(System.Object,System.String,System.Xml.XmlWriterSettings)">
            <summary>
            Serializes the specified <paramref name="obj"/> to XML and saves it to the specified <paramref name="filePath"/>
            using the specified <paramref name="settings"/>
            </summary>
            <param name="obj">The object to serialize</param>
            <param name="filePath">The file path</param>
            <param name="settings">The settings</param>
        </member>
        <member name="M:Atom.Core.XMLHelpers.FromXmlFile``1(System.String)">
            <summary>
            Reads the XML file at the specified <paramref name="filePath"/> and deserializes it to
            an object of the specified type
            </summary>
            <param name="filePath">The file path</param>
        </member>
        <member name="M:Atom.Core.XMLHelpers.FromXMLFileAsync(System.String,System.Type)">
            <summary>
            Reads the XML file at the specified <paramref name="filePath"/> and deserializes it to
            an object of the specified <paramref name="type"/>
            </summary>
            <param name="filePath">The file path</param>
            <param name="type">The type</param>
        </member>
    </members>
</doc>
